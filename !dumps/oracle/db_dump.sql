CREATE SEQUENCE S_100_1_FILES
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  CACHE 20;
CREATE SEQUENCE S_100_1_VIDEOBLOCK
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  CACHE 20;
CREATE SEQUENCE S_100_1_WEBINAR_ANSWERS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;
CREATE SEQUENCE S_100_1_WEBINARS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;
CREATE SEQUENCE S_100_1_WEBINAR_QUESTIONS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;
CREATE SEQUENCE S_100_1_WEBINAR_VOTES
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;
CREATE SEQUENCE S_100_1_WEBINAR_WHITEBOARD
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;
CREATE SEQUENCE S_100_1_WBN_WB_POINTS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;
CREATE SEQUENCE S_100_1_WEBINAR_RECORDS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;
CREATE SEQUENCE S_100_1_HACP_DEBUG
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE S_100_1_HELP
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE S_100_1_HOLIDAYS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20; 
  
CREATE SEQUENCE S_100_1_HTMLPAGE
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE S_100_1_HTMLPAGE_GROUPS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_100_1_RESOURCES
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE S_100_1_RESOURCE_REVISIONS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE S_100_1_SCALES
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;
  
CREATE SEQUENCE S_100_1_SCALE_VALUES
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;
  
CREATE SEQUENCE S_100_1_SUBJECTS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE S_100_1_MESSAGES
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE S_100_1_INTERFACE
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE S_105_1_VIDEO
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_106_1_PROVIDERS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_106_1_SUPPLIERS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE  S_106_1_SUBSCRIPTION
    INCREMENT BY 1
    START WITH 1
    NOMAXVALUE
    NOMINVALUE
    NOCYCLE
    CACHE 20
    NOORDER
;

CREATE SEQUENCE S_106_1_SUBSCRIPTION_CHANNELS
    INCREMENT BY 1
    START WITH 1
    NOMAXVALUE
    NOMINVALUE
    NOCYCLE
    CACHE 20
    NOORDER
;

CREATE SEQUENCE S_106_1_SUBSCRIPTION_ENTRIES
    INCREMENT BY 1
    START WITH 1
    NOMAXVALUE
    NOMINVALUE
    NOCYCLE
    CACHE 20
    NOORDER
;

CREATE SEQUENCE S_107_1_WEBINAR_CHAT
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_108_1_WEBINAR_HISTORY
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_109_1_WEBINAR_PLAN
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_114_1_MANAGERS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_118_1_LIB_CMS_INDEX_WORDS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_19_1_COURSES
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_21_1_DEANS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_23_1_EVENTS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE S_25_1_FAQ
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_27_1_FORMULA
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


  CREATE SEQUENCE S_100_1_FORUM
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

  CREATE SEQUENCE S_100_1_FORUM_MESSAGE
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;
  
  CREATE SEQUENCE S_100_1_FORUM_SECTION
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;
  


CREATE SEQUENCE S_30_1_GRADUATED
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE S_32_1_CERTIFICATES
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;
  
CREATE SEQUENCE S_31_1_GROUPNAME
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;
CREATE SEQUENCE S_36_1_LOGUSER
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_40_1_NOTICE
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE S_41_1_NEWS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_42_1_NEWS2
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE S_42_1_OAUTH_APPS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE S_42_1_OAUTH_TOKENS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE S_42_1_OAUTH_NONCES
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;  

CREATE SEQUENCE S_42_1_OFFLINES
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;  

CREATE SEQUENCE S_43_1_OPTIONS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_44_1_ORGANIZATIONS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_45_1_PEOPLE
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;
  
  CREATE SEQUENCE S_45_1_PROCESSES
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;
    
  CREATE SEQUENCE S_45_1_PROGRAMM
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;
  
  CREATE SEQUENCE S_45_1_PROGRAMM_EVENTS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;
  
  

	
  CREATE SEQUENCE S_45_1_STATE_OF_PROCESS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_46_1_PERIODS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_49_1_PERMISSION_GROUPS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_65_1_QUIZZES
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;



CREATE SEQUENCE S_55_1_REPORTS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE S_55_1_ROOMS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_57_1_SCHEDULE
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE S_58_1_SCHEDULEID
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_61_1_SEQUENCE_HISTORY
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE S_61_1_STRUCTURE_OF_ORGAN
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_62_1_STUDENTS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_63_1_TEACHERS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_65_1_TEST
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;
  
CREATE SEQUENCE S_102_1_TASKS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;
  

CREATE SEQUENCE S_65_1_TEST_ABSTRACT
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;
  
CREATE SEQUENCE S_65_1_TEST_FEEDBACK
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

 CREATE SEQUENCE S_67_1_EXERCISES
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE S_77_1_ADMINS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_83_1_CLAIMANTS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_86_1_CHAT_MESSAGES
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_88_1_SCORM_TRACKLOG
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE S_88_1_SCORM_REPORT
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE S_89_1_SESSIONS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;


CREATE SEQUENCE S_90_1_LIBRARY
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE S_94_1_CLASSIFIERS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;
  
CREATE SEQUENCE S_94_1_CLASSIFIERS_IMAGES
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;
  
CREATE SEQUENCE S_94_1_CLASSIFIERS_TYPES
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE S_94_1_COMMENTS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE S_100_1_BLOG
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE S_101_1_TAG
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  CACHE 20;

CREATE SEQUENCE S_ID_WIKI_ARTICLES
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  INCREMENT BY 1
  CACHE 20;

CREATE SEQUENCE S_ID_WIKI_ARCHIVE
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  INCREMENT BY 1
  CACHE 20;

CREATE SEQUENCE S_ID_CHAT_CHANNELS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  INCREMENT BY 1
  CACHE 20;

CREATE SEQUENCE S_ID_CHAT_HISTORY
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  INCREMENT BY 1
  CACHE 20;

CREATE SEQUENCE S_ID_STORAGE_FILESYSTEM
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  INCREMENT BY 1
  CACHE 20;

CREATE SEQUENCE S_100_INTERESTING_FACTS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  INCREMENT BY 1
  CACHE 20;
  
  CREATE SEQUENCE S_100_1_INTERVIEW
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  INCREMENT BY 1
  CACHE 20;


 CREATE SEQUENCE S_100_SESSION_GUEST
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  INCREMENT BY 1
  CACHE 20;

 CREATE SEQUENCE S_100_SECTIONS
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  INCREMENT BY 1
  CACHE 20;

 CREATE SEQUENCE S_100_KBASE_ASSESSMENT
  START WITH 1
  MAXVALUE 1E27
  MINVALUE 1
  INCREMENT BY 1
  CACHE 20;


CREATE TABLE ADMINS
(
  AID  NUMBER(10)                               NOT NULL,
  MID  NUMBER(10)                               NOT NULL,
  CONSTRAINT admins_pk PRIMARY KEY (AID)
)
;


CREATE TABLE CAPTCHA
(
  LOGIN         VARCHAR2(255 BYTE)              NOT NULL,
  ATTEMPTS      NUMBER(10)                      DEFAULT 0 NOT NULL,
  UPDATED       DATE,
  CONSTRAINT captcha_pk PRIMARY KEY (LOGIN)
)
;

CREATE TABLE CLAIMANTS
(
  SID      NUMBER(10)                           NOT NULL,
  MID      NUMBER(10)                           NOT NULL,
  CID      NUMBER(10)                           DEFAULT 0 NOT NULL,
  BASE_SUBJECT      NUMBER(10)                  DEFAULT 0 NOT NULL,
  TEACHER  NUMBER(5),
  CREATED  DATE,
  CREATED_BY      NUMBER(10)                           NOT NULL,
  BEGIN_   DATE,
  END_     DATE,
  STATUS   NUMBER(5)                            DEFAULT 0 NOT NULL,
  TYPE_    NUMBER(5)                            DEFAULT 0 NOT NULL,
  LASTNAME        VARCHAR2(255 BYTE),
  FIRSTNAME       VARCHAR2(255 BYTE),
  PATRONYMIC      VARCHAR2(255 BYTE),
  MID_EXTERNAL    VARCHAR2(255 BYTE),
  COMMENTS        VARCHAR2(255 BYTE),
  DUBLICATE NUMBER(3)                           DEFAULT 0,  
  CONSTRAINT claimants_pk PRIMARY KEY (SID)
)
;

CREATE TABLE CLASSIFIERS
(
  CLASSIFIER_ID      NUMBER(10)                 NOT NULL,
  LFT                NUMBER(10)                 NOT NULL,
  RGT                NUMBER(10)                 NOT NULL,
  LEVEL_             NUMBER(10)                 NOT NULL,
  TYPE_              NUMBER(10)                 NOT NULL,
  NAME               VARCHAR2(255 BYTE),
  CONSTRAINT classifiers_pk PRIMARY KEY (CLASSIFIER_ID)
)
;

CREATE TABLE CLASSIFIERS_LINKS
(
  ITEM_ID INT NOT NULL,
  CLASSIFIER_ID INT NOT NULL,
  TYPE_ INT NOT NULL,
  CONSTRAINT cllinks_pk PRIMARY KEY (ITEM_ID, CLASSIFIER_ID, TYPE_)
)
;

CREATE TABLE CLASSIFIERS_IMAGES
(
  CLASSIFIER_IMAGE_ID INT NOT NULL,
  ITEM_ID INT NOT NULL,
  TYPE_ INT NOT NULL,
  CONSTRAINT climages_pk PRIMARY KEY (CLASSIFIER_IMAGE_ID)
)
;




CREATE TABLE CLASSIFIERS_TYPES
(
  TYPE_ID           NUMBER(10)                 NOT NULL,
  NAME              VARCHAR2(255 BYTE),
  LINK_TYPES        VARCHAR2(255 BYTE),
  CONSTRAINT cltypes_pk PRIMARY KEY (TYPE_ID)
)
;

CREATE TABLE COMMENTS
(
  ID            NUMBER(10)                          NOT NULL,
  ACTIVITY_NAME VARCHAR2(255 BYTE),
  SUBJECT_NAME  VARCHAR2(255 BYTE),
  SUBJECT_ID    NUMBER(10),
  USER_ID       NUMBER(10),
  ITEM_ID       NUMBER(10),
  MESSAGE       CLOB,
  CREATED       DATE,
  CONSTRAINT comments_pk PRIMARY KEY (ID)
)
;


CREATE TABLE COURSES
(
  CID                   NUMBER(10)              NOT NULL,
  TITLE                 VARCHAR2(255 BYTE)      NOT NULL,
  DESCRIPTION           CLOB,
  TYPEDES               NUMBER(5),
  CD                    CLOB,
  CBEGIN                DATE,
  CEND                  DATE,
  FEE                   FLOAT(24),
  VALUTA                NUMBER(5),
  STATUS                NUMBER(5)               DEFAULT 0,
  CREATEBY              VARCHAR2(50 BYTE),
  CREATEDATE            DATE,
  LONGTIME              NUMBER(10),
  DID                   VARCHAR2(255 BYTE),
  CREDITS_STUDENT       NUMBER(10)              DEFAULT 0,
  CREDITS_TEACHER       NUMBER(10)              DEFAULT 0,
  LOCKED                NUMBER(5)               DEFAULT 0,
  CHAIN                 NUMBER(10)              DEFAULT 0,
  IS_POLL               NUMBER(5)               DEFAULT 0,
  IS_MODULE_NEED_CHECK  NUMBER(5)               DEFAULT 0,
  TYPE_                 NUMBER(5)               DEFAULT 0,
  TREE                  CLOB,
  PROGRESS              NUMBER(10)              DEFAULT 0,
  SEQUENCE_             NUMBER(10)              DEFAULT 0,
  PROVIDER              NUMBER(10)              DEFAULT 0,
  PROVIDER_OPTIONS      VARCHAR2(255 BYTE),  
  PLANDATE              DATE,
  DEVELOPSTATUS         VARCHAR2(45 BYTE),
  LASTUPDATEDATE        DATE,
  ARCHIVEDATE           DATE,
  SERVICES              NUMBER(10)              DEFAULT 0,
  HAS_TREE              NUMBER(5)               DEFAULT 0,
  NEW_WINDOW            NUMBER(5)  DEFAULT 0 NOT NULL,
  EMULATE               NUMBER(5)  DEFAULT 0 NOT NULL,
  FORMAT                NUMBER(10) DEFAULT 0 NOT NULL,
  AUTHOR               NUMBER(5)               DEFAULT 0,
  CONSTRAINT courses_pk PRIMARY KEY (CID)
)
;


CREATE TABLE COURSES_MARKS
(
  CID    NUMBER(10)                             DEFAULT 0                     NOT NULL,
  MID    NUMBER(10)                             DEFAULT 0                     NOT NULL,
  MARK   VARCHAR2(255 BYTE)                     DEFAULT '-1',
  ALIAS  VARCHAR2(255 BYTE)                     DEFAULT '',
  CONFIRMED          NUMBER(3)                  DEFAULT 0,  
  COMMENTS  CLOB,  
  CONSTRAINT coursemarks_pk PRIMARY KEY (CID,MID)
)
;


CREATE TABLE CRONTASK
(
  CRONTASK_ID       VARCHAR2(255 BYTE)          DEFAULT ''                    NOT NULL,
  CRONTASK_RUNTIME  NUMBER(11)                  DEFAULT 0,
  CONSTRAINT ct_pk PRIMARY KEY (CRONTASK_ID)
)
;


CREATE TABLE DEANS
(
  DID  NUMBER(10)                               NOT NULL,
  MID  NUMBER(10)                               NOT NULL,
  SUBJECT_ID NUMBER(10)             DEFAULT 0,
  CONSTRAINT deans_pk PRIMARY KEY (DID)
)
;

CREATE TABLE DEANS_OPTIONS
(
  USER_ID  NUMBER(10)                           NOT NULL,
  UNLIMITED_SUBJECTS  NUMBER(10)                DEFAULT 1,
  UNLIMITED_CLASSIFIERS    NUMBER(10)                 DEFAULT 1,
  ASSIGN_NEW_SUBJECTS NUMBER(10)                DEFAULT 0
)
;

CREATE TABLE DEANS_RESPONSIBILITIES
(
  USER_ID  NUMBER(10)                           NOT NULL,
  CLASSIFIER_ID  NUMBER(10)                     NOT NULL
)
;

CREATE TABLE DEAN_POLL_USERS
(
  LESSON_ID                        INTEGER	DEFAULT 0,
  HEAD_MID                         INTEGER	DEFAULT 0,
  STUDENT_MID                      INTEGER	DEFAULT 0
)
;


CREATE TABLE DEVELOPERS
(
  MID  NUMBER(10)                               DEFAULT 0,
  CID  NUMBER(10)                               DEFAULT 0,
  CONSTRAINT developers_pk PRIMARY KEY (MID,CID)
)
;

CREATE TABLE EVENTS
(
  EVENT_ID     NUMBER(10)                       NOT NULL,
  TITLE        VARCHAR2(255 BYTE),
  TOOL         NUMBER(5),
  SCALE_ID     NUMBER(5)	DEFAULT 1			NOT NULL,
  WEIGHT       NUMBER(5)    DEFAULT 5           NOT NULL,
  CONSTRAINT events_pk PRIMARY KEY (EVENT_ID)
)
;

CREATE TABLE FAQ
(
  FAQ_ID    NUMBER(10)                            NOT NULL,
  QUESTION  CLOB,
  ANSWER    CLOB,
  ROLES     VARCHAR(255 BYTE),
  PUBLISHED NUMBER(5),
  CONSTRAINT faq_pk PRIMARY KEY (FAQ_ID)
)
;

CREATE TABLE FILE_
(
  KOD    VARCHAR2(100 BYTE)                     NOT NULL,
  FNUM   NUMBER(10)                             NOT NULL,
  FTYPE  NUMBER(10)                             NOT NULL,
  FNAME  VARCHAR2(100 BYTE)                     NOT NULL,
  FDATA  BLOB                                   NOT NULL,
  FDATE  NUMBER(19)                             NOT NULL,
  FX     NUMBER(10)                             NOT NULL,
  FY     NUMBER(10)                             NOT NULL,
  CONSTRAINT file_pk PRIMARY KEY (KOD,fnum)
)
;

CREATE TABLE FILES
(
  FILE_ID    INTEGER,
  NAME       VARCHAR2(200 CHAR),
  PATH       VARCHAR2(500 CHAR),
  FILE_SIZE  INTEGER,
  CONSTRAINT files_pk PRIMARY KEY (FILE_ID)
)
;

CREATE TABLE VIDEOBLOCK
(
  FILE_ID    INTEGER,
  NAME       VARCHAR2(200 CHAR),
  CONSTRAINT videoblock_pk PRIMARY KEY (FILE_ID)
)
;

CREATE TABLE FORMULA
(
  ID       NUMBER(10)                           NOT NULL,
  NAME     VARCHAR2(255 BYTE)                   NOT NULL,
  FORMULA  CLOB,
  TYPE_    NUMBER(10),
  CID      NUMBER(10)                           DEFAULT 0                     NOT NULL,
  CONSTRAINT formula_pk PRIMARY KEY (ID)
)
;


CREATE TABLE FORUMS_LIST  ( 
    FORUM_ID   NUMBER(10) NOT NULL,
    SUBJECT_ID NUMBER(10) DEFAULT 0 NOT NULL,
    USER_ID    NUMBER(10) NOT NULL,
    USER_NAME  VARCHAR2(255) NULL,
    USER_IP    VARCHAR2(16) DEFAULT '127.0.0.1' NOT NULL,
    TITLE      VARCHAR2(255) NOT NULL,
    CREATED    DATE NULL,
    UPDATED    DATE NULL,
    FLAGS      NUMBER(10) DEFAULT 0 NOT NULL,
    CONSTRAINT forum_pk PRIMARY KEY(FORUM_ID)
)
;


CREATE TABLE FORUMS_SECTIONS  ( 
    SECTION_ID NUMBER(10) NOT NULL,
    LESSON_ID  NUMBER(10) DEFAULT 0 NOT NULL,
    FORUM_ID   NUMBER(10) NULL,
    USER_ID    NUMBER(10) NULL,
    USER_NAME  VARCHAR2(255) NULL,
    USER_IP    VARCHAR2(16) NULL,
    PARENT_ID  NUMBER(10) DEFAULT 0 NOT NULL,
    TITLE      VARCHAR2(255) NOT NULL,
    TEXT       CLOB NULL,
    CREATED    DATE NULL,
    UPDATED    DATE NULL,
    LAST_MSG   DATE NULL,
    COUNT_MSG  NUMBER(10) DEFAULT 0 NOT NULL,
    ORDER_     NUMBER(10) DEFAULT 0 NOT NULL,
    FLAGS      NUMBER(10) DEFAULT 0 NOT NULL,
    IS_HIDDEN  NUMBER(10) DEFAULT 0 NOT NULL,
    CONSTRAINT forum_list_pk PRIMARY KEY(SECTION_ID)
)
;

CREATE TABLE FORUMS_MESSAGES  ( 
    MESSAGE_ID   NUMBER(10) NOT NULL,
    FORUM_ID     NUMBER(10) NOT NULL,
    SECTION_ID   NUMBER(10) NOT NULL,
    USER_ID      NUMBER(10) NOT NULL,
    USER_NAME    VARCHAR2(255) NULL,
    USER_IP      VARCHAR2(16) DEFAULT '127.0.0.1' NOT NULL,
    LEVEL_       NUMBER(10) DEFAULT 0 NOT NULL,
    ANSWER_TO    NUMBER(10) DEFAULT 0 NOT NULL,
    TITLE        VARCHAR2(255) NULL,
    TEXT         CLOB NULL,
    TEXT_PREVIEW VARCHAR2(255) NULL,
    TEXT_SIZE    NUMBER(10) DEFAULT 0 NOT NULL,
    CREATED      DATE NULL,
    UPDATED      DATE NULL,
    DELETE_DATE  DATE NULL,
    DELETED_BY   NUMBER(10) DEFAULT 0 NOT NULL,
    RATING       NUMBER(10) DEFAULT 0 NOT NULL,
    FLAGS        NUMBER(10) DEFAULT 0 NOT NULL,
    IS_HIDDEN    NUMBER(10) DEFAULT 0 NOT NULL,
    CONSTRAINT forum_message PRIMARY KEY(MESSAGE_ID)
)
;

CREATE TABLE FORUMS_MESSAGES_SHOWED  ( 
    USER_ID    NUMBER(10) NOT NULL,
    MESSAGE_ID NUMBER(10) NOT NULL,
    CREATED    DATE NULL,
    CONSTRAINT forum_showed_pk PRIMARY KEY(USER_ID,MESSAGE_ID)
)
;
CREATE TABLE GRADUATED
(
  SID  NUMBER(10)                               NOT NULL,
  MID  NUMBER(10)                               NOT NULL,
  CID  NUMBER(10)                               NOT NULL,
  BEGIN_ DATE,
  END_ DATE,
  CERTIFICATE_ID NUMBER(10)                     NULL,
  CREATED DATE,
  STATUS  NUMBER(10),
  SCORE VARCHAR2(200 BYTE),
  IS_LOOKABLE  NUMBER(10) DEFAULT 0,
  PROGRESS  NUMBER(10) DEFAULT 0,
  CONSTRAINT graduatedy_pk PRIMARY KEY (SID)
)
;

CREATE TABLE CERTIFICATES
(
  CERTIFICATE_ID  NUMBER(10)                    NOT NULL,
  USER_ID  NUMBER(10)                               NOT NULL,
  SUBJECT_ID  NUMBER(10)                               NOT NULL,
  CREATED DATE,
  CONSTRAINT certificate_pk PRIMARY KEY (CERTIFICATE_ID)
)
;

CREATE TABLE GROUPNAME
(
  GID   NUMBER(10)                              NOT NULL,
  CID   NUMBER(10)                              NOT NULL,
  NAME  VARCHAR2(255 BYTE)                      NOT NULL,
  OWNER_GID NUMBER(10),
  CONSTRAINT groupname_pk PRIMARY KEY (GID)
)
;


CREATE TABLE GROUPUSER
(
  MID  NUMBER(10)                               NOT NULL,
  CID  NUMBER(10)                               NOT NULL,
  GID  NUMBER(10)                               NOT NULL,
  CONSTRAINT gu_pk PRIMARY KEY (MID,GID)
)
;


CREATE TABLE HACP_DEBUG
(
  ID         NUMBER(10)                         NOT NULL,
  MESSAGE    CLOB                               NOT NULL,
  DATE_      DATE,
  DIRECTION  NUMBER(5)                          DEFAULT 0                     NOT NULL,
  CONSTRAINT hd_pk PRIMARY KEY (ID)
)
;


CREATE TABLE HELP
(
  HELP_ID    NUMBER(10)                         NOT NULL,
  ROLE       VARCHAR2(255 BYTE)                 NOT NULL,
  APP_MODULE VARCHAR2(25 BYTE),
  MODULE     VARCHAR2(255 BYTE),
  CONTROLLER VARCHAR2(255 BYTE),
  ACTION     VARCHAR2(255 BYTE),
  LINK_SUBJECT  NUMBER(10) DEFAULT 0                     NOT NULL,
  LINK    VARCHAR2(255 BYTE),
  TITLE      VARCHAR2(255 BYTE),
  TEXT       CLOB,
  MODERATED  NUMBER(3)                          DEFAULT 0                     NOT NULL,
  LANG       VARCHAR2(3 BYTE) DEFAULT '' NOT NULL,
  CONSTRAINT help_pk PRIMARY KEY (HELP_ID)
)
;


CREATE TABLE HOLIDAYS
(
  ID		NUMBER(10)                         	NOT NULL,
  TITLE		VARCHAR2(255 BYTE)                 	NULL,
  DATE_		DATE                    			NOT NULL,
  TYPE_		NUMBER(10)                          DEFAULT 0,
  USER_ID         NUMBER(10) DEFAULT 0 NOT NULL,
  CONSTRAINT holidays_pk PRIMARY KEY (ID)
)
;


CREATE TABLE HTMLPAGE
(
  PAGE_ID    NUMBER(10)                         NOT NULL,
  GROUP_ID    NUMBER(10)                         NOT NULL,
  NAME       VARCHAR2(255 BYTE)                 NOT NULL,
  ORDR          NUMBER(10)                      DEFAULT 10,  
  TEXT       CLOB,
  URL		VARCHAR2(255 CHAR)  DEFAULT ''     NOT NULL,
  CONSTRAINT htmlpage_pk PRIMARY KEY (PAGE_ID)
)
;


CREATE TABLE HTMLPAGE_GROUPS
(
  GROUP_ID    		 NUMBER(10)                           NOT NULL,
  LFT                NUMBER(10)                           NOT NULL,
  RGT                NUMBER(10)                           NOT NULL,
  LEVEL_             NUMBER(10)                           NOT NULL,
  ROLE               VARCHAR2(255 BYTE)                   NOT NULL,
  NAME               VARCHAR2(255 BYTE),
  ORDR          	 NUMBER(10)                      DEFAULT 10,  
  CONSTRAINT htmlpage_groups_pk PRIMARY KEY (GROUP_ID)
)
;

CREATE TABLE LIBRARY
(
  BID                NUMBER(10)                 NOT NULL,
  PARENT             NUMBER(10)                 DEFAULT 0                     NOT NULL,
  CATS               CLOB,
  MID                NUMBER(10)                 DEFAULT 0                     NOT NULL,
  UID_               NUMBER(10)                 DEFAULT 0,
  TITLE              VARCHAR2(255 BYTE),
  AUTHOR             VARCHAR2(255 BYTE),
  PUBLISHER          VARCHAR2(255 BYTE),
  PUBLISH_DATE       VARCHAR2(4 BYTE),
  DESCRIPTION        CLOB,
  KEYWORDS           CLOB,
  FILENAME           VARCHAR2(255 BYTE),
  LOCATION           VARCHAR2(255 BYTE),
  METADATA           BLOB,
  NEED_ACCESS_LEVEL  NUMBER(10)                 DEFAULT 10                    NOT NULL,
  UPLOAD_DATE        DATE,
  IS_ACTIVE_VERSION  NUMBER(3)                  DEFAULT 0                     NOT NULL,
  TYPE_              NUMBER(3)                  DEFAULT 0,
  IS_PACKAGE         NUMBER(3)                  DEFAULT 0,
  QUANTITY           NUMBER(10)                 DEFAULT 0,
  CID                NUMBER(10)                 DEFAULT 0,
  CONTENT            VARCHAR2(255 BYTE),
  SCORM_PARAMS       CLOB,
  POINTID            NUMBER(10)                 DEFAULT 0,
  COURSES            VARCHAR2(255 BYTE)         DEFAULT '',
  LMS                VARCHAR2(1 BYTE)           DEFAULT 0,
  PLACE              VARCHAR2(255 BYTE)         DEFAULT '',
  NOT_MODERATED      VARCHAR2(1 BYTE)           DEFAULT 0,
  CONSTRAINT library_pk PRIMARY KEY (BID)
)
;

CREATE TABLE LIST
(
  KOD           VARCHAR2(100 BYTE)              NOT NULL,
  QTYPE         NUMBER(10),
  QDATA         CLOB,
  QTEMA         VARCHAR2(255 BYTE),
  QMODER        NUMBER(5),
  ADATA         CLOB,
  BALMAX        FLOAT(126),
  BALMIN        FLOAT(126),
  URL           CLOB,
  LAST          NUMBER(10),
  TIMELIMIT     NUMBER(10),
  WEIGHT        CLOB,
  IS_SHUFFLED   NUMBER(10),
  CREATED_BY    NUMBER(10)                      DEFAULT 0,
  PREPEND_TEST  VARCHAR2(255 BYTE),
  IS_POLL       NUMBER(5)                       DEFAULT 0,
  TIMETOANSWER  NUMBER(10)                      DEFAULT 0,
  ORDR          NUMBER(10)                      DEFAULT 10,
  NAME          VARCHAR2(255 BYTE),
  CONSTRAINT list_pk PRIMARY KEY (KOD)
)
;

CREATE TABLE LIST_FILES
(
  FILE_ID  INT NOT NULL,
  KOD VARCHAR2(255) NOT NULL,
  CONSTRAINT list_files_pk PRIMARY KEY (KOD, FILE_ID)
);

CREATE TABLE LOGSEANCE
(
  STID      NUMBER(19)                          NOT NULL,
  MID       NUMBER(19)                          NOT NULL,
  CID       NUMBER(19)                          NOT NULL,
  TID       NUMBER(19),
  KOD       VARCHAR2(255 BYTE)                  NOT NULL,
  NUMBER_   NUMBER(10)                          NOT NULL,
  BAL       FLOAT(24)                           NOT NULL,
  BALMAX    FLOAT(24)                           NOT NULL,
  BALMIN    FLOAT(24)                           NOT NULL,
  GOOD      FLOAT(24)                           NOT NULL,
  VOPROS    CLOB                                NOT NULL,
  OTVET     CLOB                                NOT NULL,
  ATTACH    BLOB,
  FILENAME  VARCHAR2(255 BYTE),
  TEXT      CLOB,
  SHEID     NUMBER(10)                          DEFAULT 0,
  COMMENTS  CLOB,
  REVIEW    BLOB,
  REVIEW_FILENAME       VARCHAR2(255 BYTE),
  TIME      NUMBER(10)                          DEFAULT 0                     NOT NULL,
  QTEMA         VARCHAR2(255 BYTE),
  CONSTRAINT logseance_pk PRIMARY KEY (STID,KOD)
)
;


CREATE TABLE LOGUSER
(
  STID         NUMBER(10)                       NOT NULL,
  MID          NUMBER(10)                       NOT NULL,
  CID          NUMBER(10)                       NOT NULL,
  TID          NUMBER(10)                       NOT NULL,
  BALMAX       FLOAT(24),
  BALMIN       FLOAT(24),
  BALMAX2      FLOAT(24)                        NOT NULL,
  BALMIN2      FLOAT(24)                        NOT NULL,
  BAL          FLOAT(24)                        NOT NULL,
  QUESTDONE    NUMBER(10),
  QUESTALL     NUMBER(10),
  QTY          NUMBER(5)                        NOT NULL,
  FREE         NUMBER(5)                        NOT NULL,
  SKIP_        NUMBER(5)                        NOT NULL,
  START_       NUMBER(19)                       NOT NULL,
  STOP_        NUMBER(19)                       NOT NULL,
  FULLTIME     NUMBER(19)                       NOT NULL,
  MODER        NUMBER(5)                        NOT NULL,
  NEEDMODER    NUMBER(5)                        NOT NULL,
  STATUS       NUMBER(5)                        NOT NULL,
  MODERBY      NUMBER(10),
  MODERTIME    NUMBER(19),
  TEACHERTEST  NUMBER(5)                        NOT NULL,
  LOG          CLOB                             NOT NULL,
  SHEID        NUMBER(10)                       DEFAULT 0,
  CONSTRAINT loguser_pk PRIMARY KEY (STID)
)
;


CREATE TABLE MANAGERS
(
  ID   NUMBER(10),
  MID  NUMBER(10)                               DEFAULT 0,
  CONSTRAINT managers_pk PRIMARY KEY (ID)
)
;


CREATE TABLE METHODOLOGIST
(
  MID  NUMBER(10)                               DEFAULT 0,
  CID  NUMBER(10)                               DEFAULT 0,
  CONSTRAINT methododologist_pk PRIMARY KEY (MID,CID)
)
;


CREATE TABLE NOTICE
(
  ID       NUMBER(10)                           NOT NULL,
  EVENT    VARCHAR2(255 BYTE),
  RECEIVER NUMBER(10),
  TITLE    VARCHAR2(255 BYTE),
  MESSAGE  CLOB                                NOT NULL,
  TYPE_    NUMBER(10),
  ENABLED    NUMBER(10) DEFAULT 0                     NOT NULL,
  CONSTRAINT notice_pk PRIMARY KEY (ID)
)
;


CREATE TABLE NEWS
(
  ID       NUMBER(10)                           NOT NULL,
  CREATED    DATE,
  AUTHOR   VARCHAR2(255 BYTE),
  ANNOUNCE  CLOB                                NOT NULL,
  MESSAGE  CLOB                                 NOT NULL,
  CREATED_BY NUMBER(10)                         NOT NULL,
  SUBJECT_NAME VARCHAR(255 BYTE),
  SUBJECT_ID NUMBER(10),
  CONSTRAINT news_pk PRIMARY KEY (ID)
)
;


CREATE TABLE NEWS2
(
  NID          NUMBER(10)                       NOT NULL,
  DATE_        DATE,
  TITLE        VARCHAR2(255 BYTE)               NOT NULL,
  AUTHOR       VARCHAR2(50 BYTE),
  MESSAGE      CLOB                             NOT NULL,
  LANG         VARCHAR2(3 BYTE),
  RESOURCE_ID  NUMBER(10)                       DEFAULT 0,
  SHOW         NUMBER(10)                       NOT NULL,
  STANDALONE   NUMBER(10)                       DEFAULT 0                     NOT NULL,
  APPLICATION  NUMBER(5)                        DEFAULT 0,
  SOID         VARCHAR2(16 BYTE),
  TYPE_        NUMBER(5)                        DEFAULT 0,
  CONSTRAINT news2_pk PRIMARY KEY (NID)
)
;

CREATE TABLE OAUTH_APPS
(
  APP_ID       NUMBER(10)                       NOT NULL,
  TITLE        VARCHAR2(255 BYTE)               NOT NULL,
  DESCRIPTION  CLOB                             NOT NULL,  
  CREATED      DATE,
  CREATED_BY   NUMBER(10)                       DEFAULT 0 NOT NULL,
  CALLBACK_URL VARCHAR2(255 BYTE)               NOT NULL,
  API_KEY      VARCHAR2(255 BYTE)               NOT NULL,
  CONSUMER_KEY VARCHAR2(255 BYTE)               NOT NULL,
  CONSUMER_SECRET VARCHAR2(255 BYTE)               NOT NULL,
  CONSTRAINT oauth_apps_pk PRIMARY KEY (APP_ID)
)
;

CREATE TABLE OAUTH_TOKENS
(
  TOKEN_ID     NUMBER(10)                       NOT NULL,
  APP_ID       NUMBER(10)                       NOT NULL,
  TOKEN        VARCHAR2(255 BYTE)               NOT NULL,
  TOKEN_SECRET VARCHAR2(255 BYTE)               NOT NULL,
  STATE        NUMBER(5)                       NOT NULL,
  VERIFY       VARCHAR2(255 BYTE)               NOT NULL,
  USER_ID      NUMBER(10)                       NOT NULL,
  CONSTRAINT oauth_tokens_pk PRIMARY KEY (TOKEN_ID)
)
;

CREATE TABLE OAUTH_NONCES
(
  NONCE_ID     NUMBER(10)                       NOT NULL,
  APP_ID       NUMBER(10)                       NOT NULL,
  TS           DATE,
  NONCE        VARCHAR2(255 BYTE)               NOT NULL,
  CONSTRAINT oauth_nonces_pk PRIMARY KEY (NONCE_ID)
)
;

CREATE TABLE OFFLINES
(
  ID     			NUMBER(10)             NOT NULL,
  SUBJECT_ID        NUMBER(10)             NOT NULL,
  CREATED           DATE,
  TITLE		        VARCHAR2(255 BYTE)     NOT NULL,
  CONSTRAINT offlines_pk PRIMARY KEY (ID)
)
;

CREATE TABLE OPTIONS
(
  OPTIONID  NUMBER(5)                           NOT NULL,
  NAME      VARCHAR2(255 BYTE)                  NOT NULL,
  VALUE     CLOB,
  CONSTRAINT options_pk PRIMARY KEY (OPTIONID)
)
;

CREATE TABLE ORGANIZATIONS
(
  OID       NUMBER(19)                          NOT NULL,
  TITLE     VARCHAR2(255 BYTE),
  CID       NUMBER(10),
  ROOT_REF  NUMBER(10),
  LEVEL_    NUMBER(10),
  NEXT_REF  NUMBER(10),
  PREV_REF  NUMBER(10),
  MOD_REF   NUMBER(10),
  STATUS    NUMBER(10),
  VOL1      NUMBER(10),
  VOL2      NUMBER(10),
  METADATA  CLOB,
  MODULE    NUMBER(10)                          DEFAULT 0,
  CONSTRAINT orgs_pk PRIMARY KEY (OID)
)
;

CREATE TABLE PASSWORD_HISTORY
(
  USER_ID      NUMBER(10)                          DEFAULT 0,
  PASSWORD     VARCHAR2(255 CHAR),
  CHANGE_DATE  DATE
);


CREATE TABLE PEOPLE
(
  MID             NUMBER(10)                    NOT NULL,
  LASTNAME        VARCHAR2(255 BYTE),
  FIRSTNAME       VARCHAR2(255 BYTE),
  LASTNAMELAT     VARCHAR2(255 BYTE),
  FIRSTNAMELAT    VARCHAR2(255 BYTE),
  REGISTERED      DATE,
  COURSE          NUMBER(10)                    DEFAULT 1,
  EMAIL           VARCHAR2(255 BYTE),
  EMAIL_CONFIRMED NUMBER(5)                     DEFAULT 0,
  PHONE           VARCHAR2(255 BYTE),
  INFORMATION     CLOB,
  PATRONYMIC      VARCHAR2(255 BYTE),
  ADDRESS         CLOB,
  FAX             VARCHAR2(255 BYTE),
  PASSWORD        VARCHAR2(255 BYTE),
  JAVAPASSWORD    VARCHAR2(20 BYTE),
  LOGIN           VARCHAR2(255 BYTE)            NOT NULL,
  BIRTHDATE       DATE,
  CELLULARNUMBER  VARCHAR2(255 BYTE),
  ICQNUMBER       NUMBER(10),
  GENDER          NUMBER(5),
  LAST            NUMBER(19),
  COUNTLOGIN      NUMBER(10),
  RNID            NUMBER(5),
  POSITION        CHAR(2 BYTE),
  POSITIONDATE    DATE,
  POSITIONPREV    VARCHAR2(128 BYTE),
  INVALID_LOGIN   NUMBER(19)                    DEFAULT NULL,
  MID_EXTERNAL    VARCHAR2(255 BYTE),
  ISAD            NUMBER(10)                    DEFAULT 0,
  POLLS           BLOB,
  ACCESS_LEVEL    NUMBER(10)                    DEFAULT 5,
  RANG            NUMBER(10)                    DEFAULT 0,
  PREFERRED_LANG  NUMBER(5)                     DEFAULT 0,
  BLOCKED         NUMBER(5)                     DEFAULT 0,
  BLOCK_MESSAGE   CLOB,
  HEAD_MID        NUMBER(10)					DEFAULT 0,
  FORCE_PASSWORD  NUMBER(10)                    DEFAULT 0,
  LANG            VARCHAR2(3 BYTE) DEFAULT 'rus' NOT NULL,
  NEED_EDIT       NUMBER(5)                     DEFAULT 0,
  DUBLICATE       NUMBER(11)                    DEFAULT 0,
  CONSTRAINT people_pk PRIMARY KEY (MID)
)
;



CREATE TABLE STATE_OF_PROCESS 
(
  STATE_OF_PROCESS_ID NUMBER(10) NOT NULL ,
  ITEM_ID NUMBER(10) NOT NULL,
  PROCESS_ID NUMBER(10) default NULL,
  PROCESS_TYPE NUMBER(10) DEFAULT 0 NOT NULL,
  CURRENT_STATE VARCHAR2(255 CHAR) default NULL,
  STATUS NUMBER(10) default NULL,
  PARAMS CLOB
)
;

CREATE TABLE PROCESSES 
(
  PROCESS_ID NUMBER(10) NOT NULL ,
  NAME VARCHAR2(255 CHAR) default NULL,
  CHAIN CLOB,
  TYPE_ NUMBER(10) default NULL
)
;


CREATE TABLE PROGRAMM 
(
  PROGRAMM_ID NUMBER(10) NOT NULL ,
  PROGRAMM_TYPE NUMBER(10) default NULL,
  NAME VARCHAR2(255 CHAR) default NULL,
  CONSTRAINT programm_pk PRIMARY KEY (PROGRAMM_ID)
)
;

CREATE TABLE PROGRAMM_EVENTS 
(
  PROGRAMM_EVENT_ID NUMBER(10) NOT NULL ,
  PROGRAMM_ID NUMBER(10) default NULL,
  NAME VARCHAR2(255 CHAR) default NULL,
  TYPE_ NUMBER(10) default NULL,
  ITEM_ID NUMBER(10) default NULL,
  CONSTRAINT programm_event_pk PRIMARY KEY (PROGRAMM_EVENT_ID)
)
;


CREATE TABLE PROGRAMM_EVENTS_USERS 
(
  PROGRAMM_EVENT_ID NUMBER(10) NOT NULL ,
  USER_ID NUMBER(10) NOT NULL ,
  BEGIN_DATE      DATE,
  END_DATE      DATE,
  STATUS NUMBER(10) default NULL
)
;

CREATE TABLE PROGRAMM_USERS 
(
  PROGRAMM_ID NUMBER(10) NOT NULL ,
  USER_ID NUMBER(10) NOT NULL ,
  ASSIGN_DATE      DATE
)
;


CREATE TABLE PERIODS
(
  LID          NUMBER(19)                       NOT NULL,
  STARTTIME    NUMBER(10)                       DEFAULT 540,
  STOPTIME     NUMBER(10)                       DEFAULT 630,
  NAME         VARCHAR2(255 BYTE),
  COUNT_HOURS  NUMBER(10)                       DEFAULT 2,
  CONSTRAINT periods_pk PRIMARY KEY (LID)
)
;


CREATE TABLE PERMISSION_GROUPS
(
  PMID         NUMBER(19)                       NOT NULL,
  NAME         VARCHAR2(64 BYTE),
  DEFAULT_     VARCHAR2(1 BYTE)                 DEFAULT 0,
  TYPE_        VARCHAR2(255 BYTE),
  RANG         NUMBER(10)                       DEFAULT 0,
  APPLICATION  NUMBER(5)                        DEFAULT 0,
  CONSTRAINT pg_pk PRIMARY KEY (PMID)
)
;


CREATE TABLE PERMISSION2ACT
(
  PMID   NUMBER(19)                             NOT NULL,
  ACID   VARCHAR2(16 BYTE)                      NOT NULL,
  TYPE_  VARCHAR2(255 BYTE)                     NOT NULL,
  CONSTRAINT p2a_pk PRIMARY KEY (PMID,ACID,TYPE_)
)
;


CREATE TABLE PERMISSION2MID
(
  PMID  NUMBER(19)                              NOT NULL,
  MID   NUMBER(19)
)
;


CREATE TABLE PLAN_TABLE
(
  STATEMENT_ID     VARCHAR2(30 BYTE),
  TIMESTAMP        DATE,
  REMARKS          VARCHAR2(80 BYTE),
  OPERATION        VARCHAR2(30 BYTE),
  OPTIONS          VARCHAR2(255 BYTE),
  OBJECT_NODE      VARCHAR2(128 BYTE),
  OBJECT_OWNER     VARCHAR2(30 BYTE),
  OBJECT_NAME      VARCHAR2(30 BYTE),
  OBJECT_INSTANCE  NUMBER(22),
  OBJECT_TYPE      VARCHAR2(30 BYTE),
  OPTIMIZER        VARCHAR2(255 BYTE),
  SEARCH_COLUMNS   NUMBER(22),
  ID               NUMBER(22),
  PARENT_ID        NUMBER(22),
  POSITION         NUMBER(22),
  COST             NUMBER(22),
  CARDINALITY      NUMBER(22),
  BYTES            NUMBER(22),
  OTHER_TAG        VARCHAR2(255 BYTE),
  PARTITION_START  VARCHAR2(255 BYTE),
  PARTITION_STOP   VARCHAR2(255 BYTE),
  PARTITION_ID     NUMBER(22),
  OTHER            LONG,
  DISTRIBUTION     VARCHAR2(30 BYTE),
  CPU_COST         NUMBER(22),
  IO_COST          NUMBER(22),
  TEMP_SPACE       NUMBER(22),
  CONSTRAINT pt_pk PRIMARY KEY (STATEMENT_ID)
)
;


CREATE TABLE PPT2SWF
(
  STATUS NUMBER(10),
  PROCESS NUMBER(10),
  SUCCESS_DATE DATE,
  POOL_ID NUMBER(10),
  URL VARCHAR2(500 CHAR),
  WEBINAR_ID NUMBER(10)
)
;


CREATE TABLE PROVIDERS
(
  ID           NUMBER(10),
  TITLE        VARCHAR2(255 BYTE)               DEFAULT '',
  ADDRESS      CLOB                             DEFAULT '',
  CONTACTS     CLOB                             DEFAULT '',
  DESCRIPTION  CLOB                             DEFAULT '',
  CONSTRAINT PROVIDERS_pk PRIMARY KEY (ID)
)
;

CREATE TABLE SUPPLIERS
(
  SUPPLIER_ID           NUMBER(10),
  TITLE        VARCHAR2(255 BYTE)               DEFAULT '',
  ADDRESS      CLOB                             DEFAULT '',
  CONTACTS     CLOB                             DEFAULT '',
  DESCRIPTION  CLOB                             DEFAULT '',
  CONSTRAINT SUPPLIERS_pk PRIMARY KEY (SUPPLIER_ID)
)
;

CREATE TABLE QUIZZES
(
  QUIZ_ID INT NOT NULL,
  TITLE VARCHAR2(255),
  STATUS INT DEFAULT 0 NOT NULL,
  DESCRIPTION CLOB,
  CREATED DATE NOT NULL,
  UPDATED DATE NOT NULL,
  CREATED_BY INT DEFAULT 0 NOT NULL,
  QUESTIONS INT DEFAULT 0 NOT NULL,
  DATA_ CLOB,
  SUBJECT_ID INT DEFAULT 0 NOT NULL,
  LOCATION INT DEFAULT 0,
  CONSTRAINT quizzes_pk PRIMARY KEY (QUIZ_ID)
)
;

CREATE TABLE QUIZZES_FEEDBACK
(    
  USER_ID INT NOT NULL,
  SUBJECT_ID INT NOT NULL,
  LESSON_ID INT NOT NULL,
  STATUS INT NOT NULL,
  BEGIN_ DATE,
  END_ DATE,
  PLACE VARCHAR2(255),
  TITLE VARCHAR2(255),
  SUBJECT_NAME VARCHAR2(255),
  TRAINER VARCHAR2(255),
  TRAINER_ID INT,
  CREATED DATE,
  CONSTRAINT quizzes_feedback_pk PRIMARY KEY (USER_ID, SUBJECT_ID, LESSON_ID)
)
;

CREATE TABLE QUIZZES_ANSWERS
(
  QUIZ_ID INT NOT NULL,
  QUESTION_ID VARCHAR2(255),
  ANSWER_ID INT NOT NULL,
  QUESTION_TITLE VARCHAR2(255) DEFAULT '',
  THEME VARCHAR2(255) DEFAULT '',
  ANSWER_TITLE VARCHAR2(255) DEFAULT '',
  CONSTRAINT quizzes_answers_pk PRIMARY KEY (QUIZ_ID, QUESTION_ID, ANSWER_ID)
)
;

CREATE TABLE QUIZZES_RESULTS
(
  USER_ID INT NULL,
  LESSON_ID INT NULL,
  QUESTION_ID VARCHAR2(255),
  ANSWER_ID INT NOT NULL,
  QUIZ_ID INT NOT NULL,
  SUBJECT_ID INT NULL,
  FREEANSWER_DATA CLOB,
  JUNIOR_ID INT  DEFAULT 0 NOT NULL
)
;

CREATE TABLE REPORTS
(
  REPORT_ID          NUMBER(19)                       NOT NULL,
  DOMAIN  VARCHAR2(255 BYTE),
  NAME    VARCHAR2(255 BYTE),
  FIELDS  CLOB,
  CREATED DATE,
  CREATED_BY NUMBER(10) DEFAULT 0 NOT NULL,
  STATUS   NUMBER(5)                            DEFAULT 0 NOT NULL,
  CONSTRAINT reports_pk PRIMARY KEY (REPORT_ID)
)
;


CREATE TABLE ROOMS
(
  RID          NUMBER(19)                       NOT NULL,
  NAME         VARCHAR2(255 BYTE),
  VOLUME       NUMBER(10),
  STATUS       NUMBER(10),
  TYPE_        NUMBER(10),
  DESCRIPTION  CLOB,
  CONSTRAINT rooms_pk PRIMARY KEY (RID)
)
;


CREATE TABLE ROOMS2COURSE
(
  RID  NUMBER(10),
  CID  NUMBER(10)
)
;


CREATE TABLE SCHEDULE
(
  SHEID           NUMBER(10)                    NOT NULL,
  TITLE           VARCHAR2(255 BYTE)            NOT NULL,
  URL             CLOB,
  DESCRIPT        CLOB,
  BEGIN_          DATE,
  END_            DATE,
  CREATEID        NUMBER(10)                    NOT NULL,
  CREATEDATE      DATE,  
  TYPEID          NUMBER(10)                    NOT NULL,
  VEDOMOST        NUMBER(10),
  CID             NUMBER(10)                    NOT NULL,
  CHID            NUMBER(10),
  STARTDAY        NUMBER(10),
  STOPDAY         NUMBER(10),
  TIMETYPE        NUMBER(10),
  ISGROUP         VARCHAR2(1 BYTE),
  COND_SHEID      NUMBER(10),
  COND_MARK       VARCHAR2(255 BYTE),
  PERIOD          VARCHAR2(255 BYTE),
  RID             NUMBER(10),
  COND_PROGRESS   VARCHAR2(255 BYTE)            DEFAULT 0,
  COND_AVGBAL     VARCHAR2(255 BYTE)            DEFAULT 0,
  COND_SUMBAL     VARCHAR2(255 BYTE)            DEFAULT 0,
  COND_OPERATION  NUMBER(3)                     DEFAULT 0,
  TEACHER         NUMBER(10)                    DEFAULT 0,
  MODERATOR       NUMBER(10)                    DEFAULT 0,
  GID             NUMBER(10)                    DEFAULT -1,
  PERM            NUMBER(10)                    DEFAULT 0,
  PUB             NUMBER(5)                     DEFAULT 0,
  SHAREPOINTID    NUMBER(10)                    DEFAULT 0,
  CONNECTID       VARCHAR2(255 BYTE),
  PARAMS          CLOB,
  ALL_            NUMBER(5)                     DEFAULT 0,
  RECOMMEND       NUMBER(5)                     DEFAULT 0,
  NOTICE          NUMBER(3)                     DEFAULT 0,
  NOTICE_DAYS     NUMBER(10)                    DEFAULT 0,
  ACTIVITIES      CLOB,
  ORDER_          NUMBER(5)                         DEFAULT 0,
  TOOL            VARCHAR2(255 BYTE),
  ISFREE          NUMBER(10)                    NOT NULL,  
  SECTION_ID 	  INT NULL,
  CONSTRAINT schedule_pk PRIMARY KEY (SHEID)
)
;


CREATE TABLE SCHEDULEID
(
  SSID           NUMBER(10)                     NOT NULL,
  SHEID          NUMBER(10)                     NOT NULL,
  MID            NUMBER(10)                     NOT NULL,
  BEGINRELATIVE  DATE,
  ENDRELATIVE    DATE,  
  GID            NUMBER(10),
  ISGROUP        VARCHAR2(1 BYTE),
  V_STATUS       NUMBER(10)                     DEFAULT -1,
  V_DONE         NUMBER(10)                     DEFAULT 0                     NOT NULL,
  V_DESCRIPTION  VARCHAR2(255 BYTE),
  DESCR          CLOB,
  SMSREMIND      NUMBER(5),
  ICQREMIND      NUMBER(5),
  EMAILREMIND    NUMBER(5),
  ISTUDREMIND    NUMBER(5),
  TEST_CORR      NUMBER(10),
  TEST_WRONG     NUMBER(10),
  TEST_DATE      DATE,
  TEST_ANSWERS   CLOB,
  TEST_TRIES     NUMBER(5),
  TOOLPARAMS     CLOB,
  COMMENTS       CLOB,
  CHIEF          NUMBER(5)                      DEFAULT 0                     NOT NULL,
  CREATED      DATE,
  UPDATED      DATE,
  LAUNCHED       DATE,
  CONSTRAINT si_pk PRIMARY KEY (SSID)
)
;

CREATE TABLE SCHEDULE_MARKS_HISTORY  
( 
  MID    	NUMBER(10) NOT NULL,
  SSID  	NUMBER(10) NOT NULL,
  MARK   	NUMBER(10) DEFAULT 0 NOT NULL,
  UPDATED	DATE
)
;


CREATE TABLE SCORM_TRACKLOG
(
  TRACKID    NUMBER(10)                         NOT NULL,
  MID        NUMBER(10)                         DEFAULT 0                     NOT NULL,
  CID        NUMBER(10)                         DEFAULT 0                     NOT NULL,
  MODID      NUMBER(10)                         DEFAULT 0                     NOT NULL,
  MCID       NUMBER(10)                         DEFAULT 0                     NOT NULL,
  LESSON_ID       NUMBER(10)                         DEFAULT 0                     NOT NULL,
  TRACKDATA  CLOB                               NOT NULL,
  STOP_      DATE                               NOT NULL,
  START_     DATE                               NOT NULL,
  SCORE      FLOAT(24)                          DEFAULT 0                     NOT NULL,
  SCOREMAX   FLOAT(24)                          DEFAULT 0                     NOT NULL,
  SCOREMIN   FLOAT(24)                          DEFAULT 0                     NOT NULL,
  STATUS     VARCHAR2(15 BYTE)                  DEFAULT ''                    ,
  CONSTRAINT st_pk PRIMARY KEY (TRACKID)
)
;

CREATE TABLE SCORM_REPORT
(
  REPORT_ID  NUMBER(10)                         NOT NULL,
  MID        NUMBER(10)                         DEFAULT 0                     NOT NULL,
  CID        NUMBER(10)                         DEFAULT 0                     NOT NULL,
  LESSON_ID       NUMBER(10)                         DEFAULT 0                     NOT NULL,
  REPORT_DATA	  CLOB                               NOT NULL,
  UPDATED	      DATE                               NOT NULL,
  CONSTRAINT sr_pk PRIMARY KEY (REPORT_ID)
)
;


CREATE TABLE SEANCE
(
  STID             NUMBER(10)                   NOT NULL,
  MID              NUMBER(10)                   NOT NULL,
  CID              NUMBER(10)                   NOT NULL,
  TID              NUMBER(10)                   NOT NULL,
  KOD              VARCHAR2(255 BYTE)           NOT NULL,
  ATTACH           BLOB,
  FILENAME         VARCHAR2(255 BYTE),
  TEXT             CLOB,
  TIME             DATE,
  BAL              FLOAT(24),
  LASTBAL          FLOAT(12),
  COMMENTS         CLOB,
  REVIEW           BLOB,
  REVIEW_FILENAME  VARCHAR2(255 BYTE),
  CONSTRAINT seance_pk PRIMARY KEY (STID, KOD)
)
;


CREATE TABLE SEQUENCE_CURRENT
(
  MID       NUMBER(10)                          DEFAULT 0,
  CID       NUMBER(10)                          DEFAULT 0,
  CURRENT_  VARCHAR2(255 BYTE)                  DEFAULT '',
  SUBJECT_ID  INTEGER               DEFAULT 0,
  LESSON_ID  INTEGER               DEFAULT 0,
  CONSTRAINT seqcurr_pk PRIMARY KEY (MID, CID, SUBJECT_ID, LESSON_ID)
)
;


CREATE TABLE SEQUENCE_HISTORY
(
  ID    NUMBER(10),
  MID    NUMBER(10),
  CID    NUMBER(10),
  ITEM   VARCHAR2(255 BYTE)                     DEFAULT '',
  DATE_  DATE,
  SUBJECT_ID  INTEGER               DEFAULT 0,
  LESSON_ID  INTEGER               DEFAULT 0,
  CONSTRAINT sh_pk PRIMARY KEY (ID)
)
;


CREATE TABLE SESSIONS
(
  SESSID   NUMBER(10)                           NOT NULL,
  SESSKEY  VARCHAR2(32 BYTE)                    DEFAULT '',
  MID      NUMBER(10)                           DEFAULT 0                     NOT NULL,
  START_   DATE,
  STOP_    DATE,
  IP       VARCHAR2(16 BYTE)                    DEFAULT ''                    NOT NULL,
  LOGOUT   NUMBER(3)                            DEFAULT 0                     NOT NULL,
  BROWSER_NAME            VARCHAR2(64 BYTE),
  BROWSER_VERSION         VARCHAR2(64 BYTE),
  FLASH_VERSION           VARCHAR2(64 BYTE),
  OS                      VARCHAR2(64 BYTE),
  SCREEN                  VARCHAR2(64 BYTE),
  COOKIE                  SMALLINT,
  JS                      SMALLINT,
  JAVA_VERSION            VARCHAR2(64 BYTE),
  SILVERLIGHT_VERSION     VARCHAR2(64 BYTE),
  ACROBAT_READER_VERSION  VARCHAR2(64 BYTE),
  MSXML_VERSION           VARCHAR2(64 BYTE),
  CONSTRAINT sessions_pk PRIMARY KEY (SESSID)
)
;

CREATE TABLE SESSION_GUEST
(
  SESSION_GUEST_ID NUMBER(10),
  START_ DATE,
  STOP_ DATE,
  CONSTRAINT SESSION_GUEST_PK
  PRIMARY KEY (
    SESSION_GUEST_ID
  )
)
;

CREATE TABLE STRUCTURE_OF_ORGAN
(
  SOID             NUMBER(10)                   NOT NULL,
  NAME             VARCHAR2(4000 BYTE),
  MID              NUMBER(10),
  INFO             VARCHAR2(4000 BYTE),
  OWNER_SOID       NUMBER(10),
  SOID_EXTERNAL    VARCHAR2(255 BYTE),
  CODE             VARCHAR2(16 BYTE),
  AGREEM           NUMBER(3)                    DEFAULT 0,
  TYPE_            NUMBER(3)                    DEFAULT 0,
  OWN_RESULTS      NUMBER(5)                    DEFAULT 1,
  ENEMY_RESULTS    NUMBER(5)                    DEFAULT 1,
  DISPLAY_RESULTS  NUMBER(5)                    DEFAULT 0,
  THRESHOLD        NUMBER(5)                    DEFAULT 0,
  SPECIALIZATION   NUMBER(10)                   DEFAULT 0,
  CLAIMANT         NUMBER(5)                    DEFAULT 0,
  LFT              NUMBER(5)                    DEFAULT 0,
  LEVEL_           NUMBER(5)                    DEFAULT 0,
  RGT              NUMBER(5)                    DEFAULT 0,
  IS_MANAGER       NUMBER(5)                    DEFAULT 0,
  BLOCKED          NUMBER(5)                    DEFAULT 0,
  CONSTRAINT so_pk PRIMARY KEY (SOID)
)
;


CREATE TABLE STUDENTS
(
  SID                  NUMBER(10)               NOT NULL,
  MID                  NUMBER(10)               NOT NULL,
  CID                  NUMBER(10)               NOT NULL,
  CGID                 NUMBER(10),
  REGISTERED           NUMBER(10),
  TIME_REGISTERED      DATE,
  OFFLINE_COURSE_PATH  VARCHAR2(255 BYTE)       DEFAULT '',
  TIME_ENDED           DATE,
  TIME_ENDED_PLANNED   DATE,
  COMMENT              VARCHAR2(255)                     NOT NULL DEFAULT '',
  CONSTRAINT students_pk PRIMARY KEY (SID)
)
;

CREATE TABLE SUPERVISORS
(
  USER_ID NUMBER(10)                               NOT NULL,
  CONSTRAINT supervisors_pk PRIMARY KEY (USER_ID)
)
;

CREATE TABLE EMPLOYEE
(
  USER_ID NUMBER(10)                               NOT NULL,
  CONSTRAINT employee_pk PRIMARY KEY (USER_ID)
)
;



CREATE TABLE SUBSCRIPTIONS  ( 
    SUBSCRIPTION_ID NUMBER(10) NOT NULL,
    USER_ID         NUMBER(10) DEFAULT 0 NOT NULL,
    CHANNEL_ID      NUMBER(10) DEFAULT 0 NOT NULL,
    CONSTRAINT SUBSCR_PK PRIMARY KEY(SUBSCRIPTION_ID)

)
;

CREATE TABLE SUBSCRIPTION_CHANNELS  ( 
    CHANNEL_ID    NUMBER(10) NOT NULL,
    ACTIVITY_NAME VARCHAR2(45) NOT NULL,
    SUBJECT_NAME  VARCHAR2(45) NULL,
    SUBJECT_ID    NUMBER(10) DEFAULT 0 NOT NULL,
    LESSON_ID     NUMBER(10) DEFAULT 0 NOT NULL,
    TITLE         VARCHAR2(255) NULL,
    DESCRIPTION   CLOB NULL,
    LINK          VARCHAR2(255) NULL,
    CONSTRAINT SUBSCR_CHANN PRIMARY KEY(CHANNEL_ID)
)
;

CREATE TABLE SUBSCRIPTION_ENTRIES  ( 
    ENTRY_ID    NUMBER(10) NOT NULL,
    CHANNEL_ID  NUMBER(10) DEFAULT 0 NOT NULL,
    TITLE       VARCHAR2(255) NULL,
    LINK        VARCHAR2(255) NULL,
    DESCRIPTION CLOB NULL,
    CONTENT     CLOB NULL,
    AUTHOR      NUMBER(10) DEFAULT 0 NOT NULL,
    CONSTRAINT SUBSCR_ENT PRIMARY KEY(ENTRY_ID)
)
;

CREATE TABLE TEACHERS
(
  PID  NUMBER(10)                               NOT NULL,
  MID  NUMBER(10)                               NOT NULL,
  CID  NUMBER(10)                               NOT NULL,
  CONSTRAINT teachers_pk PRIMARY KEY (PID)
)
;


CREATE TABLE TEST
(
  TID             NUMBER(10)                    NOT NULL,
  CID             NUMBER(10)                    DEFAULT 0   NOT NULL,
  CIDOWNER        NUMBER(10)                    DEFAULT 0   NOT NULL,
  TITLE           VARCHAR2(255 BYTE)            NOT NULL,
  DATATYPE        NUMBER(10)                    NOT NULL,
  DATA_           CLOB,
  RANDOM_         NUMBER(5)                     DEFAULT 0   NOT NULL,
  LIM             NUMBER(10)                    DEFAULT 0   NOT NULL,
  QTY             NUMBER(5)                     DEFAULT 1   NOT NULL,
  SORT_           NUMBER(5)                     DEFAULT 0   NOT NULL,
  FREE            NUMBER(5)                     DEFAULT 0   NOT NULL,
  SKIP_           NUMBER(5)                     DEFAULT 0   NOT NULL,
  RATING          NUMBER(5)                     DEFAULT 0   NOT NULL,
  STATUS          NUMBER(5)                     NOT NULL,
  QUESTRES        NUMBER(5),
  ENDRES          NUMBER(5),
  SHOWURL         NUMBER(5),
  SHOWOTVET       NUMBER(5),
  TIMELIMIT       NUMBER(5),
  STARTLIMIT      NUMBER(10),
  LIMITCLEAN      NUMBER(10),
  LAST            NUMBER(10)                    DEFAULT 0   NOT NULL,
  LASTMID         NUMBER(10),
  CACHE_QTY       NUMBER(10),
  RANDOM_VARS     CLOB,
  ALLOW_VIEW_LOG  VARCHAR2(1 BYTE)              DEFAULT 1,
  CREATED_BY      NUMBER(10)                    DEFAULT 0,
  COMMENTS        CLOB,
  MODE_           NUMBER(5)                     DEFAULT 0                     NOT NULL,
  IS_POLL         NUMBER(5)                     DEFAULT 0,
  POLL_MID        NUMBER(10)                    DEFAULT 0,
  TEST_ID         NUMBER(10)                    DEFAULT 0,
  LESSON_ID       NUMBER(10)                    DEFAULT 0,
  TYPE_           NUMBER(10)                    DEFAULT 0 NOT NULL,
  THRESHOLD       NUMBER(10)                    DEFAULT 75 NOT NULL,
  ADAPTIVE        NUMBER(10)                    DEFAULT 0 NOT NULL,
  CONSTRAINT tests_pk PRIMARY KEY (TID)
)
;

CREATE TABLE TEST_ABSTRACT
(
  TEST_ID INT NOT NULL,
  TITLE VARCHAR2(255),
  STATUS INT DEFAULT 0 NOT NULL,
  DESCRIPTION CLOB,
  KEYWORDS CLOB,
  CREATED DATE NOT NULL,
  UPDATED DATE NOT NULL,
  CREATED_BY INT DEFAULT 0 NOT NULL,
  QUESTIONS INT DEFAULT 0 NOT NULL,
  DATA_ CLOB,
  SUBJECT_ID INT DEFAULT 0 NOT NULL,
  LOCATION INT DEFAULT 0 NOT NULL,
  CONSTRAINT test_abstract_pk PRIMARY KEY (TEST_ID)
)
;

CREATE TABLE TEST_FEEDBACK (
  TEST_FEEDBACK_ID NUMBER(10) NOT NULL,
  TITLE VARCHAR2(255),
  TYPE_ NUMBER(10),
  TEXT CLOB,
  PARENT NUMBER(10),
  TRESHOLD_MIN NUMBER(10),
  TRESHOLD_MAX NUMBER(10),
  TEST_ID NUMBER(10),
  QUESTION_ID VARCHAR2(255),
  ANSWER_ID VARCHAR2(255),
  SHOW_EVENT NUMBER(10),
  SHOW_ON_VALUES CLOB,
  CONSTRAINT tests_feedback_pk PRIMARY KEY (TEST_FEEDBACK_ID)
);

CREATE TABLE TESTS_QUESTIONS
(
  SUBJECT_ID INT NOT NULL,
  TEST_ID INT NOT NULL,
  KOD VARCHAR2(255),
  CONSTRAINT tests_questions_pk PRIMARY KEY (SUBJECT_ID, TEST_ID, KOD)
)
;

CREATE TABLE TASKS
(
  TASK_ID INT NOT NULL,
  TITLE VARCHAR2(255),
  STATUS INT DEFAULT 0 NOT NULL,
  DESCRIPTION CLOB,
  CREATED DATE NOT NULL,
  UPDATED DATE NOT NULL,
  CREATED_BY INT DEFAULT 0 NOT NULL,
  QUESTIONS INT DEFAULT 0 NOT NULL,
  DATA_ CLOB,
  SUBJECT_ID INT DEFAULT 0 NOT NULL,
  LOCATION INT DEFAULT 0 NOT NULL,
  CONSTRAINT TASKS_PK PRIMARY KEY (TASK_ID)
)
;



CREATE TABLE EXERCISES
(
  EXERCISE_ID INT NOT NULL,
  TITLE VARCHAR2(255),
  STATUS INT DEFAULT 0 NOT NULL,
  DESCRIPTION CLOB,
  CREATED DATE NOT NULL,
  UPDATED DATE NOT NULL,
  CREATED_BY INT DEFAULT 0 NOT NULL,
  QUESTIONS INT DEFAULT 0 NOT NULL,
  DATA_ CLOB,
  SUBJECT_ID INT DEFAULT 0 NOT NULL,
  CONSTRAINT exercises_pk PRIMARY KEY (EXERCISE_ID)
)
;

CREATE TABLE TESTCOUNT
(
  MID   NUMBER(10)                              NOT NULL,
  TID   NUMBER(10)                              NOT NULL,
  CID   NUMBER(10)                              NOT NULL,
  QTY   NUMBER(10)                              NOT NULL,
  LAST  NUMBER(19)                              NOT NULL,
  LESSON_ID NUMBER(10)                          NOT NULL,
  CONSTRAINT tcount_pk PRIMARY KEY (MID,TID,CID,LESSON_ID)
)
;


CREATE TABLE UPDATES
(
  UPDATE_ID   NUMBER(10),
  VERSION     VARCHAR2(255 BYTE) DEFAULT '',
  CREATED     DATE,
  CREATED_BY  NUMBER(10),
  UPDATED     DATE,
  ORGANIZATION VARCHAR2(255 BYTE) DEFAULT '',
  DESCRIPTION  CLOB,  
  SERVERS      CLOB,
  CONSTRAINT updates_pk PRIMARY KEY (UPDATE_ID)
)
;


CREATE TABLE USER_LOGIN_LOG
(
  LOGIN       VARCHAR2(500 CHAR),
  DATE_       DATE,
  EVENT_TYPE  NUMBER(10),
  STATUS      NUMBER(10),
  COMMENTS    VARCHAR2(500 CHAR),
  IP          NUMBER(10),
  CONSTRAINT PK_USER_LOGIN_LOG PRIMARY KEY (LOGIN, DATE_)
);



CREATE TABLE VIDEO
(
  ID          NUMBER(10),
  FILENAME    VARCHAR2(255 BYTE),
  CREATED     NUMBER(10),
  TITLE       VARCHAR2(255 BYTE)                DEFAULT '',
  MAIN_VIDEO  NUMBER(5)                         DEFAULT 0,
  CONSTRAINT video_pk PRIMARY KEY (ID)
)
;


CREATE TABLE WEBINAR_CHAT
(
  ID        NUMBER(10),
  POINTID   NUMBER(10)                          DEFAULT 0,
  MESSAGE   VARCHAR2(255 BYTE)                  DEFAULT '',
  DATETIME  DATE,
  USERID    NUMBER(10)                          DEFAULT 0,
  CONSTRAINT wc_pk PRIMARY KEY (ID)
)
;

CREATE TABLE WEBINARS(
  WEBINAR_ID INTEGER,
  NAME VARCHAR2(250 CHAR),
  CREATE_DATE DATE,
  SUBJECT_ID INTEGER,
  CONSTRAINT webinars_pk PRIMARY KEY (WEBINAR_ID)
)
;

CREATE TABLE WEBINAR_FILES
(
  WEBINAR_ID  INTEGER,
  FILE_ID     INTEGER,
  NUM         INTEGER                           DEFAULT 0 NOT NULL
)
;

CREATE TABLE WEBINAR_HISTORY
(
  ID        NUMBER(10),
  POINTID   NUMBER(10)                          DEFAULT 0,
  USERID    NUMBER(10)                          DEFAULT 0,
  ACTION    VARCHAR2(255 BYTE)                  DEFAULT '',
  ITEM      VARCHAR2(255 BYTE)                  DEFAULT '',
  DATETIME  DATE,
  CONSTRAINT wh_pk PRIMARY KEY (ID)
)
;


CREATE TABLE WEBINAR_PLAN
(
  ID       NUMBER(10),
  POINTID  NUMBER(10)                           DEFAULT 0,
  HREF     VARCHAR2(255 BYTE)                   DEFAULT '',
  TITLE    VARCHAR2(255 BYTE)                   DEFAULT '',
  BID      NUMBER(10)                           DEFAULT 0,
  CONSTRAINT wp_pk PRIMARY KEY (ID)
)
;


CREATE TABLE WEBINAR_PLAN_CURRENT
(
  POINTID      NUMBER(10),
  CURRENTITEM  NUMBER(10)                       DEFAULT 0,
  CONSTRAINT wpc_pk PRIMARY KEY (POINTID)
)
;


CREATE TABLE WEBINAR_USERS
(
  POINTID  NUMBER(10),
  USERID   NUMBER(10),
  LAST     DATE,
  CONSTRAINT wu_pk PRIMARY KEY (POINTID,USERID)
)
;

CREATE TABLE RESOURCES
(
  RESOURCE_ID INT NOT NULL,
  RESOURCE_ID_EXTERNAL VARCHAR2(255),
  TITLE VARCHAR2(1024),
  URL VARCHAR2(255),
  VOLUME VARCHAR2(255),
  FILENAME VARCHAR2(255),
  TYPE_ INT DEFAULT 0 NOT NULL,
  FILETYPE INT DEFAULT 0 NOT NULL,
  DESCRIPTION CLOB,
  CONTENT CLOB,
  CREATED DATE NOT NULL,
  UPDATED DATE NOT NULL,
  CREATED_BY INT DEFAULT 0 NOT NULL,
  SERVICES INT DEFAULT 0,
  SUBJECT_ID INT DEFAULT 0,
  STATUS INT DEFAULT 0,
  LOCATION INT DEFAULT 0,
  DB_ID VARCHAR2(255),
  TEST_ID INT NULL,
  ACTIVITY_ID INT NULL,
  ACTIVITY_TYPE INT NULL,
  RELATED_RESOURCES CLOB,
  PARENT_ID INT DEFAULT 0 NOT NULL,
  PARENT_REVISION_ID INT DEFAULT 0 NOT NULL,
  CONSTRAINT resources_pk PRIMARY KEY (RESOURCE_ID)
)
;

CREATE TABLE RESOURCE_REVISIONS
(
  REVISION_ID INT NOT NULL,
  RESOURCE_ID INT NOT NULL,
  URL VARCHAR2(255),
  VOLUME VARCHAR2(255),
  FILENAME VARCHAR2(255),
  FILETYPE INT DEFAULT 0 NOT NULL,
  CONTENT CLOB,
  UPDATED DATE NOT NULL,
  CREATED_BY INT DEFAULT 0 NOT NULL,
  CONSTRAINT resource_revisions_pk PRIMARY KEY (REVISION_ID)
)
;

CREATE TABLE SCALES
(
  SCALE_ID INT,
  NAME VARCHAR2(255),
  DESCRIPTION CLOB,
  TYPE_ INT,
  CONSTRAINT scales_pk PRIMARY KEY (SCALE_ID)
)
;

CREATE TABLE SCALE_VALUES
(
  VALUE_ID INT,
  SCALE_ID INT,
  VALUE INT,
  TEXT VARCHAR2(255),
  DESCRIPTION CLOB,
  CONSTRAINT values_pk PRIMARY KEY (VALUE_ID)
)
;

CREATE TABLE SUBJECTS
(
  SUBID INT,
  EXTERNAL_ID VARCHAR2(45),
  CODE VARCHAR2(255),
  NAME VARCHAR2(255),
  SHORTNAME VARCHAR2(32),
  SUPPLIER_ID INT,
  DESCRIPTION CLOB,
  TYPE_ VARCHAR2(45),
  REG_TYPE VARCHAR2(45),
  BEGIN_ DATE,
  END_ DATE,
  BEGIN_PLANNED DATE,
  END_PLANNED DATE,
  LONGTIME INT,
  PRICE FLOAT,
  PRICE_CURRENCY VARCHAR2(25),
  PLAN_USERS INT,
  SERVICES INT DEFAULT 0,
  PERIOD SMALLINT DEFAULT 0,
  PERIOD_RESTRICTION_TYPE SMALLINT DEFAULT 0,
  CREATED DATE,
  LAST_UPDATED DATE,
  ACCESS_MODE INT DEFAULT 0,
  ACCESS_ELEMENTS INT,
  MODE_FREE_LIMIT INT,
  AUTO_DONE INT DEFAULT 0,
  BASE INT DEFAULT 0,
  BASE_ID INT DEFAULT 0,
  BASE_COLOR VARCHAR2(45),
  CLAIMANT_PROCESS_ID INT DEFAULT 0,
  STATE_ SMALLINT DEFAULT 0,
  DEFAULT_URI VARCHAR2(255),
  SCALE_ID INT DEFAULT 0,
  AUTO_MARK SMALLINT DEFAULT 0,
  AUTO_GRADUATE SMALLINT DEFAULT 0,
  FORMULA_ID INT,
  THRESHOLD INT,
  CONSTRAINT subjects_pk PRIMARY KEY (SUBID)
)
;

CREATE TABLE SUBJECTS_COURSES
(
  SUBJECT_ID INT NOT NULL,
  COURSE_ID INT NOT NULL,
  CONSTRAINT sc_pk PRIMARY KEY (SUBJECT_ID,COURSE_ID)
)
;


CREATE TABLE SUBJECTS_TESTS
(
  SUBJECT_ID INT NOT NULL,
  TEST_ID INT NOT NULL,
  CONSTRAINT subjects_tests_pk PRIMARY KEY (SUBJECT_ID, TEST_ID)
)
;

CREATE TABLE SUBJECTS_TASKS
(
  SUBJECT_ID INT NOT NULL,
  TASK_ID INT NOT NULL,
  CONSTRAINT subjects_tasks_pk PRIMARY KEY (SUBJECT_ID, TASK_ID)
)
;

CREATE TABLE SUBJECTS_EXERCISES
(
  SUBJECT_ID INT NOT NULL,
  EXERCISE_ID INT NOT NULL,
  CONSTRAINT subjects_exercises_pk PRIMARY KEY (SUBJECT_ID, EXERCISE_ID)
)
;


CREATE TABLE SUBJECTS_RESOURCES
(
  SUBJECT_ID INT NOT NULL,
  RESOURCE_ID INT NOT NULL,
  CONSTRAINT subjects_resources_pk PRIMARY KEY (SUBJECT_ID, RESOURCE_ID)
)
;


CREATE TABLE SUBJECTS_QUIZZES
(
  SUBJECT_ID INT NOT NULL,
  QUIZ_ID INT NOT NULL,
  CONSTRAINT subjects_quizzes_pk PRIMARY KEY (SUBJECT_ID, QUIZ_ID)
)
;

CREATE TABLE MESSAGES
(
  MESSAGE_ID INT NOT NULL,
  SUBJECT VARCHAR2(255 BYTE),
  SUBJECT_ID NUMBER(10),
  FROM_ INT DEFAULT 0 NOT NULL,
  TO_ INT DEFAULT 0 NOT NULL,
  MESSAGE CLOB,
  CREATED DATE,
  CONSTRAINT messages_pk PRIMARY KEY (MESSAGE_ID)
)
;

CREATE TABLE HOLD_MAIL
(
  HOLD_MAIL_ID INT NOT NULL,
  RECEIVER_MID INT DEFAULT 0 NOT NULL,
  SERIALIZED_MESSAGE CLOB DEFAULT '' NOT NULL,
  CONSTRAINT HOLD_MAIL PRIMARY KEY (HOLD_MAIL_ID)
)
;

CREATE TABLE INTERFACE
(
  INTERFACE_ID INT NOT NULL,
  ROLE VARCHAR2(255) DEFAULT '' NOT NULL,
  USER_ID INT DEFAULT 0 NOT NULL,
  BLOCK VARCHAR2(255) DEFAULT '',
  NECESSITY INT DEFAULT 0,
  X INT DEFAULT 1 NOT NULL,
  Y INT DEFAULT 1 NOT NULL,
  PARAM_ID VARCHAR2(255),
  CONSTRAINT interface_pk PRIMARY KEY (INTERFACE_ID)
)
;





CREATE TABLE INTERESTING_FACTS
(
  INTERESTING_FACTS_ID NUMBER(38,0),
  TITLE CLOB,
  TEXT CLOB,
  STATUS NUMBER(1,0),
  CONSTRAINT INTERESTING_FACTS_PK
  PRIMARY KEY (
    INTERESTING_FACTS_ID
  )
);

CREATE TABLE INTERVIEW
(
	INTERVIEW_ID INT NOT NULL,
	TITLE  CLOB,
	LESSON_ID INT DEFAULT NULL,
	USER_ID INT DEFAULT NULL,
	TO_WHOM INT DEFAULT NULL,
	TYPE_  INT DEFAULT NULL,
	QUESTION_ID  CLOB,
	MESSAGE CLOB,
	DATE_ DATE  DEFAULT NULL,
	INTERVIEW_HASH INT DEFAULT NULL,
	CONSTRAINT inter_pk PRIMARY KEY (INTERVIEW_ID)
);

CREATE TABLE INTERVIEW_FILES
(
	INTERVIEW_ID  INT NOT NULL,
	FILE_ID VARCHAR2(45) NOT NULL,
	CONSTRAINT inter_f_pk PRIMARY KEY (INTERVIEW_ID, FILE_ID)
);

CREATE TABLE WEBINAR_ANSWERS
(
  AID INT NOT NULL,
  QID INT NOT NULL,
  TEXT VARCHAR2(255),
  CONSTRAINT wa_pk PRIMARY KEY (AID)
)
;

CREATE TABLE WEBINAR_QUESTIONS
(
  QID INT NOT NULL,
  TEXT VARCHAR2(255),
  TYPE_ INT,
  POINT_ID INT,
  IS_VOTED INT,
  CONSTRAINT wq_pk PRIMARY KEY (QID)
)
;

CREATE TABLE WEBINAR_VOTES
(
  VID INT NOT NULL,
  USER_ID INT,
  QID INT,
  AID INT,
  CONSTRAINT wv_pk PRIMARY KEY (VID)
)
;

CREATE TABLE WEBINAR_WHITEBOARD
(
  ACTIONID INT NOT NULL,
  POINTID INT,
  USERID INT,
  ACTIONTYPE VARCHAR2(255),
  DATETIME DATE,
  COLOR INT,
  TOOL INT,
  TEXT CLOB,
  WIDTH INT,
  HEIGHT INT,
  CONSTRAINT ww_pk PRIMARY KEY (ACTIONID)
)
;

CREATE TABLE WEBINAR_WHITEBOARD_POINTS
(
  POINTID INT NOT NULL,
  ACTIONID INT,
  X INT,
  Y INT,
  TYPE_ INT,
  CONSTRAINT wwp_pk PRIMARY KEY (POINTID)
)
;

CREATE TABLE WEBINAR_RECORDS
(
  ID INT NOT NULL,
  SUBJECT_ID INT,
  WEBINAR_ID INT,
  NAME VARCHAR2(255),
  CONSTRAINT wr_pk PRIMARY KEY (ID)
)
;

CREATE TABLE VIDEOCHAT_USERS
(
  POINTID  VARCHAR2(255 CHAR)                   NOT NULL,
  USERID   NUMBER(10),
  LAST     DATE,
  CONSTRAINT vu_pk PRIMARY KEY (POINTID,USERID)
);
create table BLOG
(
  ID         NUMBER(10) NOT NULL,
  TITLE      VARCHAR2(255 BYTE),
  BODY       CLOB NOT NULL,
  CREATED    DATE NOT NULL,
  CREATED_BY NUMBER(10) NOT NULL,
  SUBJECT_NAME VARCHAR(255 BYTE),
  SUBJECT_ID NUMBER(10),
  CONSTRAINT BLOG_PK PRIMARY KEY (ID)
);

create table TAG
(
    ID         NUMBER(10) NOT NULL,
    BODY       VARCHAR(255) NOT NULL,
    CONSTRAINT TAG_PK PRIMARY KEY (ID)
);

create table TAG_REF
(
  TAG_ID         NUMBER(10) NOT NULL,
  ITEM_TYPE         NUMBER(10) NOT NULL,
  ITEM_ID         NUMBER(10) NOT NULL,  
  CONSTRAINT TAG_REF_PK PRIMARY KEY (TAG_ID, ITEM_TYPE, ITEM_ID)
);

create table WIKI_ARTICLES
(
  ID      INTEGER not null,
  CREATED DATE,
  TITLE   VARCHAR(255) not null,
  SUBJECT_NAME VARCHAR(255 BYTE),
  SUBJECT_ID NUMBER(10),
  LESSON_ID NUMBER(10) DEFAULT NULL,
  CHANGED DATE,
  CONSTRAINT WIKI_ARTICLES_PK PRIMARY KEY (ID)
);

create table WIKI_ARCHIVE
(
  ID      INTEGER NOT NULL,
  ARTICLE_ID      INTEGER not null,
  CREATED DATE,
  AUTHOR  NUMBER NOT NULL,
  BODY    CLOB,
  CONSTRAINT WIKI_ARCHIVE_PK PRIMARY KEY (ID)
);

CREATE TABLE CHAT_CHANNELS
(
  ID NUMBER(10) NOT NULL,
  SUBJECT_NAME VARCHAR2(255),
  SUBJECT_ID NUMBER(10) NOT NULL,
  LESSON_ID    NUMBER(10) DEFAULT NULL,
  NAME         VARCHAR2(255) NOT NULL,
  START_DATE   DATE,
  END_DATE     DATE,
  SHOW_HISTORY NUMBER(1) DEFAULT 1 NOT NULL,
  START_TIME   NUMBER(4),
  END_TIME     NUMBER(4),
  IS_GENERAL   NUMBER(1) DEFAULT 0 NOT NULL,
  CONSTRAINT CHAT_CHANNELS_PK PRIMARY KEY (ID)
);

CREATE TABLE CHAT_HISTORY
(
  ID NUMBER(10) NOT NULL,
  CHANNEL_ID NUMBER(10) NOT NULL,
  SENDER NUMBER(10) NOT NULL,
  RECEIVER NUMBER(10),
  MESSAGE CLOB,
  CREATED date,
  CONSTRAINT CHAT_HISTORY_PK PRIMARY KEY (ID)
);

CREATE TABLE CHAT_REF_USERS
(
  CHANNEL_ID NUMBER(10) NOT NULL,
  USER_ID NUMBER(10) NOT NULL
);

CREATE TABLE STORAGE_FILESYSTEM
(
    ID           NUMBER(10) NOT NULL,
    PARENT_ID    NUMBER(10),
    SUBJECT_ID   NUMBER(10) NOT NULL,
    SUBJECT_NAME VARCHAR2(255),
    NAME         VARCHAR2(255),
    ALIAS        VARCHAR2(255),
    IS_FILE      NUMBER(1) NOT NULL,
    DESCRIPTION  VARCHAR2(255),
    USER_ID      NUMBER(10),
    CREATED      DATE,
    CHANGED      DATE
);

CREATE TABLE SECTIONS
(
  SECTION_ID INT NOT NULL,
  SUBJECT_ID INT,
  NAME VARCHAR2(255),
  ORDER_ INT,  
  CONSTRAINT SECTIONS_PK PRIMARY KEY (SECTION_ID)
);

CREATE TABLE REPORTS_ROLES
(
  ROLE VARCHAR2(100 BYTE),
  REPORT_ID INT,
  CONSTRAINT REPORTS_ROLES_PK PRIMARY KEY (ROLE, REPORT_ID)
)
;

CREATE TABLE KBASE_ASSESSMENT
(
  ID INT NOT NULL,
  TYPE INT  DEFAULT 0 NOT NULL,
  RESOURCE_ID INT  NOT NULL,
  MID INT  DEFAULT 0 NOT NULL,
  ASSESSMENT INT  DEFAULT 0 NOT NULL,
  CONSTRAINT KBASE_ASSESSMENT_PK PRIMARY KEY (ID)
);

CREATE INDEX ADMINS_MID ON ADMINS (MID);
CREATE INDEX BLOG_CREATED_BY ON BLOG (CREATED_BY);
CREATE INDEX BLOG_SUBJECT_ID ON BLOG (SUBJECT_ID);
CREATE INDEX CAPTCHA_ATTEMPTS ON CAPTCHA (ATTEMPTS);
CREATE INDEX CERTIFICATES_SUBJECT_ID ON CERTIFICATES (SUBJECT_ID);
CREATE INDEX CERTIFICATES_USER_ID ON CERTIFICATES (USER_ID);
CREATE INDEX CHAT_CHANNELS_END_TIME ON CHAT_CHANNELS (END_TIME);
CREATE INDEX CHAT_CHANNELS_IS_GENERAL ON CHAT_CHANNELS (IS_GENERAL);
CREATE INDEX CHAT_CHANNELS_LESSON_ID ON CHAT_CHANNELS (LESSON_ID);
CREATE INDEX CHAT_CHANNELS_SHOW_HISTORY ON CHAT_CHANNELS (SHOW_HISTORY);
CREATE INDEX CHAT_CHANNELS_START_TIME ON CHAT_CHANNELS (START_TIME);
CREATE INDEX CHAT_CHANNELS_SUBJECT_ID ON CHAT_CHANNELS (SUBJECT_ID);
CREATE INDEX CHAT_HISTORY_CHANNEL_ID ON CHAT_HISTORY (CHANNEL_ID);
CREATE INDEX CHAT_HISTORY_RECEIVER ON CHAT_HISTORY (RECEIVER);
CREATE INDEX CHAT_HISTORY_SENDER ON CHAT_HISTORY (SENDER);
CREATE INDEX CHAT_REF_USERS_CHANNEL_ID ON CHAT_REF_USERS (CHANNEL_ID);
CREATE INDEX CHAT_REF_USERS_USER_ID ON CHAT_REF_USERS (USER_ID);
CREATE INDEX CLAIMANTS_BASE_SUBJECT ON CLAIMANTS (BASE_SUBJECT);
CREATE INDEX CLAIMANTS_CID ON CLAIMANTS (CID);
CREATE INDEX CLAIMANTS_CREATED_BY ON CLAIMANTS (CREATED_BY);
CREATE INDEX CLAIMANTS_DUBLICATE ON CLAIMANTS (DUBLICATE);
CREATE INDEX CLAIMANTS_MID ON CLAIMANTS (MID);
CREATE INDEX CLAIMANTS_STATUS ON CLAIMANTS (STATUS);
CREATE INDEX CLAIMANTS_TEACHER ON CLAIMANTS (TEACHER);
CREATE INDEX CLAIMANTS_TYPE_ ON CLAIMANTS (TYPE_);
CREATE INDEX CLASSIFIERS_IMAGES_ITEM_ID ON CLASSIFIERS_IMAGES (ITEM_ID);
CREATE INDEX CLASSIFIERS_IMAGES_TYPE_ ON CLASSIFIERS_IMAGES (TYPE_);
CREATE INDEX CLASSIFIERS_LEVEL_ ON CLASSIFIERS (LEVEL_);
CREATE INDEX CLASSIFIERS_LFT ON CLASSIFIERS (LFT);
CREATE INDEX CL_CLASSIFIER_ID ON CLASSIFIERS_LINKS (CLASSIFIER_ID);
CREATE INDEX CLASSIFIERS_LINKS_ITEM_ID ON CLASSIFIERS_LINKS (ITEM_ID);
CREATE INDEX CLASSIFIERS_LINKS_TYPE_ ON CLASSIFIERS_LINKS (TYPE_);
CREATE INDEX CLASSIFIERS_RGT ON CLASSIFIERS (RGT);
CREATE INDEX CLASSIFIERS_TYPE_ ON CLASSIFIERS (TYPE_);
CREATE INDEX COMMENTS_ITEM_ID ON COMMENTS (ITEM_ID);
CREATE INDEX COMMENTS_SUBJECT_ID ON COMMENTS (SUBJECT_ID);
CREATE INDEX COMMENTS_USER_ID ON COMMENTS (USER_ID);
CREATE INDEX COURSES_CHAIN ON COURSES (CHAIN);
CREATE INDEX COURSES_CREDITS_STUDENT ON COURSES (CREDITS_STUDENT);
CREATE INDEX COURSES_CREDITS_TEACHER ON COURSES (CREDITS_TEACHER);
CREATE INDEX COURSES_EMULATE ON COURSES (EMULATE);
CREATE INDEX COURSES_FORMAT ON COURSES (FORMAT);
CREATE INDEX COURSES_AUTHOR ON COURSES (AUTHOR);
CREATE INDEX COURSES_HAS_TREE ON COURSES (HAS_TREE);
CREATE INDEX COURSES_IS_MODULE_NEED_CHECK ON COURSES (IS_MODULE_NEED_CHECK);
CREATE INDEX COURSES_IS_POLL ON COURSES (IS_POLL);
CREATE INDEX COURSES_LOCKED ON COURSES (LOCKED);
CREATE INDEX COURSES_LONGTIME ON COURSES (LONGTIME);
CREATE INDEX COURSES_MARKS_CID ON COURSES_MARKS (CID);
CREATE INDEX COURSES_MARKS_CONFIRMED ON COURSES_MARKS (CONFIRMED);
CREATE INDEX COURSES_MARKS_MID ON COURSES_MARKS (MID);
CREATE INDEX COURSES_NEW_WINDOW ON COURSES (NEW_WINDOW);
CREATE INDEX COURSES_PROGRESS ON COURSES (PROGRESS);
CREATE INDEX COURSES_PROVIDER ON COURSES (PROVIDER);
CREATE INDEX COURSES_SEQUENCE_ ON COURSES (SEQUENCE_);
CREATE INDEX COURSES_SERVICES ON COURSES (SERVICES);
CREATE INDEX COURSES_STATUS ON COURSES (STATUS);
CREATE INDEX COURSES_TYPE_ ON COURSES (TYPE_);
CREATE INDEX COURSES_TYPEDES ON COURSES (TYPEDES);
CREATE INDEX COURSES_VALUTA ON COURSES (VALUTA);
CREATE INDEX CRONTASK_CRONTASK_RUNTIME ON CRONTASK (CRONTASK_RUNTIME);
CREATE INDEX D_OPTIONS_UN_SUBJECTS ON DEANS_OPTIONS (UNLIMITED_SUBJECTS);
CREATE INDEX DEAN_POLL_USERS_HEAD_MID ON DEAN_POLL_USERS (HEAD_MID);
CREATE INDEX DEAN_POLL_USERS_LESSON_ID ON DEAN_POLL_USERS (LESSON_ID);
CREATE INDEX DEAN_POLL_USERS_STUDENT_MID ON DEAN_POLL_USERS (STUDENT_MID);
CREATE INDEX DEANS_MID ON DEANS (MID);
CREATE INDEX DEANS_OPTIONS_USER_ID ON DEANS_OPTIONS (USER_ID);
CREATE INDEX DEANS_RESPONSIBILITIES_USER_ID ON DEANS_RESPONSIBILITIES (USER_ID);
CREATE INDEX DEANS_SUBJECT_ID ON DEANS (SUBJECT_ID);
CREATE INDEX DEVELOPERS_CID ON DEVELOPERS (CID);
CREATE INDEX DEVELOPERS_MID ON DEVELOPERS (MID);
CREATE INDEX DO_ASSIGN_NEW_SUBJECTS ON DEANS_OPTIONS (ASSIGN_NEW_SUBJECTS);
CREATE INDEX DO_UNLIMITED_CLASSIFIERS ON DEANS_OPTIONS (UNLIMITED_CLASSIFIERS);
CREATE INDEX DR_CLASSIFIER_ID ON DEANS_RESPONSIBILITIES (CLASSIFIER_ID);
CREATE INDEX EVENTS_SCALE_ID ON EVENTS (SCALE_ID);
CREATE INDEX EVENTS_TOOL ON EVENTS (TOOL);
CREATE INDEX EVENTS_WEIGHT ON EVENTS (WEIGHT);
CREATE INDEX EXERCISES_CREATED_BY ON EXERCISES (CREATED_BY);
CREATE INDEX EXERCISES_QUESTIONS ON EXERCISES (QUESTIONS);
CREATE INDEX EXERCISES_STATUS ON EXERCISES (STATUS);
CREATE INDEX EXERCISES_SUBJECT_ID ON EXERCISES (SUBJECT_ID);
CREATE INDEX FAQ_PUBLISHED ON FAQ (PUBLISHED);
CREATE INDEX FILE__FDATE ON FILE_ (FDATE);
CREATE INDEX FILE__FNUM ON FILE_ (FNUM);
CREATE INDEX FILE__FTYPE ON FILE_ (FTYPE);
CREATE INDEX FILE__FX ON FILE_ (FX);
CREATE INDEX FILE__FY ON FILE_ (FY);
CREATE INDEX FILES_FILE_SIZE ON FILES (FILE_SIZE);
CREATE INDEX FORMULA_CID ON FORMULA (CID);
CREATE INDEX FORMULA_TYPE_ ON FORMULA (TYPE_);
CREATE INDEX FORUMS_LIST_FLAGS ON FORUMS_LIST (FLAGS);
CREATE INDEX FORUMS_LIST_SUBJECT_ID ON FORUMS_LIST (SUBJECT_ID);
CREATE INDEX FORUMS_LIST_USER_ID ON FORUMS_LIST (USER_ID);
CREATE INDEX FORUMS_MESSAGES_ANSWER_TO ON FORUMS_MESSAGES (ANSWER_TO);
CREATE INDEX FORUMS_MESSAGES_DELETED_BY ON FORUMS_MESSAGES (DELETED_BY);
CREATE INDEX FORUMS_MESSAGES_FLAGS ON FORUMS_MESSAGES (FLAGS);
CREATE INDEX FORUMS_MESSAGES_FORUM_ID ON FORUMS_MESSAGES (FORUM_ID);
CREATE INDEX FORUMS_MESSAGES_IS_HIDDEN ON FORUMS_MESSAGES (IS_HIDDEN);
CREATE INDEX FORUMS_MESSAGES_LEVEL_ ON FORUMS_MESSAGES (LEVEL_);
CREATE INDEX FORUMS_MESSAGES_RATING ON FORUMS_MESSAGES (RATING);
CREATE INDEX FORUMS_MESSAGES_SECTION_ID ON FORUMS_MESSAGES (SECTION_ID);
CREATE INDEX FMS_MESSAGE_ID ON FORUMS_MESSAGES_SHOWED (MESSAGE_ID);
CREATE INDEX FMS_USER_ID ON FORUMS_MESSAGES_SHOWED (USER_ID);
CREATE INDEX FORUMS_MESSAGES_TEXT_SIZE ON FORUMS_MESSAGES (TEXT_SIZE);
CREATE INDEX FORUMS_MESSAGES_USER_ID ON FORUMS_MESSAGES (USER_ID);
CREATE INDEX FORUMS_SECTIONS_COUNT_MSG ON FORUMS_SECTIONS (COUNT_MSG);
CREATE INDEX FORUMS_SECTIONS_FLAGS ON FORUMS_SECTIONS (FLAGS);
CREATE INDEX FORUMS_SECTIONS_FORUM_ID ON FORUMS_SECTIONS (FORUM_ID);
CREATE INDEX FORUMS_SECTIONS_IS_HIDDEN ON FORUMS_SECTIONS (IS_HIDDEN);
CREATE INDEX FORUMS_SECTIONS_LESSON_ID ON FORUMS_SECTIONS (LESSON_ID);
CREATE INDEX FORUMS_SECTIONS_ORDER_ ON FORUMS_SECTIONS (ORDER_);
CREATE INDEX FORUMS_SECTIONS_PARENT_ID ON FORUMS_SECTIONS (PARENT_ID);
CREATE INDEX FORUMS_SECTIONS_USER_ID ON FORUMS_SECTIONS (USER_ID);
CREATE INDEX GRADUATED_CERTIFICATE_ID ON GRADUATED (CERTIFICATE_ID);
CREATE INDEX GRADUATED_CID ON GRADUATED (CID);
CREATE INDEX GRADUATED_IS_LOOKABLE ON GRADUATED (IS_LOOKABLE);
CREATE INDEX GRADUATED_MID ON GRADUATED (MID);
CREATE INDEX GRADUATED_PROGRESS ON GRADUATED (PROGRESS);
CREATE INDEX GRADUATED_STATUS ON GRADUATED (STATUS);
CREATE INDEX GROUPNAME_CID ON GROUPNAME (CID);
CREATE INDEX GROUPNAME_OWNER_GID ON GROUPNAME (OWNER_GID);
CREATE INDEX GROUPUSER_CID ON GROUPUSER (CID);
CREATE INDEX GROUPUSER_GID ON GROUPUSER (GID);
CREATE INDEX GROUPUSER_MID ON GROUPUSER (MID);
CREATE INDEX HACP_DEBUG_DIRECTION ON HACP_DEBUG (DIRECTION);
CREATE INDEX HELP_LINK_SUBJECT ON HELP (LINK_SUBJECT);
CREATE INDEX HELP_MODERATED ON HELP (MODERATED);
CREATE INDEX HOLIDAYS_TYPE_ ON HOLIDAYS (TYPE_);
CREATE INDEX HOLIDAYS_USER_ID ON HOLIDAYS (USER_ID);
CREATE INDEX HTMLPAGE_GROUP_ID ON HTMLPAGE (GROUP_ID);
CREATE INDEX HTMLPAGE_GROUPS_LEVEL_ ON HTMLPAGE_GROUPS (LEVEL_);
CREATE INDEX HTMLPAGE_GROUPS_LFT ON HTMLPAGE_GROUPS (LFT);
CREATE INDEX HTMLPAGE_GROUPS_ORDR ON HTMLPAGE_GROUPS (ORDR);
CREATE INDEX HTMLPAGE_GROUPS_RGT ON HTMLPAGE_GROUPS (RGT);
CREATE INDEX HTMLPAGE_ORDR ON HTMLPAGE (ORDR);
CREATE INDEX INTERESTING_FACTS_STATUS ON INTERESTING_FACTS (STATUS);
CREATE INDEX INTERFACE_NECESSITY ON INTERFACE (NECESSITY);
CREATE INDEX INTERFACE_USER_ID ON INTERFACE (USER_ID);
CREATE INDEX INTERFACE_X ON INTERFACE (X);
CREATE INDEX INTERFACE_Y ON INTERFACE (Y);
CREATE INDEX INTERVIEW_FILES_INTERVIEW_ID ON INTERVIEW_FILES (INTERVIEW_ID);
CREATE INDEX INTERVIEW_INTERVIEW_HASH ON INTERVIEW (INTERVIEW_HASH);
CREATE INDEX INTERVIEW_LESSON_ID ON INTERVIEW (LESSON_ID);
CREATE INDEX INTERVIEW_TO_WHOM ON INTERVIEW (TO_WHOM);
CREATE INDEX INTERVIEW_TYPE_ ON INTERVIEW (TYPE_);
CREATE INDEX INTERVIEW_USER_ID ON INTERVIEW (USER_ID);
CREATE INDEX LIBRARY_CID ON LIBRARY (CID);
CREATE INDEX LIBRARY_IS_ACTIVE_VERSION ON LIBRARY (IS_ACTIVE_VERSION);
CREATE INDEX LIBRARY_IS_PACKAGE ON LIBRARY (IS_PACKAGE);
CREATE INDEX LIBRARY_MID ON LIBRARY (MID);
CREATE INDEX LIBRARY_NEED_ACCESS_LEVEL ON LIBRARY (NEED_ACCESS_LEVEL);
CREATE INDEX LIBRARY_PARENT ON LIBRARY (PARENT);
CREATE INDEX LIBRARY_POINTID ON LIBRARY (POINTID);
CREATE INDEX LIBRARY_QUANTITY ON LIBRARY (QUANTITY);
CREATE INDEX LIBRARY_TYPE_ ON LIBRARY (TYPE_);
CREATE INDEX LIBRARY_UID_ ON LIBRARY (UID_);
CREATE INDEX LIST_CREATED_BY ON LIST (CREATED_BY);
CREATE INDEX LIST_FILES_FILE_ID ON LIST_FILES (FILE_ID);
CREATE INDEX LIST_IS_POLL ON LIST (IS_POLL);
CREATE INDEX LIST_IS_SHUFFLED ON LIST (IS_SHUFFLED);
CREATE INDEX LIST_LAST ON LIST (LAST);
CREATE INDEX LIST_ORDR ON LIST (ORDR);
CREATE INDEX LIST_QMODER ON LIST (QMODER);
CREATE INDEX LIST_QTYPE ON LIST (QTYPE);
CREATE INDEX LIST_TIMELIMIT ON LIST (TIMELIMIT);
CREATE INDEX LIST_TIMETOANSWER ON LIST (TIMETOANSWER);
CREATE INDEX LOGSEANCE_CID ON LOGSEANCE (CID);
CREATE INDEX LOGSEANCE_MID ON LOGSEANCE (MID);
CREATE INDEX LOGSEANCE_NUMBER_ ON LOGSEANCE (NUMBER_);
CREATE INDEX LOGSEANCE_SHEID ON LOGSEANCE (SHEID);
CREATE INDEX LOGSEANCE_STID ON LOGSEANCE (STID);
CREATE INDEX LOGSEANCE_TID ON LOGSEANCE (TID);
CREATE INDEX LOGSEANCE_TIME ON LOGSEANCE (TIME);
CREATE INDEX LOGUSER_CID ON LOGUSER (CID);
CREATE INDEX LOGUSER_FREE ON LOGUSER (FREE);
CREATE INDEX LOGUSER_FULLTIME ON LOGUSER (FULLTIME);
CREATE INDEX LOGUSER_MID ON LOGUSER (MID);
CREATE INDEX LOGUSER_MODER ON LOGUSER (MODER);
CREATE INDEX LOGUSER_MODERBY ON LOGUSER (MODERBY);
CREATE INDEX LOGUSER_MODERTIME ON LOGUSER (MODERTIME);
CREATE INDEX LOGUSER_NEEDMODER ON LOGUSER (NEEDMODER);
CREATE INDEX LOGUSER_QTY ON LOGUSER (QTY);
CREATE INDEX LOGUSER_QUESTALL ON LOGUSER (QUESTALL);
CREATE INDEX LOGUSER_QUESTDONE ON LOGUSER (QUESTDONE);
CREATE INDEX LOGUSER_SHEID ON LOGUSER (SHEID);
CREATE INDEX LOGUSER_SKIP_ ON LOGUSER (SKIP_);
CREATE INDEX LOGUSER_START_ ON LOGUSER (START_);
CREATE INDEX LOGUSER_STATUS ON LOGUSER (STATUS);
CREATE INDEX LOGUSER_STOP_ ON LOGUSER (STOP_);
CREATE INDEX LOGUSER_TEACHERTEST ON LOGUSER (TEACHERTEST);
CREATE INDEX LOGUSER_TID ON LOGUSER (TID);
CREATE INDEX MANAGERS_MID ON MANAGERS (MID);
CREATE INDEX MESSAGES_FROM_ ON MESSAGES (FROM_);
CREATE INDEX MESSAGES_SUBJECT_ID ON MESSAGES (SUBJECT_ID);
CREATE INDEX MESSAGES_TO_ ON MESSAGES (TO_);
CREATE INDEX METHODOLOGIST_CID ON METHODOLOGIST (CID);
CREATE INDEX METHODOLOGIST_MID ON METHODOLOGIST (MID);
CREATE INDEX NEWS_CREATED_BY ON NEWS (CREATED_BY);
CREATE INDEX NEWS_SUBJECT_ID ON NEWS (SUBJECT_ID);
CREATE INDEX NEWS2_APPLICATION ON NEWS2 (APPLICATION);
CREATE INDEX NEWS2_RESOURCE_ID ON NEWS2 (RESOURCE_ID);
CREATE INDEX NEWS2_SHOW ON NEWS2 (SHOW);
CREATE INDEX NEWS2_STANDALONE ON NEWS2 (STANDALONE);
CREATE INDEX NEWS2_TYPE_ ON NEWS2 (TYPE_);
CREATE INDEX NOTICE_ENABLED ON NOTICE (ENABLED);
CREATE INDEX NOTICE_RECEIVER ON NOTICE (RECEIVER);
CREATE INDEX NOTICE_TYPE_ ON NOTICE (TYPE_);
CREATE INDEX OAUTH_APPS_CREATED_BY ON OAUTH_APPS (CREATED_BY);
CREATE INDEX OAUTH_NONCES_APP_ID ON OAUTH_NONCES (APP_ID);
CREATE INDEX OAUTH_TOKENS_APP_ID ON OAUTH_TOKENS (APP_ID);
CREATE INDEX OAUTH_TOKENS_STATE ON OAUTH_TOKENS (STATE);
CREATE INDEX OAUTH_TOKENS_USER_ID ON OAUTH_TOKENS (USER_ID);
CREATE INDEX ORGANIZATIONS_CID ON ORGANIZATIONS (CID);
CREATE INDEX ORGANIZATIONS_LEVEL_ ON ORGANIZATIONS (LEVEL_);
CREATE INDEX ORGANIZATIONS_MOD_REF ON ORGANIZATIONS (MOD_REF);
CREATE INDEX ORGANIZATIONS_MODULE ON ORGANIZATIONS (MODULE);
CREATE INDEX ORGANIZATIONS_NEXT_REF ON ORGANIZATIONS (NEXT_REF);
CREATE INDEX ORGANIZATIONS_PREV_REF ON ORGANIZATIONS (PREV_REF);
CREATE INDEX ORGANIZATIONS_ROOT_REF ON ORGANIZATIONS (ROOT_REF);
CREATE INDEX ORGANIZATIONS_STATUS ON ORGANIZATIONS (STATUS);
CREATE INDEX ORGANIZATIONS_VOL1 ON ORGANIZATIONS (VOL1);
CREATE INDEX ORGANIZATIONS_VOL2 ON ORGANIZATIONS (VOL2);
CREATE INDEX PASSWORD_HISTORY_USER_ID ON PASSWORD_HISTORY (USER_ID);
CREATE INDEX PEOPLE_ACCESS_LEVEL ON PEOPLE (ACCESS_LEVEL);
CREATE INDEX PEOPLE_BLOCKED ON PEOPLE (BLOCKED);
CREATE INDEX PEOPLE_COUNTLOGIN ON PEOPLE (COUNTLOGIN);
CREATE INDEX PEOPLE_COURSE ON PEOPLE (COURSE);
CREATE INDEX PEOPLE_DUBLICATE ON PEOPLE (DUBLICATE);
CREATE INDEX PEOPLE_EMAIL_CONFIRMED ON PEOPLE (EMAIL_CONFIRMED);
CREATE INDEX PEOPLE_FORCE_PASSWORD ON PEOPLE (FORCE_PASSWORD);
CREATE INDEX PEOPLE_GENDER ON PEOPLE (GENDER);
CREATE INDEX PEOPLE_HEAD_MID ON PEOPLE (HEAD_MID);
CREATE INDEX PEOPLE_ICQNUMBER ON PEOPLE (ICQNUMBER);
CREATE INDEX PEOPLE_INVALID_LOGIN ON PEOPLE (INVALID_LOGIN);
CREATE INDEX PEOPLE_ISAD ON PEOPLE (ISAD);
CREATE INDEX PEOPLE_LAST ON PEOPLE (LAST);
CREATE INDEX PEOPLE_NEED_EDIT ON PEOPLE (NEED_EDIT);
CREATE INDEX PEOPLE_PREFERRED_LANG ON PEOPLE (PREFERRED_LANG);
CREATE INDEX PEOPLE_RANG ON PEOPLE (RANG);
CREATE INDEX PEOPLE_RNID ON PEOPLE (RNID);
CREATE INDEX PERIODS_COUNT_HOURS ON PERIODS (COUNT_HOURS);
CREATE INDEX PERIODS_STARTTIME ON PERIODS (STARTTIME);
CREATE INDEX PERIODS_STOPTIME ON PERIODS (STOPTIME);
CREATE INDEX PERMISSION_GROUPS_APPLICATION ON PERMISSION_GROUPS (APPLICATION);
CREATE INDEX PERMISSION_GROUPS_RANG ON PERMISSION_GROUPS (RANG);
CREATE INDEX PERMISSION2ACT_PMID ON PERMISSION2ACT ( PMID);
CREATE INDEX PERMISSION2MID_MID ON PERMISSION2MID (MID);
CREATE INDEX PERMISSION2MID_PMID ON PERMISSION2MID (PMID);
CREATE INDEX PEU_PROGRAMM_EVENT_ID ON PROGRAMM_EVENTS_USERS (PROGRAMM_EVENT_ID);
CREATE INDEX PLAN_TABLE_BYTES ON PLAN_TABLE (BYTES);
CREATE INDEX PLAN_TABLE_CARDINALITY ON PLAN_TABLE (CARDINALITY);
CREATE INDEX PLAN_TABLE_COST ON PLAN_TABLE (COST);
CREATE INDEX PLAN_TABLE_CPU_COST ON PLAN_TABLE (CPU_COST);
CREATE INDEX PLAN_TABLE_ID ON PLAN_TABLE (ID);
CREATE INDEX PLAN_TABLE_IO_COST ON PLAN_TABLE (IO_COST);
CREATE INDEX PLAN_TABLE_OBJECT_INSTANCE ON PLAN_TABLE (OBJECT_INSTANCE);
CREATE INDEX PLAN_TABLE_PARENT_ID ON PLAN_TABLE (PARENT_ID);
CREATE INDEX PLAN_TABLE_PARTITION_ID ON PLAN_TABLE (PARTITION_ID);
CREATE INDEX PLAN_TABLE_POSITION ON PLAN_TABLE (POSITION);
CREATE INDEX PLAN_TABLE_SEARCH_COLUMNS ON PLAN_TABLE (SEARCH_COLUMNS);
CREATE INDEX PLAN_TABLE_TEMP_SPACE ON PLAN_TABLE (TEMP_SPACE);
CREATE INDEX PPT2SWF_POOL_ID ON PPT2SWF (POOL_ID);
CREATE INDEX PPT2SWF_PROCESS ON PPT2SWF (PROCESS);
CREATE INDEX PPT2SWF_STATUS ON PPT2SWF (STATUS);
CREATE INDEX PPT2SWF_WEBINAR_ID ON PPT2SWF (WEBINAR_ID);
CREATE INDEX PROCESSES_PROCESS_ID ON PROCESSES (PROCESS_ID);
CREATE INDEX PROCESSES_TYPE_ ON PROCESSES (TYPE_);
CREATE INDEX PROGRAMM_EVENTS_ITEM_ID ON PROGRAMM_EVENTS (ITEM_ID);
CREATE INDEX PROGRAMM_EVENTS_PROGRAMM_ID ON PROGRAMM_EVENTS (PROGRAMM_ID);
CREATE INDEX PROGRAMM_EVENTS_TYPE_ ON PROGRAMM_EVENTS (TYPE_);
CREATE INDEX PROGRAMM_EVENTS_USERS_STATUS ON PROGRAMM_EVENTS_USERS (STATUS);
CREATE INDEX PROGRAMM_EVENTS_USERS_USER_ID ON PROGRAMM_EVENTS_USERS (USER_ID);
CREATE INDEX PROGRAMM_PROGRAMM_TYPE ON PROGRAMM (PROGRAMM_TYPE);
CREATE INDEX PROGRAMM_USERS_PROGRAMM_ID ON PROGRAMM_USERS (PROGRAMM_ID);
CREATE INDEX PROGRAMM_USERS_USER_ID ON PROGRAMM_USERS (USER_ID);
CREATE INDEX QUIZZES_ANSWERS_ANSWER_ID ON QUIZZES_ANSWERS (ANSWER_ID);
CREATE INDEX QUIZZES_ANSWERS_QUIZ_ID ON QUIZZES_ANSWERS (QUIZ_ID);
CREATE INDEX QUIZZES_CREATED_BY ON QUIZZES (CREATED_BY);
CREATE INDEX QUIZZES_FEEDBACK_LESSON_ID ON QUIZZES_FEEDBACK (LESSON_ID);
CREATE INDEX QUIZZES_FEEDBACK_STATUS ON QUIZZES_FEEDBACK (STATUS);
CREATE INDEX QUIZZES_FEEDBACK_SUBJECT_ID ON QUIZZES_FEEDBACK (SUBJECT_ID);
CREATE INDEX QUIZZES_FEEDBACK_TRAINER_ID ON QUIZZES_FEEDBACK (TRAINER_ID);
CREATE INDEX QUIZZES_FEEDBACK_USER_ID ON QUIZZES_FEEDBACK (USER_ID);
CREATE INDEX QUIZZES_LOCATION ON QUIZZES (LOCATION);
CREATE INDEX QUIZZES_QUESTIONS ON QUIZZES (QUESTIONS);
CREATE INDEX QUIZZES_RESULTS_ANSWER_ID ON QUIZZES_RESULTS (ANSWER_ID);
CREATE INDEX QUIZZES_RESULTS_JUNIOR_ID ON QUIZZES_RESULTS (JUNIOR_ID);
CREATE INDEX QUIZZES_RESULTS_LESSON_ID ON QUIZZES_RESULTS (LESSON_ID);
CREATE INDEX QUIZZES_RESULTS_QUIZ_ID ON QUIZZES_RESULTS (QUIZ_ID);
CREATE INDEX QUIZZES_RESULTS_SUBJECT_ID ON QUIZZES_RESULTS (SUBJECT_ID);
CREATE INDEX QUIZZES_RESULTS_USER_ID ON QUIZZES_RESULTS (USER_ID);
CREATE INDEX QUIZZES_STATUS ON QUIZZES (STATUS);
CREATE INDEX QUIZZES_SUBJECT_ID ON QUIZZES (SUBJECT_ID);
CREATE INDEX REPORTS_CREATED_BY ON REPORTS (CREATED_BY);
CREATE INDEX REPORTS_ROLES_REPORT_ID ON REPORTS_ROLES (REPORT_ID);
CREATE INDEX REPORTS_STATUS ON REPORTS (STATUS);
CREATE INDEX RESOURCE_REVISIONS_CREATED_BY ON RESOURCE_REVISIONS (CREATED_BY);
CREATE INDEX RESOURCE_REVISIONS_FILETYPE ON RESOURCE_REVISIONS (FILETYPE);
CREATE INDEX RESOURCE_REVISIONS_RESOURCE_ID ON RESOURCE_REVISIONS (RESOURCE_ID);
CREATE INDEX RESOURCES_ACTIVITY_ID ON RESOURCES (ACTIVITY_ID);
CREATE INDEX RESOURCES_ACTIVITY_TYPE ON RESOURCES (ACTIVITY_TYPE);
CREATE INDEX RESOURCES_CREATED_BY ON RESOURCES (CREATED_BY);
CREATE INDEX RESOURCES_FILETYPE ON RESOURCES (FILETYPE);
CREATE INDEX RESOURCES_LOCATION ON RESOURCES (LOCATION);
CREATE INDEX RESOURCES_PARENT_ID ON RESOURCES (PARENT_ID);
CREATE INDEX RESOURCES_PARENT_REVISION_ID ON RESOURCES (PARENT_REVISION_ID);
CREATE INDEX RESOURCES_SERVICES ON RESOURCES (SERVICES);
CREATE INDEX RESOURCES_STATUS ON RESOURCES (STATUS);
CREATE INDEX RESOURCES_SUBJECT_ID ON RESOURCES (SUBJECT_ID);
CREATE INDEX RESOURCES_TEST_ID ON RESOURCES (TEST_ID);
CREATE INDEX RESOURCES_TYPE_ ON RESOURCES (TYPE_);
CREATE INDEX ROOMS_STATUS ON ROOMS (STATUS);
CREATE INDEX ROOMS_TYPE_ ON ROOMS (TYPE_);
CREATE INDEX ROOMS_VOLUME ON ROOMS (VOLUME);
CREATE INDEX ROOMS2COURSE_CID ON ROOMS2COURSE (CID);
CREATE INDEX ROOMS2COURSE_RID ON ROOMS2COURSE (RID);
CREATE INDEX S_CHANNELS_SUBJECT_ID ON SUBSCRIPTION_CHANNELS (SUBJECT_ID);
CREATE INDEX SC_LESSON_ID ON SUBSCRIPTION_CHANNELS (LESSON_ID);
CREATE INDEX SCALE_VALUES_SCALE_ID ON SCALE_VALUES (SCALE_ID);
CREATE INDEX SCALE_VALUES_VALUE ON SCALE_VALUES (VALUE);
CREATE INDEX SCALES_TYPE_ ON SCALES (TYPE_);
CREATE INDEX SCHEDULE_ALL_ ON SCHEDULE (ALL_);
CREATE INDEX SCHEDULE_CHID ON SCHEDULE (CHID);
CREATE INDEX SCHEDULE_CID ON SCHEDULE (CID);
CREATE INDEX SCHEDULE_COND_OPERATION ON SCHEDULE (COND_OPERATION);
CREATE INDEX SCHEDULE_COND_SHEID ON SCHEDULE (COND_SHEID);
CREATE INDEX SCHEDULE_CREATEID ON SCHEDULE (CREATEID);
CREATE INDEX SCHEDULE_GID ON SCHEDULE (GID);
CREATE INDEX SCHEDULE_ISFREE ON SCHEDULE (ISFREE);
CREATE INDEX SCHEDULE_MARKS_HISTORY_MARK ON SCHEDULE_MARKS_HISTORY (MARK);
CREATE INDEX SCHEDULE_MARKS_HISTORY_MID ON SCHEDULE_MARKS_HISTORY (MID);
CREATE INDEX SCHEDULE_MARKS_HISTORY_SSID ON SCHEDULE_MARKS_HISTORY (SSID);
CREATE INDEX SCHEDULE_MODERATOR ON SCHEDULE (MODERATOR);
CREATE INDEX SCHEDULE_NOTICE ON SCHEDULE (NOTICE);
CREATE INDEX SCHEDULE_NOTICE_DAYS ON SCHEDULE (NOTICE_DAYS);
CREATE INDEX SCHEDULE_ORDER_ ON SCHEDULE (ORDER_);
CREATE INDEX SCHEDULE_PERM ON SCHEDULE (PERM);
CREATE INDEX SCHEDULE_PUB ON SCHEDULE (PUB);
CREATE INDEX SCHEDULE_RECOMMEND ON SCHEDULE (RECOMMEND);
CREATE INDEX SCHEDULE_RID ON SCHEDULE (RID);
CREATE INDEX SCHEDULE_SECTION_ID ON SCHEDULE (SECTION_ID);
CREATE INDEX SCHEDULE_SHAREPOINTID ON SCHEDULE (SHAREPOINTID);
CREATE INDEX SCHEDULE_STARTDAY ON SCHEDULE (STARTDAY);
CREATE INDEX SCHEDULE_STOPDAY ON SCHEDULE (STOPDAY);
CREATE INDEX SCHEDULE_TEACHER ON SCHEDULE (TEACHER);
CREATE INDEX SCHEDULE_TIMETYPE ON SCHEDULE (TIMETYPE);
CREATE INDEX SCHEDULE_TYPEID ON SCHEDULE (TYPEID);
CREATE INDEX SCHEDULE_VEDOMOST ON SCHEDULE (VEDOMOST);
CREATE INDEX SCHEDULEID_CHIEF ON SCHEDULEID (CHIEF);
CREATE INDEX SCHEDULEID_EMAILREMIND ON SCHEDULEID (EMAILREMIND);
CREATE INDEX SCHEDULEID_GID ON SCHEDULEID (GID);
CREATE INDEX SCHEDULEID_ICQREMIND ON SCHEDULEID (ICQREMIND);
CREATE INDEX SCHEDULEID_ISTUDREMIND ON SCHEDULEID (ISTUDREMIND);
CREATE INDEX SCHEDULEID_MID ON SCHEDULEID (MID);
CREATE INDEX SCHEDULEID_SHEID ON SCHEDULEID (SHEID);
CREATE INDEX SCHEDULEID_SMSREMIND ON SCHEDULEID (SMSREMIND);
CREATE INDEX SCHEDULEID_TEST_CORR ON SCHEDULEID (TEST_CORR);
CREATE INDEX SCHEDULEID_TEST_TRIES ON SCHEDULEID (TEST_TRIES);
CREATE INDEX SCHEDULEID_TEST_WRONG ON SCHEDULEID (TEST_WRONG);
CREATE INDEX SCHEDULEID_V_DONE ON SCHEDULEID (V_DONE);
CREATE INDEX SCHEDULEID_V_STATUS ON SCHEDULEID (V_STATUS);
CREATE INDEX SCORM_REPORT_CID ON SCORM_REPORT (CID);
CREATE INDEX SCORM_REPORT_LESSON_ID ON SCORM_REPORT (LESSON_ID);
CREATE INDEX SCORM_REPORT_MID ON SCORM_REPORT (MID);
CREATE INDEX SCORM_TRACKLOG_CID ON SCORM_TRACKLOG (CID);
CREATE INDEX SCORM_TRACKLOG_LESSON_ID ON SCORM_TRACKLOG (LESSON_ID);
CREATE INDEX SCORM_TRACKLOG_MCID ON SCORM_TRACKLOG (MCID);
CREATE INDEX SCORM_TRACKLOG_MID ON SCORM_TRACKLOG (MID);
CREATE INDEX SCORM_TRACKLOG_MODID ON SCORM_TRACKLOG (MODID);
CREATE INDEX SE_CHANNEL_ID ON SUBSCRIPTION_ENTRIES (CHANNEL_ID);
CREATE INDEX SEANCE_CID ON SEANCE (CID);
CREATE INDEX SEANCE_MID ON SEANCE (MID);
CREATE INDEX SEANCE_STID ON SEANCE (STID);
CREATE INDEX SEANCE_TID ON SEANCE (TID);
CREATE INDEX SECTIONS_ORDER_ ON SECTIONS (ORDER_);
CREATE INDEX SECTIONS_SUBJECT_ID ON SECTIONS (SUBJECT_ID);
CREATE INDEX SEQUENCE_CURRENT_CID ON SEQUENCE_CURRENT (CID);
CREATE INDEX SEQUENCE_CURRENT_LESSON_ID ON SEQUENCE_CURRENT (LESSON_ID);
CREATE INDEX SEQUENCE_CURRENT_MID ON SEQUENCE_CURRENT (MID);
CREATE INDEX SEQUENCE_CURRENT_SUBJECT_ID ON SEQUENCE_CURRENT (SUBJECT_ID);
CREATE INDEX SEQUENCE_HISTORY_CID ON SEQUENCE_HISTORY (CID);
CREATE INDEX SEQUENCE_HISTORY_LID ON SEQUENCE_HISTORY (LESSON_ID);
CREATE INDEX SEQUENCE_HISTORY_MID ON SEQUENCE_HISTORY (MID);
CREATE INDEX SEQUENCE_HISTORY_SUBID ON SEQUENCE_HISTORY (SUBJECT_ID);
CREATE INDEX SESSIONS_COOKIE ON SESSIONS (COOKIE);
CREATE INDEX SESSIONS_JS ON SESSIONS (JS);
CREATE INDEX SESSIONS_LOGOUT ON SESSIONS (LOGOUT);
CREATE INDEX SESSIONS_MID ON SESSIONS (MID);
CREATE INDEX SOO_DISPLAY_RESULTS ON STRUCTURE_OF_ORGAN (DISPLAY_RESULTS);
CREATE INDEX SOO_ENEMY_RESULTS ON STRUCTURE_OF_ORGAN (ENEMY_RESULTS);
CREATE INDEX SOO_SPECIALIZATION ON STRUCTURE_OF_ORGAN (SPECIALIZATION);
CREATE INDEX SOP_STATE_OF_PROCESS_ID ON STATE_OF_PROCESS (STATE_OF_PROCESS_ID);
CREATE INDEX SP_RESTRICTION_TYPE ON SUBJECTS (PERIOD_RESTRICTION_TYPE);
CREATE INDEX STATE_OF_PROCESS_ITEM_ID ON STATE_OF_PROCESS (ITEM_ID);
CREATE INDEX STATE_OF_PROCESS_PROCESS_ID ON STATE_OF_PROCESS (PROCESS_ID);
CREATE INDEX STATE_OF_PROCESS_PROCESS_TYPE ON STATE_OF_PROCESS (PROCESS_TYPE);
CREATE INDEX STATE_OF_PROCESS_STATUS ON STATE_OF_PROCESS (STATUS);
CREATE INDEX STORAGE_FILESYSTEM_ID ON STORAGE_FILESYSTEM (ID);
CREATE INDEX STORAGE_FILESYSTEM_IS_FILE ON STORAGE_FILESYSTEM (IS_FILE);
CREATE INDEX STORAGE_FILESYSTEM_PARENT_ID ON STORAGE_FILESYSTEM (PARENT_ID);
CREATE INDEX STORAGE_FILESYSTEM_SUBJECT_ID ON STORAGE_FILESYSTEM (SUBJECT_ID);
CREATE INDEX STORAGE_FILESYSTEM_USER_ID ON STORAGE_FILESYSTEM (USER_ID);
CREATE INDEX STRUCTURE_OF_ORGAN_AGREEM ON STRUCTURE_OF_ORGAN (AGREEM);
CREATE INDEX STRUCTURE_OF_ORGAN_CLAIMANT ON STRUCTURE_OF_ORGAN (CLAIMANT);
CREATE INDEX STRUCTURE_OF_ORGAN_IS_MANAGER ON STRUCTURE_OF_ORGAN (IS_MANAGER);
CREATE INDEX STRUCTURE_OF_ORGAN_LEVEL_ ON STRUCTURE_OF_ORGAN (LEVEL_);
CREATE INDEX STRUCTURE_OF_ORGAN_LFT ON STRUCTURE_OF_ORGAN (LFT);
CREATE INDEX STRUCTURE_OF_ORGAN_MID ON STRUCTURE_OF_ORGAN (MID);
CREATE INDEX STRUCTURE_OF_ORGAN_OWN_RESULTS ON STRUCTURE_OF_ORGAN (OWN_RESULTS);
CREATE INDEX STRUCTURE_OF_ORGAN_OWNER_SOID ON STRUCTURE_OF_ORGAN (OWNER_SOID);
CREATE INDEX STRUCTURE_OF_ORGAN_RGT ON STRUCTURE_OF_ORGAN (RGT);
CREATE INDEX STRUCTURE_OF_ORGAN_THRESHOLD ON STRUCTURE_OF_ORGAN (THRESHOLD);
CREATE INDEX STRUCTURE_OF_ORGAN_TYPE_ ON STRUCTURE_OF_ORGAN (TYPE_);
CREATE INDEX STUDENTS_CGID ON STUDENTS (CGID);
CREATE INDEX STUDENTS_CID ON STUDENTS (CID);
CREATE INDEX STUDENTS_MID ON STUDENTS (MID);
CREATE INDEX STUDENTS_REGISTERED ON STUDENTS (REGISTERED);
CREATE INDEX SUBJECTS_ACCESS_ELEMENTS ON SUBJECTS (ACCESS_ELEMENTS);
CREATE INDEX SUBJECTS_ACCESS_MODE ON SUBJECTS (ACCESS_MODE);
CREATE INDEX SUBJECTS_AUTO_DONE ON SUBJECTS (AUTO_DONE);
CREATE INDEX SUBJECTS_AUTO_GRADUATE ON SUBJECTS (AUTO_GRADUATE);
CREATE INDEX SUBJECTS_AUTO_MARK ON SUBJECTS (AUTO_MARK);
CREATE INDEX SUBJECTS_BASE ON SUBJECTS (BASE);
CREATE INDEX SUBJECTS_BASE_ID ON SUBJECTS (BASE_ID);
CREATE INDEX SUBJECTS_CLAIMANT_PROCESS_ID ON SUBJECTS (CLAIMANT_PROCESS_ID);
CREATE INDEX SUBJECTS_COURSES_COURSE_ID ON SUBJECTS_COURSES (COURSE_ID);
CREATE INDEX SUBJECTS_COURSES_SUBJECT_ID ON SUBJECTS_COURSES (SUBJECT_ID);
CREATE INDEX SUBJECTS_EXERCISES_EXERCISE_ID ON SUBJECTS_EXERCISES (EXERCISE_ID);
CREATE INDEX SUBJECTS_EXERCISES_SUBJECT_ID ON SUBJECTS_EXERCISES (SUBJECT_ID);
CREATE INDEX SUBJECTS_FORMULA_ID ON SUBJECTS (FORMULA_ID);
CREATE INDEX SUBJECTS_LONGTIME ON SUBJECTS (LONGTIME);
CREATE INDEX SUBJECTS_MODE_FREE_LIMIT ON SUBJECTS (MODE_FREE_LIMIT);
CREATE INDEX SUBJECTS_PERIOD ON SUBJECTS (PERIOD);
CREATE INDEX SUBJECTS_PLAN_USERS ON SUBJECTS (PLAN_USERS);
CREATE INDEX SUBJECTS_QUIZZES_QUIZ_ID ON SUBJECTS_QUIZZES (QUIZ_ID);
CREATE INDEX SUBJECTS_QUIZZES_SUBJECT_ID ON SUBJECTS_QUIZZES (SUBJECT_ID);
CREATE INDEX SUBJECTS_RESOURCES_RESOURCE_ID ON SUBJECTS_RESOURCES (RESOURCE_ID);
CREATE INDEX SUBJECTS_RESOURCES_SUBJECT_ID ON SUBJECTS_RESOURCES (SUBJECT_ID);
CREATE INDEX SUBJECTS_SCALE_ID ON SUBJECTS (SCALE_ID);
CREATE INDEX SUBJECTS_SERVICES ON SUBJECTS (SERVICES);
CREATE INDEX SUBJECTS_STATE_ ON SUBJECTS (STATE_);
CREATE INDEX SUBJECTS_SUPPLIER_ID ON SUBJECTS (SUPPLIER_ID);
CREATE INDEX SUBJECTS_TASKS_SUBJECT_ID ON SUBJECTS_TASKS (SUBJECT_ID);
CREATE INDEX SUBJECTS_TASKS_TASK_ID ON SUBJECTS_TASKS (TASK_ID);
CREATE INDEX SUBJECTS_TESTS_SUBJECT_ID ON SUBJECTS_TESTS (SUBJECT_ID);
CREATE INDEX SUBJECTS_TESTS_TEST_ID ON SUBJECTS_TESTS (TEST_ID);
CREATE INDEX SUBJECTS_THRESHOLD ON SUBJECTS (THRESHOLD);
CREATE INDEX SUBSCRIPTION_ENTRIES_AUTHOR ON SUBSCRIPTION_ENTRIES (AUTHOR);
CREATE INDEX SUBSCRIPTIONS_CHANNEL_ID ON SUBSCRIPTIONS (CHANNEL_ID);
CREATE INDEX SUBSCRIPTIONS_USER_ID ON SUBSCRIPTIONS (USER_ID);
CREATE INDEX TAG_REF_ITEM_ID ON TAG_REF (ITEM_ID);
CREATE INDEX TAG_REF_ITEM_TYPE ON TAG_REF (ITEM_TYPE);
CREATE INDEX TAG_REF_TAG_ID ON TAG_REF (TAG_ID);
CREATE INDEX TASKS_CREATED_BY ON TASKS (CREATED_BY);
CREATE INDEX TASKS_LOCATION ON TASKS (LOCATION);
CREATE INDEX TASKS_QUESTIONS ON TASKS (QUESTIONS);
CREATE INDEX TASKS_STATUS ON TASKS (STATUS);
CREATE INDEX TASKS_SUBJECT_ID ON TASKS (SUBJECT_ID);
CREATE INDEX TEACHERS_CID ON TEACHERS (CID);
CREATE INDEX TEACHERS_MID ON TEACHERS (MID);
CREATE INDEX TEST_ABSTRACT_CREATED_BY ON TEST_ABSTRACT (CREATED_BY);
CREATE INDEX TEST_ABSTRACT_LOCATION ON TEST_ABSTRACT (LOCATION);
CREATE INDEX TEST_ABSTRACT_QUESTIONS ON TEST_ABSTRACT (QUESTIONS);
CREATE INDEX TEST_ABSTRACT_STATUS ON TEST_ABSTRACT (STATUS);
CREATE INDEX TEST_ABSTRACT_SUBJECT_ID ON TEST_ABSTRACT (SUBJECT_ID);
CREATE INDEX TEST_ADAPTIVE ON TEST (ADAPTIVE);
CREATE INDEX TEST_CACHE_QTY ON TEST (CACHE_QTY);
CREATE INDEX TEST_CID ON TEST (CID);
CREATE INDEX TEST_CIDOWNER ON TEST (CIDOWNER);
CREATE INDEX TEST_CREATED_BY ON TEST (CREATED_BY);
CREATE INDEX TEST_DATATYPE ON TEST (DATATYPE);
CREATE INDEX TEST_ENDRES ON TEST (ENDRES);
CREATE INDEX TEST_FEEDBACK_PARENT ON TEST_FEEDBACK (PARENT);
CREATE INDEX TEST_FEEDBACK_SHOW_EVENT ON TEST_FEEDBACK (SHOW_EVENT);
CREATE INDEX TEST_FEEDBACK_TEST_ID ON TEST_FEEDBACK (TEST_ID);
CREATE INDEX TEST_FEEDBACK_TRESHOLD_MAX ON TEST_FEEDBACK (TRESHOLD_MAX);
CREATE INDEX TEST_FEEDBACK_TRESHOLD_MIN ON TEST_FEEDBACK (TRESHOLD_MIN);
CREATE INDEX TEST_FEEDBACK_TYPE_ ON TEST_FEEDBACK (TYPE_);
CREATE INDEX TEST_FREE ON TEST (FREE);
CREATE INDEX TEST_IS_POLL ON TEST (IS_POLL);
CREATE INDEX TEST_LAST ON TEST (LAST);
CREATE INDEX TEST_LASTMID ON TEST (LASTMID);
CREATE INDEX TEST_LESSON_ID ON TEST (LESSON_ID);
CREATE INDEX TEST_LIM ON TEST (LIM);
CREATE INDEX TEST_LIMITCLEAN ON TEST (LIMITCLEAN);
CREATE INDEX TEST_MODE_ ON TEST (MODE_);
CREATE INDEX TEST_POLL_MID ON TEST (POLL_MID);
CREATE INDEX TEST_QTY ON TEST (QTY);
CREATE INDEX TEST_QUESTRES ON TEST (QUESTRES);
CREATE INDEX TEST_RANDOM_ ON TEST (RANDOM_);
CREATE INDEX TEST_RATING ON TEST (RATING);
CREATE INDEX TEST_SHOWOTVET ON TEST (SHOWOTVET);
CREATE INDEX TEST_SHOWURL ON TEST (SHOWURL);
CREATE INDEX TEST_SKIP_ ON TEST (SKIP_);
CREATE INDEX TEST_SORT_ ON TEST (SORT_);
CREATE INDEX TEST_STARTLIMIT ON TEST (STARTLIMIT);
CREATE INDEX TEST_STATUS ON TEST (STATUS);
CREATE INDEX TEST_TEST_ID ON TEST (TEST_ID);
CREATE INDEX TEST_THRESHOLD ON TEST (THRESHOLD);
CREATE INDEX TEST_TIMELIMIT ON TEST (TIMELIMIT);
CREATE INDEX TEST_TYPE_ ON TEST (TYPE_);
CREATE INDEX TESTCOUNT_CID ON TESTCOUNT (CID);
CREATE INDEX TESTCOUNT_LAST ON TESTCOUNT (LAST);
CREATE INDEX TESTCOUNT_LESSON_ID ON TESTCOUNT (LESSON_ID);
CREATE INDEX TESTCOUNT_MID ON TESTCOUNT (MID);
CREATE INDEX TESTCOUNT_QTY ON TESTCOUNT (QTY);
CREATE INDEX TESTCOUNT_TID ON TESTCOUNT (TID);
CREATE INDEX TESTS_QUESTIONS_SUBJECT_ID ON TESTS_QUESTIONS (SUBJECT_ID);
CREATE INDEX TESTS_QUESTIONS_TEST_ID ON TESTS_QUESTIONS (TEST_ID);
CREATE INDEX UPDATES_CREATED_BY ON UPDATES (CREATED_BY);
CREATE INDEX USER_LOGIN_LOG_EVENT_TYPE ON USER_LOGIN_LOG (EVENT_TYPE);
CREATE INDEX USER_LOGIN_LOG_IP ON USER_LOGIN_LOG (IP);
CREATE INDEX USER_LOGIN_LOG_STATUS ON USER_LOGIN_LOG (STATUS);
CREATE INDEX VIDEO_CREATED ON VIDEO (CREATED);
CREATE INDEX VIDEO_MAIN_VIDEO ON VIDEO (MAIN_VIDEO);
CREATE INDEX VIDEOCHAT_USERS_USERID ON VIDEOCHAT_USERS (USERID);
CREATE INDEX WEBINAR_ANSWERS_QID ON WEBINAR_ANSWERS (QID);
CREATE INDEX WEBINAR_CHAT_POINTID ON WEBINAR_CHAT (POINTID);
CREATE INDEX WEBINAR_CHAT_USERID ON WEBINAR_CHAT (USERID);
CREATE INDEX WEBINAR_FILES_FILE_ID ON WEBINAR_FILES (FILE_ID);
CREATE INDEX WEBINAR_FILES_NUM ON WEBINAR_FILES (NUM);
CREATE INDEX WEBINAR_FILES_WEBINAR_ID ON WEBINAR_FILES (WEBINAR_ID);
CREATE INDEX WEBINAR_HISTORY_POINTID ON WEBINAR_HISTORY (POINTID);
CREATE INDEX WEBINAR_HISTORY_USERID ON WEBINAR_HISTORY (USERID);
CREATE INDEX WEBINAR_PLAN_BID ON WEBINAR_PLAN (BID);
CREATE INDEX WEBINAR_PLAN_POINTID ON WEBINAR_PLAN (POINTID);
CREATE INDEX WEBINAR_QUESTIONS_IS_VOTED ON WEBINAR_QUESTIONS (IS_VOTED);
CREATE INDEX WEBINAR_QUESTIONS_POINT_ID ON WEBINAR_QUESTIONS (POINT_ID);
CREATE INDEX WEBINAR_QUESTIONS_TYPE_ ON WEBINAR_QUESTIONS (TYPE_);
CREATE INDEX WEBINAR_RECORDS_SUBJECT_ID ON WEBINAR_RECORDS (SUBJECT_ID);
CREATE INDEX WEBINAR_RECORDS_WEBINAR_ID ON WEBINAR_RECORDS (WEBINAR_ID);
CREATE INDEX WEBINAR_USERS_POINTID ON WEBINAR_USERS (POINTID);
CREATE INDEX WEBINAR_USERS_USERID ON WEBINAR_USERS (USERID);
CREATE INDEX WEBINAR_VOTES_AID ON WEBINAR_VOTES (AID);
CREATE INDEX WEBINAR_VOTES_QID ON WEBINAR_VOTES (QID);
CREATE INDEX WEBINAR_VOTES_USER_ID ON WEBINAR_VOTES (USER_ID);
CREATE INDEX WEBINAR_WHITEBOARD_COLOR ON WEBINAR_WHITEBOARD (COLOR);
CREATE INDEX WEBINAR_WHITEBOARD_HEIGHT ON WEBINAR_WHITEBOARD (HEIGHT);
CREATE INDEX WEBINAR_WHITEBOARD_POINTID ON WEBINAR_WHITEBOARD (POINTID);
CREATE INDEX WEBINAR_WHITEBOARD_POINTS_X ON WEBINAR_WHITEBOARD_POINTS (X);
CREATE INDEX WEBINAR_WHITEBOARD_POINTS_Y ON WEBINAR_WHITEBOARD_POINTS (Y);
CREATE INDEX WEBINAR_WHITEBOARD_TOOL ON WEBINAR_WHITEBOARD (TOOL);
CREATE INDEX WEBINAR_WHITEBOARD_USERID ON WEBINAR_WHITEBOARD (USERID);
CREATE INDEX WEBINAR_WHITEBOARD_WIDTH ON WEBINAR_WHITEBOARD (WIDTH);
CREATE INDEX WEBINARS_SUBJECT_ID ON WEBINARS (SUBJECT_ID);
CREATE INDEX WIKI_ARCHIVE_ARTICLE_ID ON WIKI_ARCHIVE (ARTICLE_ID);
CREATE INDEX WIKI_ARCHIVE_AUTHOR ON WIKI_ARCHIVE (AUTHOR);
CREATE INDEX WIKI_ARTICLES_LESSON_ID ON WIKI_ARTICLES (LESSON_ID);
CREATE INDEX WIKI_ARTICLES_SUBJECT_ID ON WIKI_ARTICLES (SUBJECT_ID);
CREATE INDEX WP_CURRENT_CURRENTITEM ON WEBINAR_PLAN_CURRENT (CURRENTITEM);
CREATE INDEX WW_POINTS_ACTIONID ON WEBINAR_WHITEBOARD_POINTS (ACTIONID);
CREATE INDEX WW_POINTS_TYPE_ ON WEBINAR_WHITEBOARD_POINTS (TYPE_);


CREATE TABLE AT_CRITERIA_TEST (
  CRITERION_ID NUMBER(10) NOT NULL,
  LFT NUMBER(10) DEFAULT 0 NOT NULL,
  RGT NUMBER(10) DEFAULT 0 NOT NULL,
  LEVEL_ NUMBER(10) DEFAULT 0 NOT NULL,
  NAME VARCHAR2(255),
  QUEST_ID NUMBER(10) DEFAULT 0 NOT NULL ,  
  SUBJECT_ID NUMBER(10) DEFAULT 0 NOT NULL ,
  TEST_ID NUMBER(10) DEFAULT 0 NOT NULL,
  CONSTRAINT AT_CRITERIA_TEST_PK PRIMARY KEY (CRITERION_ID)
);

CREATE TABLE AT_KPIS (
  KPI_ID NUMBER(10) NOT NULL,
  NAME VARCHAR2(255),
  IS_TYPICAL NUMBER(10) DEFAULT 0 NOT NULL,
  CONSTRAINT AT_KPIS_PK PRIMARY KEY (KPI_ID)
);

CREATE TABLE AT_USER_KPIS (
  USER_KPI_ID NUMBER(10) NOT NULL,
  USER_ID NUMBER(10) DEFAULT 0 NOT NULL,
  CYCLE_ID NUMBER(10) DEFAULT 0 NOT NULL,
  KPI_ID NUMBER(10),
  WEIGHT FLOAT,
  VALUE_PLAN VARCHAR2(32),
  VALUE_FACT VARCHAR2(32),
  CONSTRAINT AT_USER_KPIS_PK PRIMARY KEY (USER_KPI_ID)
);




CREATE INDEX ALT_MARK_ID ON ALT_MARK
(ID)
;


CREATE INDEX CAM_CASTING_CID ON CAM_CASTING
(CID)
;

CREATE INDEX CAM_CASTING_MID ON CAM_CASTING
(MID)
;

CREATE INDEX CAM_CASTING_SHEID ON CAM_CASTING
(SHEID)
;

CREATE INDEX CHAT_CID ON CHAT
(CID)
;

CREATE INDEX CHAT_TYPE ON CHAT
(TYPE_)
;

CREATE INDEX CHAT_MESSAGES_CID ON CHAT_MESSAGES
(CID)
;

CREATE INDEX CHAT_MESSAGES_UID ON CHAT_MESSAGES
(UID_)
;

CREATE INDEX CHAT_USERS_CID ON CHAT_USERS
(CID)
;

CREATE INDEX CLAIMANTS_CID ON CLAIMANTS
(CID)
;

CREATE INDEX CLAIMANTS_MID ON CLAIMANTS
(MID)
;

CREATE INDEX CLAIMANTS_BS ON CLAIMANTS
(BASE_SUBJECT)
;

CREATE INDEX CLASSIFIERS_LFT ON CLASSIFIERS
(LFT)
;

CREATE INDEX CLASSIFIERS_RGT ON CLASSIFIERS
(RGT)
;

CREATE INDEX COMMENTS_AN ON COMMENTS
(ACTIVITY_NAME)
;

CREATE INDEX COMMENTS_SN ON COMMENTS
(SUBJECT_NAME)
;

CREATE INDEX COMMENTS_SID ON COMMENTS
(SUBJECT_ID)
;

CREATE INDEX COMMENTS_UID ON COMMENTS
(USER_ID)
;

CREATE INDEX COMMENTS_IID ON COMMENTS
(ITEM_ID)
;

CREATE INDEX COMP2COURSE_CID ON COMP2COURSE
(CID)
;

CREATE INDEX COMP2COURSE_TID ON COMP2COURSE
(TID)
;

CREATE INDEX COMP2COURSE_COID ON COMP2COURSE
(COID)
;

CREATE INDEX COURSE2GROUP_CID ON COURSE2GROUP
(CID)
;

CREATE INDEX COURSE2GROUP_GID ON COURSE2GROUP
(GID)
;

CREATE INDEX COURSE2GROUP_CGID ON COURSE2GROUP
(CGID)
;

CREATE INDEX COURSES_STAT_CID ON COURSES_STAT
(CID)
;

CREATE INDEX COURSES_STAT_MID ON COURSES_STAT
(MID)
;

CREATE INDEX DEANS_MID ON DEANS
(MID)
;

CREATE INDEX DEAN_POLL_USERS_LID ON DEAN_POLL_USERS
(LESSON_ID)
;

CREATE INDEX DEAN_POLL_USERS_HMID ON DEAN_POLL_USERS
(HEAD_MID)
;

CREATE INDEX DEAN_POLL_USERS_SMID ON DEAN_POLL_USERS
(STUDENT_MID)
;

CREATE INDEX DEANS_OPTIONS_UID ON DEANS_OPTIONS
(USER_ID)
;

CREATE INDEX DEANS_OPTIONS_USID ON DEANS_OPTIONS
(UNLIMITED_SUBJECTS)
;

CREATE INDEX DEANS_OPTIONS_UCID ON DEANS_OPTIONS
(UNLIMITED_CLASSIFIERS)
;

CREATE INDEX DEANS_OPTIONS_ANSID ON DEANS_OPTIONS
(ASSIGN_NEW_SUBJECTS)
;

CREATE INDEX DEPARTMENTS_MID ON DEPARTMENTS
(MID)
;

CREATE INDEX DEPARTMENTS_AID ON DEPARTMENTS
(APPLICATION)
;

CREATE INDEX DISPATCHERS_MID ON DISPATCHERS
(MID)
;

CREATE INDEX DISPATCHERS_CID ON DISPATCHERS
(CID)
;

CREATE INDEX FORUMCATEGORIES_CMS ON FORUMCATEGORIES
(CMS)
;

CREATE INDEX FORUMCATEGORIES_CID ON FORUMCATEGORIES
(CID)
;

CREATE INDEX FORUMMESSAGES_THREAD ON FORUMMESSAGES
(THREAD)
;

CREATE INDEX FORUMMESSAGES_MID ON FORUMMESSAGES
(MID)
;

CREATE INDEX FORUMMESSAGES_IS_TOPIC ON FORUMMESSAGES
(IS_TOPIC)
;

CREATE INDEX FORUMMESSAGES_OID ON FORUMMESSAGES
(OID)
;

CREATE INDEX FORUMMESSAGES_PARENT ON FORUMMESSAGES
(PARENT)
;

CREATE INDEX FORUMMESSAGES_TYPE ON FORUMMESSAGES
(TYPE_)
;

CREATE INDEX FORUMTHREADS_CATEGORY ON FORUMTHREADS
(CATEGORY)
;

CREATE INDEX GRADUATED_MID ON GRADUATED
(MID)
;

CREATE INDEX GRADUATED_CID ON GRADUATED
(CID)
;

CREATE INDEX CERTIFICATES_USERID ON CERTIFICATES
(USER_ID)
;

CREATE INDEX CERTIFICATES_SUBJECTID ON CERTIFICATES
(SUBJECT_ID)
;

CREATE INDEX GROUPNAME_CID ON GROUPNAME
(CID)
;

CREATE INDEX GROUPUSER_MID ON GROUPUSER
(MID)
;

CREATE INDEX GROUPUSER_CID ON GROUPUSER
(CID)
;

CREATE INDEX GROUPUSER_GID ON GROUPUSER
(GID)
;

CREATE INDEX KNIGI_CID ON KNIGI
(CID)
;

CREATE INDEX LIST_QTYPE ON LIST
(QTYPE)
;

CREATE INDEX LIST_IS_POLL ON LIST
(IS_POLL)
;

CREATE INDEX STIDIDX ON LOGSEANCE
(STID)
;

CREATE INDEX LOGSEANCE_MID ON LOGSEANCE
(MID)
;

CREATE INDEX LOGSEANCE_CID ON LOGSEANCE
(CID)
;

CREATE INDEX LOGSEANCE_KOD ON LOGSEANCE
(KOD)
;

CREATE INDEX LOGSEANCE_SHEID ON LOGSEANCE
(SHEID)
;

CREATE INDEX LOGUSER_MID_IDX ON LOGUSER
(MID)
;

CREATE INDEX LOGUSER_TID_IDX ON LOGUSER
(TID)
;

CREATE INDEX LOGUSER_CID ON LOGUSER
(CID)
;

CREATE INDEX LOGUSER_SHEID ON LOGUSER
(SHEID)
;

CREATE INDEX MONEY_MID ON MONEY
(MID)
;

CREATE INDEX NEWS_SID ON NEWS
(SUBJECT_ID)
;

CREATE INDEX OAUTH_TOKENS_AID ON OAUTH_TOKENS
(APP_ID)
;

CREATE INDEX OAUTH_TOKENS_UID ON OAUTH_TOKENS
(USER_ID)
;

CREATE INDEX OAUTH_NONCES_AID ON OAUTH_NONCES
(APP_ID)
;

CREATE INDEX OFFLINES_SUBID ON OFFLINES
(SUBJECT_ID)
;

CREATE INDEX ORGANIZATIONS_PREVREF ON ORGANIZATIONS
(PREV_REF)
;

CREATE INDEX ORGANIZATIONS_VOL1 ON ORGANIZATIONS
(VOL1)
;

CREATE INDEX ORGANIZATIONS_VOL2 ON ORGANIZATIONS
(VOL2)
;

CREATE INDEX ORGANIZATIONS_CID ON ORGANIZATIONS
(CID)
;

CREATE INDEX ORGANIZATIONS_LEVEL ON ORGANIZATIONS
(LEVEL_)
;

CREATE INDEX ORGANIZATIONS_MODULE ON ORGANIZATIONS
(MODULE)
;

CREATE INDEX PASSWORD_HISTORY_UID ON PASSWORD_HISTORY
(USER_ID)
;

CREATE INDEX PERMISSION2MID_MID ON PERMISSION2MID
(MID)
;

CREATE INDEX PERMISSION2MID_PMID ON PERMISSION2MID
(PMID)
;

CREATE INDEX RECKONING_COURSES_TRID ON RECKONING_COURSES
(TRID)
;

CREATE INDEX RECKONING_COURSES_CID ON RECKONING_COURSES
(CID)
;

CREATE INDEX RECKONING_COURSES_MID ON RECKONING_COURSES
(MID)
;

CREATE INDEX ROOMS2COURSE_RID ON ROOMS2COURSE
(RID)
;

CREATE INDEX ROOMS2COURSE_CID ON ROOMS2COURSE
(CID)
;

CREATE INDEX SCHEDULE_BEGIN ON SCHEDULE
(BEGIN_)
;

CREATE INDEX SCHEDULE_END ON SCHEDULE
(END_)
;

CREATE INDEX SCHEDULE_TYPEID ON SCHEDULE
(TYPEID)
;

CREATE INDEX SCHEDULE_VEDOMOST ON SCHEDULE
(VEDOMOST)
;

CREATE INDEX SCHEDULE_CID ON SCHEDULE
(CID)
;

CREATE INDEX SCHEDULE_CHID ON SCHEDULE
(CHID)
;

CREATE INDEX SCHEDULE_PERIOD ON SCHEDULE
(PERIOD)
;

CREATE INDEX SCHEDULE_RID ON SCHEDULE
(RID)
;

CREATE INDEX SCHEDULE_GID ON SCHEDULE
(GID)
;

CREATE INDEX SCHEDULEID_MID ON SCHEDULEID
(MID)
;

CREATE INDEX SCHEDULEID_SHEID ON SCHEDULEID
(SHEID)
;

CREATE INDEX SCHEDULE_MARKS_HISTORY_MID ON SCHEDULE_MARKS_HISTORY
(MID)
;

CREATE INDEX SCHEDULE_MARKS_HISTORY_SSID ON SCHEDULE_MARKS_HISTORY
(SSID)
;

CREATE INDEX SEANCE_MID ON SEANCE
(MID)
;

CREATE INDEX SEANCE_STID ON SEANCE
(STID)
;

CREATE INDEX SEANCE_CID ON SEANCE
(CID)
;

CREATE INDEX SEANCE_TID ON SEANCE
(TID)
;

CREATE INDEX SEANCE_KOD ON SEANCE
(KOD)
;

CREATE INDEX STR_OF_ORG2COMP_COID ON STR_OF_ORGAN2COMPETENCE
(COID)
;

CREATE INDEX STR_OF_ORG2COMP_SOID ON STR_OF_ORGAN2COMPETENCE
(SOID)
;

CREATE INDEX STRUCTURE_OF_ORGAN_MID ON STRUCTURE_OF_ORGAN
(MID)
;

CREATE INDEX STRUCTURE_OF_ORGAN_OWNER_SOID ON STRUCTURE_OF_ORGAN
(OWNER_SOID)
;

CREATE INDEX STRUCTURE_OF_ORGAN_TYPE ON STRUCTURE_OF_ORGAN
(TYPE_)
;

CREATE INDEX STRUCTURE_OF_ORGAN_CLAIMANT ON STRUCTURE_OF_ORGAN
(CLAIMANT)
;

CREATE INDEX STUDENTS_MID ON STUDENTS
(MID)
;

CREATE INDEX STUDENTS_CID ON STUDENTS
(CID)
;

CREATE INDEX TEACHERS_MID ON TEACHERS
(MID)
;

CREATE INDEX TEACHERS_CID ON TEACHERS
(CID)
;

CREATE INDEX TEST_CID ON TEST
(CID)
;

CREATE INDEX TEST_IS_POLL ON TEST
(IS_POLL)
;

CREATE INDEX TEST_POLL_MID ON TEST
(POLL_MID)
;

CREATE INDEX TEST_FEEDBACK_PARENT ON TEST_FEEDBACK
(PARENT)
;

CREATE INDEX TEST_FEEDBACK_TYPE ON TEST_FEEDBACK
(TYPE_)
;

CREATE INDEX TEST_FEEDBACK_TEST_ID ON TEST_FEEDBACK
(TEST_ID)
;

CREATE INDEX TESTS_QUESTIONS_KOD ON TESTS_QUESTIONS
(KOD)
;

CREATE INDEX TESTS_QUESTIONS_TEST_ID ON TESTS_QUESTIONS
(TEST_ID)
;

CREATE INDEX TESTS_QUESTIONS_SUBJECT_ID ON TESTS_QUESTIONS
(SUBJECT_ID)
;

CREATE INDEX INTERVIEW_LID ON INTERVIEW
(LESSON_ID)
;

CREATE INDEX INTERVIEW_UID ON INTERVIEW
(USER_ID)
;

CREATE INDEX LIBRARY_CID ON LIBRARY
(CID)
;

CREATE INDEX LIBRARY_NAL ON LIBRARY
(NEED_ACCESS_LEVEL)
;

CREATE INDEX LIBRARY_IAV ON LIBRARY
(IS_ACTIVE_VERSION)
;

CREATE INDEX LIBRARY_ASSIGN_BID ON LIBRARY_ASSIGN
(BID)
;

CREATE INDEX LIBRARY_ASSIGN_MID ON LIBRARY_ASSIGN
(MID)
;

CREATE INDEX LIBRARY_CATEGORIES_PARENT ON LIBRARY_CATEGORIES
(PARENT)
;

CREATE INDEX LIBRARY_INDEX_MODULE ON LIBRARY_INDEX
(MODULE)
;

CREATE INDEX COURSES_MARKS_MID ON COURSES_MARKS
(MID)
;

CREATE INDEX COURSES_MARKS_CID ON COURSES_MARKS
(CID)
;

CREATE INDEX DEPARTMENTS_GROUPS_DID ON DEPARTMENTS_GROUPS
(DID)
;

CREATE INDEX DEPARTMENTS_GROUPS_GID ON DEPARTMENTS_GROUPS
(GID)
;

CREATE INDEX DEPARTMENTS_TRACKS_DID ON DEPARTMENTS_TRACKS
(DID)
;

CREATE INDEX DEPARTMENTS_TRACKS_TRACK ON DEPARTMENTS_TRACKS
(TRACK)
;

CREATE INDEX DEPARTMENTS_COURSES_DID ON DEPARTMENTS_COURSES
(DID)
;

CREATE INDEX DEPARTMENTS_COURSES_CID ON DEPARTMENTS_COURSES
(CID)
;

CREATE INDEX COMPETENCE_ROLES_FORMULA ON COMPETENCE_ROLES
(FORMULA)
;

CREATE INDEX COMPETENCE_ROLES_COURSES ON COMPETENCE_ROLES
(COURSES)
;

CREATE INDEX COMPETENCE_ROLES_SPECID ON COMPETENCE_ROLES
(SPECIALIZATION)
;

CREATE INDEX COMP_ROL_SPEC_ROLE ON COMPETENCE_ROLES_SPECS
(ROLE)
;

CREATE INDEX COMP_ROL_SPEC_COMP ON COMPETENCE_ROLES_SPECS
(COMPETENCE)
;

CREATE INDEX COMP_ROL_SPEC_SPEC ON COMPETENCE_ROLES_SPECS
(SPECIALIZATION)
;

CREATE INDEX STRUC_OF_ORGAN_ROLES_ROLE ON STRUCTURE_OF_ORGAN_ROLES
(ROLE)
;

CREATE INDEX STRUC_OF_ORGAN_ROLES_SOID ON STRUCTURE_OF_ORGAN_ROLES
(SOID)
;

CREATE INDEX POLLS_PEOPLE_MID ON POLLS_PEOPLE
(MID)
;

CREATE INDEX POLLS_PEOPLE_SOID ON POLLS_PEOPLE
(SOID)
;

CREATE INDEX POLLS_PEOPLE_ROLE ON POLLS_PEOPLE
(ROLE)
;

CREATE INDEX POLLS_PEOPLE_POLL ON POLLS_PEOPLE
(POLL)
;

CREATE INDEX COURSES_GROUPS_MID ON COURSES_GROUPS
(MID)
;

CREATE INDEX POLLS_CRITERIES_MID ON POLLS_CRITERIES
(MID)
;

CREATE INDEX POLLS_CRITERIES_POLL ON POLLS_CRITERIES
(POLL)
;

CREATE INDEX POLLS_CRITERIES_SOID ON POLLS_CRITERIES
(SOID)
;

CREATE INDEX POLLS_CRITERIES_ROLE ON POLLS_CRITERIES
(ROLE)
;

CREATE INDEX MANAGERS_MID ON MANAGERS
(MID)
;

CREATE INDEX DEVELOPERS_MID ON DEVELOPERS
(MID)
;

CREATE INDEX DEVELOPERS_CID ON DEVELOPERS
(CID)
;

CREATE INDEX METHODOLOGIST_CID ON METHODOLOGIST
(CID)
;

CREATE INDEX METHODOLOGIST_MID ON METHODOLOGIST
(MID)
;

CREATE INDEX POLLS_STATE_MID ON POLLS_STATE
(MID)
;

CREATE INDEX POLLS_STATE_PID ON POLLS_STATE
(PID)
;

CREATE INDEX POLLS_STATE_STATE ON POLLS_STATE
(STATE)
;

CREATE INDEX POLLS_STATE_INACTIVE ON POLLS_STATE
(INACTIVE)
;

CREATE INDEX STATES_SCOPE ON STATES
(SCOPE)
;

CREATE INDEX STATES_SCOPE_ID ON STATES
(SCOPE_ID)
;

CREATE INDEX STATES_STATE ON STATES
(STATE)
;

CREATE INDEX METADATE_ITEMS_GID ON METADATA_ITEMS
(GROUP_ID)
;

CREATE INDEX SUBJECTS_BEGIN ON SUBJECTS
(BEGIN_)
;

CREATE INDEX SUBJECTS_END ON SUBJECTS
(END_)
;

CREATE INDEX SUBJECTS_TYPE ON SUBJECTS
(TYPE_)
;

CREATE INDEX SUBJECTS_REG_TYPE ON SUBJECTS
(REG_TYPE)
;

CREATE INDEX STATE_OF_PROCESS_ITEM_ID ON STATE_OF_PROCESS
(ITEM_ID)
;

CREATE INDEX STATE_OF_PROCESS_PROCESS_ID ON STATE_OF_PROCESS
(PROCESS_ID)
;
CREATE OR REPLACE PUBLIC SYNONYM GROUP_CONCAT FOR WM_CONCAT;




CREATE OR REPLACE FUNCTION      "CONCAT" (
in_str0     IN VARCHAR2  DEFAULT NULL,
in_str1     IN VARCHAR2  DEFAULT '123')
RETURN VARCHAR2
AS
str0    VARCHAR2(255);
str1    VARCHAR2(255);
StoO_selcnt INTEGER;
StoO_error  INTEGER;
StoO_rowcnt INTEGER;
StoO_crowcnt    INTEGER := 0;
StoO_fetchstatus    INTEGER := 0;
StoO_errmsg VARCHAR2(255);
StoO_sqlstatus  INTEGER;
BEGIN
    CONCAT.str0 := CONCAT.in_str0;
    CONCAT.str1 := CONCAT.in_str1;
    BEGIN
        RETURN CONCAT.str0 || CONCAT.str1;
    END;
    RETURN 0;
END CONCAT;;


CREATE OR REPLACE FUNCTION "DAY" (
in_indate    IN DATE  DEFAULT NULL)
RETURN VARCHAR2
AS
indate DATE;
StoO_selcnt    INTEGER;
StoO_error     INTEGER;
StoO_rowcnt    INTEGER;
StoO_crowcnt    INTEGER := 0;
StoO_fetchstatus    INTEGER := 0;
StoO_errmsg    VARCHAR2(255);
StoO_sqlstatus    INTEGER;
BEGIN
    DAY.indate := DAY.in_indate;
    BEGIN
        RETURN to_char(DAY.indate,'DD');
    END;
    RETURN DAY.indate;
END DAY;;


CREATE OR REPLACE FUNCTION      "FROM_UNIXTIME" (
in_innumber IN NUMBER  DEFAULT NULL)
RETURN VARCHAR2
AS
innumber NUMBER;
StoO_selcnt INTEGER;
StoO_error  INTEGER;
StoO_rowcnt INTEGER;
StoO_crowcnt    INTEGER := 0;
StoO_fetchstatus    INTEGER := 0;
StoO_errmsg VARCHAR2(255);
StoO_sqlstatus  INTEGER;
BEGIN
    FROM_UNIXTIME.innumber := FROM_UNIXTIME.in_innumber;
    BEGIN
        RETURN to_char(
        new_time( to_date('01011970','ddmmyyyy') + 1246060 * FROM_UNIXTIME.innumber,
        'GMT','GMT' ), 'dd-mon-yyyy hh24:mi:ss' );
    END;
    RETURN FROM_UNIXTIME.innumber;
END FROM_UNIXTIME;;


CREATE OR REPLACE FUNCTION      "GREATEST" (
in_first_entry  IN NUMBER  DEFAULT NULL,
in_second_entry     IN NUMBER  DEFAULT NULL)
RETURN NUMBER
AS
first_entry     NUMBER(19,0);
second_entry    NUMBER(19,0);
StoO_selcnt INTEGER;
StoO_error  INTEGER;
StoO_rowcnt INTEGER;
StoO_crowcnt    INTEGER := 0;
StoO_fetchstatus    INTEGER := 0;
StoO_errmsg VARCHAR2(255);
StoO_sqlstatus  INTEGER;
return_value    NUMBER(19,0);
BEGIN
    GREATEST.first_entry := GREATEST.in_first_entry;
    GREATEST.second_entry := GREATEST.in_second_entry;
    BEGIN
        IF  ( GREATEST.first_entry <= GREATEST.second_entry) THEN
            GREATEST.return_value := GREATEST.second_entry;
        ELSE
            GREATEST.return_value  := GREATEST.first_entry;
            RETURN GREATEST.return_value;
        END IF;
    END;
    RETURN 0;
END GREATEST;;

CREATE OR REPLACE FUNCTION "HOUR" (
in_indate    IN DATE  DEFAULT NULL)
RETURN VARCHAR2
AS
indate DATE;
StoO_selcnt    INTEGER;
StoO_error     INTEGER;
StoO_rowcnt    INTEGER;
StoO_crowcnt    INTEGER := 0;
StoO_fetchstatus    INTEGER := 0;
StoO_errmsg    VARCHAR2(255);
StoO_sqlstatus    INTEGER;
BEGIN
    HOUR.indate := HOUR.in_indate;
    BEGIN
        RETURN to_char(HOUR.indate,'HH24');
    END;
    RETURN HOUR.indate;
END HOUR;;


CREATE OR REPLACE FUNCTION      "LEAST" (
in_first_entry  IN NUMBER  DEFAULT NULL,
in_second_entry     IN NUMBER  DEFAULT NULL)
RETURN NUMBER
AS
first_entry     NUMBER(19,0);
second_entry    NUMBER(19,0);
StoO_selcnt INTEGER;
StoO_error  INTEGER;
StoO_rowcnt INTEGER;
StoO_crowcnt    INTEGER := 0;
StoO_fetchstatus    INTEGER := 0;
StoO_errmsg VARCHAR2(255);
StoO_sqlstatus  INTEGER;
return_value    NUMBER(19,0);
BEGIN
    LEAST.first_entry := LEAST.in_first_entry;
    LEAST.second_entry := LEAST.in_second_entry;
    BEGIN
        IF  ( LEAST.first_entry <= LEAST.second_entry) THEN
            LEAST.return_value := LEAST.first_entry;
        ELSE
            LEAST.return_value  := LEAST.second_entry;
            RETURN LEAST.return_value;
        END IF;
    END;
    RETURN 0;
END LEAST;;


CREATE OR REPLACE FUNCTION "MONTH" (
in_indate    IN DATE  DEFAULT NULL)
RETURN VARCHAR2
AS
indate DATE;
StoO_selcnt    INTEGER;
StoO_error     INTEGER;
StoO_rowcnt    INTEGER;
StoO_crowcnt    INTEGER := 0;
StoO_fetchstatus    INTEGER := 0;
StoO_errmsg    VARCHAR2(255);
StoO_sqlstatus    INTEGER;
BEGIN
    MONTH.indate := MONTH.in_indate;
    BEGIN
        RETURN to_char(MONTH.indate,'MM');
    END;
    RETURN MONTH.indate;
END MONTH;;



CREATE OR REPLACE FUNCTION PASSWORD(
in_pass     IN VARCHAR2  DEFAULT NULL)
RETURN VARCHAR2
AS
pass    VARCHAR2(255);
StoO_selcnt INTEGER;
StoO_error  INTEGER;
StoO_rowcnt INTEGER;
StoO_crowcnt    INTEGER := 0;
StoO_fetchstatus    INTEGER := 0;
StoO_errmsg VARCHAR2(255);
StoO_sqlstatus  INTEGER;
BEGIN
    PASSWORD.pass := PASSWORD.in_pass;
    BEGIN
        RETURN Rawtohex(
           Dbms_Obfuscation_Toolkit.Md5(
                     Input => Utl_Raw.Cast_To_Raw(PASSWORD.pass)
           ));
    END;
    RETURN 0;
END PASSWORD;;



CREATE OR REPLACE FUNCTION SHOW(
in_table_name   IN VARCHAR2  DEFAULT NULL)
RETURN VARCHAR2
AS
table_name  VARCHAR2(60);
StoO_selcnt INTEGER;
StoO_error  INTEGER;
StoO_rowcnt INTEGER;
StoO_crowcnt    INTEGER := 0;
StoO_fetchstatus    INTEGER := 0;
StoO_errmsg VARCHAR2(255);
StoO_sqlstatus  INTEGER;
BEGIN
    SHOW.table_name := SHOW.in_table_name;
    BEGIN
        RETURN SHOW.table_name;
    END;
    RETURN 0;
END SHOW;;




CREATE OR REPLACE FUNCTION      "UNIX_TIMESTAMP" (
in_indate   IN DATE  DEFAULT NULL)
RETURN NUMBER
AS
indate  DATE;
StoO_selcnt INTEGER;
StoO_error  INTEGER;
StoO_rowcnt INTEGER;
StoO_crowcnt    INTEGER := 0;
StoO_fetchstatus    INTEGER := 0;
StoO_errmsg VARCHAR2(255);
StoO_sqlstatus  INTEGER;
BEGIN
    UNIX_TIMESTAMP.indate := UNIX_TIMESTAMP.in_indate;
    BEGIN
        RETURN ROUND(
                (
                    indate - 
                    (
                        TO_DATE('01.01.1970 00:00:00', 'dd.mm.yyyy hh24:mi:ss') - 
                        (sysdate-from_tz(to_timestamp(to_char(sysdate,'dd.mm.yyyy hh24:mi:ss'),'dd.mm.yyyy hh24:mi:ss'),'UTC'))
                    )
                )*24*60*60
            );
    END;
    RETURN NULL;
END UNIX_TIMESTAMP;;

CREATE OR REPLACE FUNCTION "WEEK" (
in_indate    IN DATE  DEFAULT NULL)
RETURN VARCHAR2
AS
indate DATE;
StoO_selcnt    INTEGER;
StoO_error     INTEGER;
StoO_rowcnt    INTEGER;
StoO_crowcnt    INTEGER := 0;
StoO_fetchstatus    INTEGER := 0;
StoO_errmsg    VARCHAR2(255);
StoO_sqlstatus    INTEGER;
BEGIN
    WEEK.indate := WEEK.in_indate;
    BEGIN
        RETURN to_char(WEEK.indate,'WW');
    END;
    RETURN WEEK.indate;
END WEEK;;


CREATE OR REPLACE FUNCTION "WEEKDAY" (
in_indate    IN DATE  DEFAULT NULL)
RETURN VARCHAR2
AS
indate DATE;
StoO_selcnt    INTEGER;
StoO_error     INTEGER;
StoO_rowcnt    INTEGER;
StoO_crowcnt    INTEGER := 0;
StoO_fetchstatus    INTEGER := 0;
StoO_errmsg    VARCHAR2(255);
StoO_sqlstatus    INTEGER;
BEGIN
    WEEKDAY.indate := WEEKDAY.in_indate;
    BEGIN
        RETURN to_char(WEEKDAY.indate,'D');
    END;
    RETURN WEEKDAY.indate;
END WEEKDAY;;


CREATE OR REPLACE FUNCTION "YEAR" (
in_indate    IN DATE  DEFAULT NULL)
RETURN VARCHAR2
AS
indate DATE;
StoO_selcnt    INTEGER;
StoO_error     INTEGER;
StoO_rowcnt    INTEGER;
StoO_crowcnt    INTEGER := 0;
StoO_fetchstatus    INTEGER := 0;
StoO_errmsg    VARCHAR2(255);
StoO_sqlstatus    INTEGER;
BEGIN
    YEAR.indate := YEAR.in_indate;
    BEGIN
        RETURN to_char(YEAR.indate,'YYYY');
    END;
    RETURN YEAR.indate;
END YEAR;;

CREATE OR REPLACE FUNCTION "NOW" (
in_indate    IN DATE  DEFAULT NULL)
RETURN DATE
AS
indate DATE;
StoO_selcnt    INTEGER;
StoO_error     INTEGER;
StoO_rowcnt    INTEGER;
StoO_crowcnt    INTEGER := 0;
StoO_fetchstatus    INTEGER := 0;
StoO_errmsg    VARCHAR2(255);
StoO_sqlstatus    INTEGER;
BEGIN
    RETURN sysdate;
END NOW;;

CREATE OR REPLACE TRIGGER TR_S_100_1_HACP_DEBUG
 BEFORE INSERT ON HACP_DEBUG
 FOR EACH ROW
BEGIN
  SELECT S_100_1_HACP_DEBUG.nextval
  INTO :new.ID
  FROM dual; END;

;


CREATE OR REPLACE TRIGGER TR_S_100_INTERESTING_FACTS
 BEFORE INSERT
 ON INTERESTING_FACTS
 FOR EACH ROW
BEGIN
    SELECT S_100_INTERESTING_FACTS.NEXTVAL INTO :new.interesting_facts_id FROM dual;
END;
;

CREATE OR REPLACE TRIGGER TR_S_100_1_INTERVIEW
 BEFORE INSERT
 ON INTERVIEW
 FOR EACH ROW
BEGIN
    SELECT S_100_1_INTERVIEW.NEXTVAL INTO :new.interview_id FROM dual;
END;
;

CREATE OR REPLACE TRIGGER TR_S_100_SESSION_GUEST
 BEFORE INSERT
 ON SESSION_GUEST
 FOR EACH ROW
BEGIN
    SELECT S_100_SESSION_GUEST.NEXTVAL INTO :new.SESSION_GUEST_ID FROM dual;
END;
;




CREATE OR REPLACE TRIGGER TR_S_100_1_HELP
 BEFORE INSERT ON HELP
 FOR EACH ROW
BEGIN
  SELECT S_100_1_HELP.nextval
  INTO :new.HELP_ID
  FROM dual; END;

;


CREATE OR REPLACE TRIGGER TR_S_100_1_HTMLPAGE
 BEFORE INSERT ON HTMLPAGE
 FOR EACH ROW
BEGIN
  SELECT S_100_1_HTMLPAGE.nextval
  INTO :new.PAGE_ID
  FROM dual; END;

;

CREATE OR REPLACE TRIGGER TR_S_100_1_HTMLPAGE_GROUPS
 BEFORE INSERT ON HTMLPAGE_GROUPS
 FOR EACH ROW
BEGIN
  SELECT S_100_1_HTMLPAGE_GROUPS.nextval
  INTO :new.GROUP_ID
  FROM dual; END;

;

CREATE OR REPLACE TRIGGER TR_S_100_1_FILES
 BEFORE INSERT ON FILES
 FOR EACH ROW
BEGIN
  SELECT S_100_1_FILES.nextval
  INTO :new.FILE_ID
  FROM dual; END;

;

CREATE OR REPLACE TRIGGER TR_S_100_1_VIDEOBLOCK
 BEFORE INSERT ON VIDEOBLOCK
 FOR EACH ROW
BEGIN
  SELECT S_100_1_VIDEOBLOCK.nextval
  INTO :new.FILE_ID
  FROM dual; END;

;

CREATE OR REPLACE TRIGGER TR_S_105_1_VIDEO
 BEFORE INSERT ON VIDEO
 FOR EACH ROW
BEGIN
  SELECT S_105_1_VIDEO.NEXTVAL
  INTO :NEW.ID
  FROM DUAL; END;

;



CREATE OR REPLACE TRIGGER TR_S_106_1_PROVIDERS
 BEFORE INSERT ON PROVIDERS
 FOR EACH ROW
BEGIN
  SELECT S_106_1_PROVIDERS.NEXTVAL
  INTO :NEW.ID
  FROM DUAL; END;

;



CREATE OR REPLACE TRIGGER TR_S_106_1_SUPPLIERS
 BEFORE INSERT ON SUPPLIERS
 FOR EACH ROW
BEGIN
  SELECT S_106_1_SUPPLIERS.NEXTVAL
  INTO :NEW.SUPPLIER_ID
  FROM DUAL; END;

;



CREATE OR REPLACE TRIGGER TR_S_107_1_WEBINAR_CHAT
 BEFORE INSERT ON WEBINAR_CHAT
 FOR EACH ROW
BEGIN
  SELECT S_107_1_WEBINAR_CHAT.NEXTVAL
  INTO :NEW.ID
  FROM DUAL; END;

;

CREATE OR REPLACE TRIGGER TR_S_100_1_WEBINARS
 BEFORE INSERT ON WEBINARS
 FOR EACH ROW
BEGIN
  SELECT S_100_1_WEBINARS.NEXTVAL
  INTO :new.WEBINAR_ID
  FROM DUAL; END;
;


CREATE OR REPLACE TRIGGER TR_S_109_1_WEBINAR_PLAN
 BEFORE INSERT ON WEBINAR_PLAN
 FOR EACH ROW
BEGIN
  SELECT S_109_1_WEBINAR_PLAN.NEXTVAL
  INTO :NEW.ID
  FROM DUAL; END;

;


CREATE OR REPLACE TRIGGER TR_S_114_1_MANAGERS
 BEFORE INSERT ON MANAGERS
 FOR EACH ROW
BEGIN
  SELECT S_114_1_MANAGERS.NEXTVAL
  INTO :NEW.ID
  FROM DUAL; END;

;


CREATE OR REPLACE TRIGGER TR_S_19_1_COURSES
 BEFORE INSERT ON COURSES
 FOR EACH ROW
BEGIN SELECT S_19_1_COURSES.nextval INTO :new.CID
 FROM dual; END;

;

CREATE OR REPLACE TRIGGER TR_S_28_1_COMMENTS
 BEFORE INSERT ON COMMENTS
 FOR EACH ROW
BEGIN
  SELECT S_94_1_COMMENTS.nextval INTO :new.ID
  FROM dual; END;

;


CREATE OR REPLACE TRIGGER TR_S_21_1_DEANS
 BEFORE INSERT ON DEANS
 FOR EACH ROW
BEGIN
  SELECT S_21_1_DEANS.nextval INTO :new.DID
  FROM dual; END;

;



CREATE OR REPLACE TRIGGER TR_S_23_1_EVENTS
 BEFORE INSERT ON EVENTS
 FOR EACH ROW
BEGIN
  SELECT S_23_1_EVENTS.nextval INTO :new.EVENT_ID
  FROM dual; END;

;

CREATE OR REPLACE TRIGGER TR_S_23_1_FAQ
 BEFORE INSERT ON FAQ
 FOR EACH ROW
BEGIN
  SELECT S_25_1_FAQ.nextval INTO :new.FAQ_ID
  FROM dual; END;

;

CREATE OR REPLACE TRIGGER TR_S_25_1_FILE_TRANFER
 BEFORE INSERT ON FILE_TRANFER
 FOR EACH ROW
BEGIN
  SELECT S_25_1_FILE_TRANFER.nextval INTO :new.FTID
  FROM dual; END;

;



CREATE OR REPLACE TRIGGER TR_S_27_1_FORMULA
 BEFORE INSERT ON FORMULA
 FOR EACH ROW
BEGIN
  SELECT S_27_1_FORMULA.nextval INTO :new.ID
  FROM dual; END;

;



CREATE OR REPLACE TRIGGER TR_S_30_1_GRADUATED
 BEFORE INSERT ON GRADUATED
 FOR EACH ROW
BEGIN
  SELECT S_30_1_GRADUATED.nextval INTO :new.SID
  FROM dual; END;

;

CREATE OR REPLACE TRIGGER TR_S_32_1_CERTIFICATES
 BEFORE INSERT ON CERTIFICATES
 FOR EACH ROW
BEGIN
  SELECT S_32_1_CERTIFICATES.nextval INTO :new.CERTIFICATE_ID
  FROM dual; END;
;

CREATE OR REPLACE TRIGGER TR_S_31_1_GROUPNAME
 BEFORE INSERT ON GROUPNAME
 FOR EACH ROW
BEGIN
  SELECT S_31_1_GROUPNAME.nextval INTO :new.GID
  FROM dual; END;CREATE OR REPLACE TRIGGER TR_S_36_1_LOGUSER
 BEFORE INSERT ON LOGUSER
 FOR EACH ROW
BEGIN
  SELECT S_36_1_LOGUSER.nextval INTO :new.STID
  FROM dual; END;

;



CREATE OR REPLACE TRIGGER TR_S_100_1_HOLIDAYS
 BEFORE INSERT ON HOLIDAYS
 FOR EACH ROW
BEGIN
  SELECT S_100_1_HOLIDAYS.nextval INTO :new.ID
  FROM dual; END;

;

CREATE OR REPLACE TRIGGER TR_S_40_1_NOTICE
 BEFORE INSERT ON NOTICE
 FOR EACH ROW
BEGIN
  SELECT S_40_1_NOTICE.nextval INTO :new.ID
  FROM dual; END;

;



CREATE OR REPLACE TRIGGER TR_S_41_1_NEWS
 BEFORE INSERT ON NEWS
 FOR EACH ROW
BEGIN
  SELECT S_41_1_NEWS.nextval INTO :new.ID
  FROM dual; END;

;



CREATE OR REPLACE TRIGGER TR_S_42_1_NEWS2
 BEFORE INSERT ON NEWS2
 FOR EACH ROW
BEGIN
  SELECT S_42_1_NEWS2.nextval INTO :new.NID
  FROM dual; END;

;

CREATE OR REPLACE TRIGGER TR_S_42_1_OAUTH_APPS
 BEFORE INSERT ON OAUTH_APPS
 FOR EACH ROW
BEGIN
  SELECT S_42_1_OAUTH_APPS.nextval INTO :new.APP_ID
  FROM dual; END;

;

CREATE OR REPLACE TRIGGER TR_S_42_1_OAUTH_TOKENS
 BEFORE INSERT ON OAUTH_TOKENS
 FOR EACH ROW
BEGIN
  SELECT S_42_1_OAUTH_TOKENS.nextval INTO :new.TOKEN_ID
  FROM dual; END;

;

CREATE OR REPLACE TRIGGER TR_S_42_1_OAUTH_NONCES
 BEFORE INSERT ON OAUTH_NONCES
 FOR EACH ROW
BEGIN
  SELECT S_42_1_OAUTH_NONCES.nextval INTO :new.NONCE_ID
  FROM dual; END;

;

CREATE OR REPLACE TRIGGER TR_S_42_1_OFFLINES
 BEFORE INSERT ON OFFLINES
 FOR EACH ROW
BEGIN
  SELECT S_42_1_OFFLINES.nextval INTO :new.ID
  FROM dual; END;

;

CREATE OR REPLACE TRIGGER TR_S_43_1_OPTIONS
 BEFORE INSERT ON OPTIONS
 FOR EACH ROW
BEGIN
  SELECT S_43_1_OPTIONS.nextval INTO :new.OPTIONID
  FROM dual; END;

;



CREATE OR REPLACE TRIGGER TR_S_44_1_ORGANIZATIONS
 BEFORE INSERT ON ORGANIZATIONS
 FOR EACH ROW
BEGIN
  SELECT S_44_1_ORGANIZATIONS.nextval INTO :new.OID
  FROM dual; END;

;



CREATE OR REPLACE TRIGGER TR_S_45_1_PEOPLE
 BEFORE INSERT ON PEOPLE
 FOR EACH ROW
BEGIN
  SELECT S_45_1_PEOPLE.nextval INTO :new.MID
  FROM dual; END;

;


CREATE OR REPLACE TRIGGER TR_S_45_1_PROCESSES
 BEFORE INSERT ON PROCESSES
 FOR EACH ROW
BEGIN
  SELECT S_45_1_PROCESSES.nextval INTO :new.PROCESS_ID
  FROM dual; END;
;


CREATE OR REPLACE TRIGGER TR_S_45_1_PROGRAMM
 BEFORE INSERT ON PROGRAMM
 FOR EACH ROW
BEGIN
  SELECT S_45_1_PROGRAMM.nextval INTO :new.PROGRAMM_ID
  FROM dual; END;
;

CREATE OR REPLACE TRIGGER TR_S_45_1_PROGRAMM_EVENTS
 BEFORE INSERT ON PROGRAMM_EVENTS
 FOR EACH ROW
BEGIN
  SELECT S_45_1_PROGRAMM_EVENTS.nextval INTO :new.PROGRAMM_EVENT_ID
  FROM dual; END;
;



CREATE OR REPLACE TRIGGER TR_S_45_1_STATE_OF_PROCESS
 BEFORE INSERT ON STATE_OF_PROCESS
 FOR EACH ROW
BEGIN
  SELECT S_45_1_STATE_OF_PROCESS.nextval INTO :new.STATE_OF_PROCESS_ID
  FROM dual; END;
;

CREATE OR REPLACE TRIGGER TR_S_46_1_PERIODS
 BEFORE INSERT ON PERIODS
 FOR EACH ROW
BEGIN
  SELECT S_46_1_PERIODS.nextval INTO :new.LID
  FROM dual; END;

;



CREATE OR REPLACE TRIGGER TR_S_49_1_PERMISSION_GROUPS
 BEFORE INSERT ON PERMISSION_GROUPS
 FOR EACH ROW
BEGIN
  SELECT S_49_1_PERMISSION_GROUPS.nextval INTO :new.PMID
  FROM dual; END;

;



CREATE OR REPLACE TRIGGER TR_S_65_1_QUIZZES
 BEFORE INSERT ON QUIZZES
 FOR EACH ROW
BEGIN
  SELECT S_65_1_QUIZZES.nextval INTO :new.QUIZ_ID
  FROM dual; END;

;



CREATE OR REPLACE TRIGGER TR_S_55_1_REPORTS
 BEFORE INSERT ON REPORTS
 FOR EACH ROW
BEGIN
  SELECT S_55_1_REPORTS.nextval INTO :new.REPORT_ID
  FROM dual; END;

;

CREATE OR REPLACE TRIGGER TR_S_55_1_ROOMS
 BEFORE INSERT ON ROOMS
 FOR EACH ROW
BEGIN
  SELECT S_55_1_ROOMS.nextval INTO :new.RID
  FROM dual; END;

;



CREATE OR REPLACE TRIGGER TR_S_57_1_SCHEDULE
 BEFORE INSERT ON SCHEDULE
 FOR EACH ROW
BEGIN
  SELECT S_57_1_SCHEDULE.nextval INTO :new.SHEID
  FROM dual; END;

;



CREATE OR REPLACE TRIGGER TR_S_58_1_SCHEDULEID
 BEFORE INSERT ON SCHEDULEID
 FOR EACH ROW
BEGIN
  SELECT S_58_1_SCHEDULEID.nextval INTO :new.SSID
  FROM dual; END;

;



CREATE OR REPLACE TRIGGER TR_S_61_1_SEQUENCE_HISTORY
 BEFORE INSERT ON SEQUENCE_HISTORY
 FOR EACH ROW
BEGIN
  SELECT S_61_1_SEQUENCE_HISTORY.nextval INTO :new.ID
  FROM dual; END;
;



CREATE OR REPLACE TRIGGER TR_S_61_1_STRUCTURE_OF_ORGAN
 BEFORE INSERT ON STRUCTURE_OF_ORGAN
 FOR EACH ROW
BEGIN
  SELECT S_61_1_STRUCTURE_OF_ORGAN.nextval INTO :new.SOID
  FROM dual; END;

;



CREATE OR REPLACE TRIGGER TR_S_62_1_STUDENTS
BEFORE INSERT ON STUDENTS
FOR EACH ROW
BEGIN
  SELECT S_62_1_STUDENTS.nextval,1,SYSDATE() INTO :new.SID,:new.REGISTERED,:new.TIME_REGISTERED
  FROM dual; END;

;



CREATE OR REPLACE TRIGGER TR_S_63_1_TEACHERS
 BEFORE INSERT ON TEACHERS
 FOR EACH ROW
BEGIN
  SELECT S_63_1_TEACHERS.nextval INTO :new.PID
  FROM dual; END;

;



CREATE OR REPLACE TRIGGER TR_S_65_1_TEST
 BEFORE INSERT ON TEST
 FOR EACH ROW
BEGIN
  SELECT S_65_1_TEST.nextval INTO :new.TID
  FROM dual; END;

;

CREATE OR REPLACE TRIGGER TR_S_65_1_TEST_ABSTRACT
 BEFORE INSERT ON TEST_ABSTRACT
 FOR EACH ROW
BEGIN
  SELECT S_65_1_TEST_ABSTRACT.nextval INTO :new.TEST_ID
  FROM dual; END;

;


CREATE OR REPLACE TRIGGER TR_S_65_1_TEST_FEEDBACK
 BEFORE INSERT ON TEST_FEEDBACK
 FOR EACH ROW
BEGIN
  SELECT S_65_1_TEST_FEEDBACK.nextval INTO :new.TEST_FEEDBACK_ID
  FROM dual; END;
;



CREATE OR REPLACE TRIGGER TR_S_102_1_TASKS
	BEFORE INSERT  ON TASKS
  FOR EACH ROW
BEGIN
  SELECT S_102_1_TASKS.nextval
  INTO :new.TASK_ID
  FROM dual; END;
;



CREATE OR REPLACE TRIGGER TR_S_67_1_EXERCISES
 BEFORE INSERT ON EXERCISES
 FOR EACH ROW
BEGIN
  SELECT S_67_1_EXERCISES.nextval INTO :new.EXERCISE_ID
  FROM dual; END;
;


CREATE OR REPLACE TRIGGER TR_S_77_1_ADMINS
 BEFORE INSERT ON ADMINS
 FOR EACH ROW
BEGIN
  SELECT S_77_1_ADMINS.nextval INTO :new.AID
  FROM dual; END;

;



CREATE OR REPLACE TRIGGER TR_S_79_1_CAM_CASTING
 BEFORE INSERT ON CAM_CASTING
 FOR EACH ROW
BEGIN
  SELECT S_79_1_CAM_CASTING.nextval INTO :new.CASTID
  FROM dual; END;

;



CREATE OR REPLACE TRIGGER TR_S_83_1_CLAIMANTS
 BEFORE INSERT ON CLAIMANTS
 FOR EACH ROW
BEGIN
  SELECT S_83_1_CLAIMANTS.nextval INTO :new.SID
  FROM dual; END;

;

CREATE OR REPLACE TRIGGER TR_S_83_1_CLASSIFIERS
 BEFORE INSERT ON CLASSIFIERS
 FOR EACH ROW
BEGIN
  SELECT S_94_1_CLASSIFIERS.nextval INTO :new.CLASSIFIER_ID
  FROM dual; END;

;

CREATE OR REPLACE TRIGGER TR_S_94_1_CLASSIFIERS_TYPES
 BEFORE INSERT ON CLASSIFIERS_TYPES
 FOR EACH ROW
BEGIN
  SELECT S_94_1_CLASSIFIERS_TYPES.nextval INTO :new.TYPE_ID
  FROM dual; END;

;

CREATE OR REPLACE TRIGGER TR_S_94_1_CLASSIFIERS_IMAGES
 BEFORE INSERT ON CLASSIFIERS_IMAGES
 FOR EACH ROW
BEGIN
  SELECT S_94_1_CLASSIFIERS_IMAGES.nextval INTO :new.CLASSIFIER_IMAGE_ID
  FROM dual; END;

;




CREATE OR REPLACE TRIGGER TR_S_86_1_CHAT_MESSAGES
 BEFORE INSERT ON CHAT_MESSAGES
 FOR EACH ROW
BEGIN
  SELECT S_86_1_CHAT_MESSAGES.nextval INTO :new.ID
  FROM dual;END;

;



CREATE OR REPLACE TRIGGER TR_S_88_1_SCORM_TRACKLOG
 BEFORE INSERT ON SCORM_TRACKLOG
 FOR EACH ROW
BEGIN
  SELECT S_88_1_SCORM_TRACKLOG.nextval
  INTO :new.trackID
  FROM dual; END;

;

CREATE OR REPLACE TRIGGER TR_S_88_1_SCORM_REPORT
 BEFORE INSERT ON SCORM_REPORT
 FOR EACH ROW
BEGIN
  SELECT S_88_1_SCORM_REPORT.nextval
  INTO :new.report_id
  FROM dual; END;

;


CREATE OR REPLACE TRIGGER TR_S_89_1_SESSIONS
 BEFORE INSERT ON SESSIONS
 FOR EACH ROW
BEGIN
  SELECT S_89_1_SESSIONS.nextval
  INTO :new.SESSID
  FROM dual; END;

;



CREATE OR REPLACE TRIGGER TR_S_90_1_LIBRARY
 BEFORE INSERT ON LIBRARY
 FOR EACH ROW
BEGIN
  SELECT S_90_1_LIBRARY.nextval
  INTO :new.BID
  FROM dual; END;

;



CREATE OR REPLACE TRIGGER TR_S_100_1_RESOURCES
 BEFORE INSERT ON RESOURCES
 FOR EACH ROW
BEGIN
  SELECT S_100_1_RESOURCES.nextval
  INTO :new.RESOURCE_ID
  FROM dual; END;
;

CREATE OR REPLACE TRIGGER TR_S_100_1_RESOURCE_REVISIONS
 BEFORE INSERT ON RESOURCE_REVISIONS
 FOR EACH ROW
BEGIN
  SELECT S_100_1_RESOURCE_REVISIONS.nextval
  INTO :new.REVISION_ID
  FROM dual; END;
;

CREATE OR REPLACE TRIGGER TR_S_100_1_SCALES
 BEFORE INSERT ON SCALES
 FOR EACH ROW
BEGIN
  SELECT S_100_1_SCALES.nextval
  INTO :new.SCALE_ID
  FROM dual; END;
;

CREATE OR REPLACE TRIGGER TR_S_100_1_SCALE_VALUES
 BEFORE INSERT ON SCALE_VALUES
 FOR EACH ROW
BEGIN
  SELECT S_100_1_SCALE_VALUES.nextval
  INTO :new.VALUE_ID
  FROM dual; END;
;

CREATE OR REPLACE TRIGGER TR_S_100_1_SUBJECTS
 BEFORE INSERT ON SUBJECTS
 FOR EACH ROW
BEGIN
  SELECT S_100_1_SUBJECTS.nextval
  INTO :new.SUBID
  FROM dual; END;

;

CREATE OR REPLACE TRIGGER TR_S_100_1_MESSAGES
 BEFORE INSERT ON MESSAGES
 FOR EACH ROW
BEGIN
  SELECT S_100_1_MESSAGES.nextval
  INTO :new.MESSAGE_ID
  FROM dual; END;

;

CREATE OR REPLACE TRIGGER TR_S_100_1_KBASE_ASSESSMENT
 BEFORE INSERT ON KBASE_ASSESSMENT
 FOR EACH ROW
BEGIN
  SELECT S_100_1_KBASE_ASSESSMENT.nextval
  INTO :new.ID
  FROM dual; END;

;

CREATE OR REPLACE TRIGGER TR_S_100_1_INTERFACE
 BEFORE INSERT ON INTERFACE
 FOR EACH ROW
BEGIN
  SELECT S_100_1_INTERFACE.nextval
  INTO :new.INTERFACE_ID
  FROM dual; END;

;

CREATE OR REPLACE TRIGGER TR_S_100_1_WEBINAR_ANSWERS
 BEFORE INSERT ON WEBINAR_ANSWERS
 FOR EACH ROW
BEGIN
  SELECT S_100_1_WEBINAR_ANSWERS.nextval
  INTO :new.AID
  FROM dual; END;

;
CREATE OR REPLACE TRIGGER TR_S_100_1_WEBINAR_QUESTIONS
 BEFORE INSERT ON WEBINAR_QUESTIONS
 FOR EACH ROW
BEGIN
  SELECT S_100_1_WEBINAR_QUESTIONS.nextval
  INTO :new.QID
  FROM dual; END;

;
CREATE OR REPLACE TRIGGER TR_S_100_1_WEBINAR_VOTES
 BEFORE INSERT ON WEBINAR_VOTES
 FOR EACH ROW
BEGIN
  SELECT S_100_1_WEBINAR_VOTES.nextval
  INTO :new.VID
  FROM dual; END;

;
CREATE OR REPLACE TRIGGER TR_S_100_1_WEBINAR_WHITEBOARD
 BEFORE INSERT ON WEBINAR_WHITEBOARD
 FOR EACH ROW
BEGIN
  SELECT S_100_1_WEBINAR_WHITEBOARD.nextval
  INTO :new.ACTIONID
  FROM dual; END;

;
CREATE OR REPLACE TRIGGER TR_S_100_1_WWP
 BEFORE INSERT ON WEBINAR_WHITEBOARD_POINTS
 FOR EACH ROW
BEGIN
  SELECT S_100_1_WBN_WB_POINTS.nextval
  INTO :new.POINTID
  FROM dual; END;

;
CREATE OR REPLACE TRIGGER TR_S_100_1_WEBINAR_RECORDS
 BEFORE INSERT ON WEBINAR_RECORDS
 FOR EACH ROW
BEGIN
  SELECT S_100_1_WEBINAR_RECORDS.nextval
  INTO :new.ID
  FROM dual; END;

;
CREATE OR REPLACE TRIGGER TR_S_108_1_WEBINAR_HISTORY
 BEFORE INSERT ON WEBINAR_HISTORY
 FOR EACH ROW
BEGIN
  SELECT S_108_1_WEBINAR_HISTORY.nextval
  INTO :new.id
  FROM dual; END;

;

CREATE OR REPLACE TRIGGER TR_S_100_1_BLOG
 BEFORE INSERT ON BLOG
 FOR EACH ROW
BEGIN
  SELECT S_100_1_BLOG.nextval INTO :new.ID
  FROM dual; END;
;

CREATE OR REPLACE TRIGGER TR_S_101_1_TAG
 BEFORE INSERT ON TAG
 FOR EACH ROW
BEGIN
  SELECT S_101_1_TAG.nextval INTO :new.ID
  FROM dual; END;
;

CREATE OR REPLACE TRIGGER TR_ID_WIKI_ARTICLES
 BEFORE INSERT ON WIKI_ARTICLES
 FOR EACH ROW
BEGIN
  SELECT S_ID_WIKI_ARTICLES.nextval INTO :new.ID
  FROM dual; END;
;

CREATE OR REPLACE TRIGGER TR_ID_WIKI_ARCHIVE
 BEFORE INSERT ON WIKI_ARCHIVE
 FOR EACH ROW
BEGIN
  SELECT S_ID_WIKI_ARCHIVE.nextval INTO :new.ID
  FROM dual; END;
;

CREATE OR REPLACE TRIGGER TR_ID_CHAT_CHANNELS
 BEFORE INSERT ON CHAT_CHANNELS
 FOR EACH ROW
BEGIN
  SELECT S_ID_CHAT_CHANNELS.nextval INTO :new.ID
  FROM dual; END;
;

CREATE OR REPLACE TRIGGER TR_ID_CHAT_HISTORY
 BEFORE INSERT ON CHAT_HISTORY
 FOR EACH ROW
BEGIN
  SELECT S_ID_CHAT_HISTORY.nextval INTO :new.ID
  FROM dual; END;
;

CREATE OR REPLACE TRIGGER TR_ID_STORAGE_FILESYSTEM
 BEFORE INSERT ON STORAGE_FILESYSTEM
 FOR EACH ROW
BEGIN
  SELECT S_ID_STORAGE_FILESYSTEM.nextval INTO :new.ID
  FROM dual; END;
;

CREATE OR REPLACE TRIGGER TR_S_100_SECTIONS
	BEFORE INSERT  ON SECTIONS
  FOR EACH ROW
BEGIN
  SELECT S_100_SECTIONS.nextval
  INTO :new.SECTION_ID
  FROM dual; END;
;

CREATE OR REPLACE TRIGGER TR_S_100_1_FORUM
 BEFORE INSERT
 ON FORUMS_LIST
 FOR EACH ROW
BEGIN
    SELECT S_100_1_FORUM.NEXTVAL INTO :new.FORUM_ID FROM dual;
END;
/

CREATE OR REPLACE TRIGGER TR_S_100_1_FORUM_MESSAGE
 BEFORE INSERT
 ON FORUMS_MESSAGES
 FOR EACH ROW
BEGIN
    SELECT S_100_1_FORUM_MESSAGE.NEXTVAL INTO :new.MESSAGE_ID FROM dual;
END;
/

CREATE OR REPLACE TRIGGER TR_S_100_1_FORUM_SECTION
 BEFORE INSERT
 ON FORUMS_SECTIONS
 FOR EACH ROW
BEGIN
    SELECT S_100_1_FORUM_SECTION.NEXTVAL INTO :new.SECTION_ID FROM dual;
END;
/

CREATE OR REPLACE TRIGGER TR_S_106_1_SUBSCRIPTION
 BEFORE INSERT
 ON SUBSCRIPTIONS
 FOR EACH ROW
BEGIN
    SELECT S_106_1_SUBSCRIPTION.NEXTVAL INTO :new.SUBSCRIPTION_ID FROM dual;
END;
/

CREATE OR REPLACE TRIGGER TR_S_106_1_SUBSCR_CHANNELS
 BEFORE INSERT
 ON SUBSCRIPTION_CHANNELS
 FOR EACH ROW
BEGIN
    SELECT S_106_1_SUBSCRIPTION_CHANNELS.NEXTVAL INTO :new.CHANNEL_ID FROM dual;
END;
/

CREATE OR REPLACE TRIGGER TR_S_106_1_SUBSCR_ENTRIES
 BEFORE INSERT
 ON SUBSCRIPTION_ENTRIES
 FOR EACH ROW
BEGIN
    SELECT S_106_1_SUBSCRIPTION_ENTRIES.NEXTVAL INTO :new.ENTRY_ID FROM dual;
END;
/

CREATE OR REPLACE FORCE VIEW roles_source AS
(select MID AS mid, 'enduser' AS role from People)
union(select MID AS mid, 'teacher' AS role from Teachers)
union(select USER_ID AS mid, 'moderator' AS role from moderators)
union (select MID AS mid, 'student' AS role from Students)
union (select MID AS mid, 'participant' AS role from Participants)
union (select MID AS mid, 'admin' AS role from admins)
union (select mid AS mid, 'developer' AS role from developers)
union (select mid AS mid, 'manager' AS role from managers)
union (select user_id AS mid, 'supervisor' AS role from supervisors)
union (select user_id AS mid, 'employee' AS role from employee)
union (select MID AS mid, 'curator' AS role from curators)
union (select MID AS mid, 'dean' AS role from deans);

CREATE OR REPLACE FORCE VIEW roles AS
(SELECT mid, WM_CONCAT(role) AS role  FROM ((select MID AS mid, 'enduser' AS role from People)
union(select MID AS mid, 'teacher' AS role from Teachers)
union (select MID AS mid, 'student' AS role from Students)
union (select MID AS mid, 'admin' AS role from admins)
union (select mid AS mid, 'developer' AS role from developers)
union (select mid AS mid, 'manager' AS role from managers)
union (select user_id AS mid, 'supervisor' AS role from supervisors)
union (select user_id AS mid, 'employee' AS role from employee)
union (select MID AS mid, 'dean' AS role from deans)) GROUP BY mid);

CREATE OR REPLACE FORCE VIEW activities AS
(SELECT mid, WM_CONCAT(role) AS role, subject_name, subject_id  FROM (
(select MID AS mid, 'teacher' AS role, 'subject' AS subject_name, CID AS subject_id from Teachers WHERE CID > 0)
union (select MID AS mid, 'enduser' AS role, 'subject' AS subject_name, CID AS subject_id from Students WHERE CID > 0)
union (select MID AS mid, 'enduser' AS role, 'subject' AS subject_name, CID AS subject_id from graduated WHERE CID > 0)
union (select MID AS mid, 'dean' AS role, 'subject' AS subject_name, 0 AS subject_id from deans WHERE subject_id = 0)
union (select MID as mid, 'dean' AS role, 'subject' AS subject_name, subject_id AS subject_id from deans WHERE subject_id > 0)
union (select mid as mid, 'manager' AS role, 'course' AS subject_name, 0 AS subject_id from managers)
union (select mid as mid, 'developer' AS role, 'course' AS subject_name, 0 AS subject_id from developers)
union (select mid as mid, 'manager' AS role, 'resource' AS subject_name, 0 AS subject_id from managers)
union (select mid as mid, 'developer' AS role, 'resource' AS subject_name, 0 AS subject_id from developers)
) GROUP BY mid, subject_name, subject_id);

CREATE OR REPLACE FORCE VIEW activity_resources AS (
select 
    2 AS activity_type,
    forums_sections.section_id AS activity_id,
    forums_sections.title AS activity_name,
    subjects.subid AS subject_id,
    subjects.name AS subject_name,
    count(forums_messages.message_id) AS volume,
    max(forums_messages.created) AS updated,
    resources.resource_id AS resource_id,
    resources.status AS status 
  from 
    ((((forums_sections join forums_list on((forums_list.forum_id = forums_sections.forum_id))) join subjects on((forums_list.subject_id = subjects.subid))) left join forums_messages on((forums_list.forum_id = forums_messages.forum_id))) left join resources on(((resources.activity_id = forums_sections.section_id) and (resources.activity_type = 2)))) 
  where 
    forums_sections.lesson_id IS NULL OR forums_sections.lesson_id = 0
  group by 
    forums_list.forum_id, forums_sections.section_id, forums_sections.title, subjects.subid, subjects.name, resources.resource_id, resources.status
  union 
  select 
    64 AS activity_type,
    subjects.subid AS activity_id,
    '' AS activity_name,
    subjects.subid AS subject_id,
    subjects.name AS subject_name,
    count(blog.id) AS volume,
    max(blog.created) AS updated,
    resources.resource_id AS resource_id,
    resources.status AS status 
  from 
    ((subjects join blog on(((blog.subject_name = 'subject') and (blog.subject_id = subjects.subid)))) left join resources on(((resources.activity_id = subjects.subid) and (resources.activity_type = 64)))) 
  group by 
    subjects.subid, subjects.name, resources.resource_id, resources.status
  union 
  select 
    512 AS activity_type,
    chat_channels.id AS activity_id,
    chat_channels.name AS activity_name,
    subjects.subid AS subject_id,
    subjects.name AS subject_name,
    count(chat_history.id) AS volume,
    max(chat_history.created) AS updated,
    resources.resource_id AS resource_id,
    resources.status AS status 
  from 
    (((chat_channels join subjects on((chat_channels.subject_id = subjects.subid))) left join chat_history on((chat_channels.id = chat_history.channel_id))) left join resources on(((resources.activity_id = chat_channels.id) and (resources.activity_type = 512)))) 
  where 
    (chat_channels.lesson_id IS NULL OR chat_channels.lesson_id = 0) AND
    is_general != 1 AND
    show_history = 1
  group by 
    chat_channels.id, chat_channels.name, subjects.subid, subjects.name, resources.resource_id, resources.status
  union 
  select 
    128 AS activity_type,
    subjects.subid AS activity_id,
    '' AS activity_name,
    subjects.subid AS subject_id,
    subjects.name AS subject_name,
    count(wiki_articles.id) AS volume,
    max(wiki_articles.changed) AS updated,
    resources.resource_id AS resource_id,
    resources.status AS status 
  from 
    ((subjects join wiki_articles on(((wiki_articles.subject_name = 'subject') and (wiki_articles.subject_id = subjects.subid)))) left join resources on(((resources.activity_id = subjects.subid) and (resources.activity_type = 128)))) 
  where 
    wiki_articles.lesson_id IS NULL
  group by 
    subjects.subid, subjects.name, resources.resource_id, resources.status
);

CREATE OR REPLACE FORCE VIEW lessons AS
(
SELECT SHEID, title, typeID, timetype, descript, CID, createID, vedomost, teacher, moderator, cond_sheid, cond_mark, cond_progress, cond_avgbal, cond_sumbal, isfree, order_,
CASE
    WHEN cond_sheid > 0 THEN 1
    WHEN cond_progress > 0 THEN 1
    WHEN cond_avgbal > 0 THEN 1
    WHEN cond_sumbal > 0 THEN 1
    ELSE 0
END AS condition,
CASE
    WHEN timetype = 0 THEN UNIX_TIMESTAMP(begin_)
    WHEN timetype = 1 THEN startday
    WHEN timetype = 2 THEN 0
END AS begin_,
CASE
    WHEN timetype = 0 THEN UNIX_TIMESTAMP(end_)
    WHEN timetype = 1 THEN stopday
    WHEN timetype = 2 THEN 0
END AS end_
FROM schedule
);

CREATE OR REPLACE FORCE VIEW hours24 AS
(SELECT 0 as h FROM dual UNION SELECT 1 as h FROM dual UNION SELECT 2 as h FROM dual UNION SELECT 3 as h FROM dual UNION SELECT 4 as h FROM dual UNION SELECT 5 as h FROM dual UNION SELECT 6 as h FROM dual UNION SELECT 7 as h FROM dual UNION SELECT 8 as h FROM dual UNION SELECT 9 as h FROM dual UNION SELECT 10 as h FROM dual UNION SELECT 11 as h FROM dual UNION SELECT 12 as h FROM dual UNION SELECT 13 as h FROM dual UNION SELECT 14 as h FROM dual UNION SELECT 15 as h FROM dual UNION SELECT 16 as h FROM dual UNION SELECT 17 as h FROM dual UNION SELECT 18 as h FROM dual UNION SELECT 19 as h FROM dual UNION SELECT 20 as h FROM dual UNION SELECT 21 as h FROM dual UNION SELECT 22 as h FROM dual UNION SELECT 23 as h FROM dual);

CREATE OR REPLACE FORCE VIEW subjects_users AS
(SELECT MID as user_id, CID as subject_id, time_registered AS begin_, NULL AS end_, 1 AS status FROM Students)
UNION (SELECT MID as user_id, CID as subject_id, NULL AS begin_, NULL AS end_, 0 AS status FROM claimants WHERE status = 0)
UNION (SELECT MID as user_id, CID as subject_id, begin_ AS begin_, end_ AS end_, 2 AS status FROM graduated);

INSERT INTO OPTIONS (name, value) VALUES ('version', '4.x');
INSERT INTO OPTIONS (name, value) VALUES ('build', 'YYYYMMDD');
INSERT INTO OPTIONS (name, value) VALUES ('regnumber', '');


INSERT INTO Teachers (PID, MID, CID) VALUES (1,1,1);
INSERT INTO Students (SID, MID, CID, cgid, Registered) VALUES (1,1,1,0,1);
INSERT INTO admins (AID, MID) VALUES (1,1);
INSERT INTO deans (DID, MID) VALUES (1, 1);
INSERT INTO People (MID, LastName, FirstName, Password, Login) VALUES (1, 'Администратор', 'Администратор', 'pass', 'admin');


INSERT INTO Courses (CID, Title, Description, TypeDes, CD, cBegin, cEnd, Fee, valuta, Status, createby, createdate, longtime, did) VALUES
  (1,'Пример курса','block=simple~name=description%END%type=fckeditor%END%title=%END%value=Пример описания курса%END%sub=%END%~[~~]',0,'',TO_DATE('2009-11-01, 12:34:00 PM','RRRR-MM-DD, HH:MI:SS AM'),TO_DATE('2011-11-01, 12:34:00 PM','RRRR-MM-DD, HH:MI:SS AM'),0,0,'2','elearn@hypermethod.com',TO_DATE('2009-11-01, 12:34:00 PM','RRRR-MM-DD, HH:MI:SS AM'),120,0);
INSERT INTO organizations (title, cid, prev_ref, level_) VALUES ('<пустой элемент>','1','-1', '0');


INSERT INTO OPTIONS (name, value) VALUES ('grid_rows_per_page', '25');
INSERT INTO OPTIONS (name, value) VALUES ('headStructureUnitName', 'Организационная структура');
INSERT INTO OPTIONS (name, value) VALUES ('edo_subdivision_root_name', 'Учебная структура');


INSERT INTO NOTICE (TYPE_, EVENT, TITLE, RECEIVER, MESSAGE) VALUES (1,'Создание новой учетной записи пользователя', 'Вы зарегистрированы  в ИСДО', 0, ' ');
INSERT INTO NOTICE (TYPE_, EVENT, TITLE, RECEIVER, MESSAGE) VALUES (2,'Назначение роли пользователю', 'Вам назначена роль [ROLE]', 0, ' ');
INSERT INTO NOTICE (TYPE_, EVENT, TITLE, RECEIVER, MESSAGE) VALUES (3,'Назначение на учебный курс (в процессе обучения)', 'Вы назначены на обучение по курсу [COURSE]', 0, ' ');
INSERT INTO NOTICE (TYPE_, EVENT, TITLE, RECEIVER, MESSAGE) VALUES (4,'Назначение на учебного модуля (в процессе разработки учебного модуля)', 'Вы назначены в группу  разработчиков учебного модуля [URL_COURSE]', 0, ' ');
INSERT INTO NOTICE (TYPE_, EVENT, TITLE, RECEIVER, MESSAGE) VALUES (6,'Перевод пользователя в прошедшие обучение по курсу', '<p>Вы успешно прошли курс [URL_COURSE] <span>в </span><span>системе дистанционного обучения Базовый Элемент [URL]</span></p>  <p><span>  Ссылка на сертификат: [CERTIFICATE_LINK]. </span></p>', 0, ' ');
INSERT INTO NOTICE (TYPE_, EVENT, TITLE, RECEIVER, MESSAGE) VALUES (7,'Подача заявки на обучение по курсу', 'Новая заявка на обучение по курсу [URL_COURSE]', 1, ' ');
INSERT INTO NOTICE (TYPE_, EVENT, TITLE, RECEIVER, MESSAGE) VALUES (8,'Подача заявки на обучение по курсу', 'Ваша заявка зарегистрирована', 0, ' ');
INSERT INTO NOTICE (TYPE_, EVENT, TITLE, RECEIVER, MESSAGE) VALUES (9,'Рассмотрение заявки на обучение по курсу: одобрение ', 'Ваша заявка на обучение по курсу [URL_COURSE] одобрена', 0, ' ');
INSERT INTO NOTICE (TYPE_, EVENT, TITLE, RECEIVER, MESSAGE) VALUES (10,'Рассмотрение заявки на обучение по курсу: отклонение', 'Ваша заявка на обучение по курсу [URL_COURSE] отклонена', 0, ' ');
INSERT INTO NOTICE (TYPE_, EVENT, TITLE, RECEIVER, MESSAGE) VALUES (11,'Смена пароля пользователя', 'Подтверждение смены пароля ', 0, ' ');
INSERT INTO NOTICE (TYPE_, EVENT, TITLE, RECEIVER, MESSAGE) VALUES (12,'Новое личное сообщение', '[SUBJECT]', 0, '[TEXT]');
INSERT INTO NOTICE (TYPE_, EVENT, TITLE, RECEIVER, MESSAGE) VALUES (13,'Обновление источника подписки', 'Подписка на источник [SOURCE]', 0, '[TEXT]');
INSERT INTO NOTICE (TYPE_, EVENT, TITLE, RECEIVER, MESSAGE) VALUES (14,'Опрос слушателей', 'Опрос слушателей по курсу [URL_COURSE]', 0, 'Приглашаем Вас пройти анкетирование по курсу [URL_COURSE]! Отзыв о курсе (сбор обратной связи) является обязательным этапом обучения сотрудников компании. Пройти анкетирование можно в СДО ([URL]) или по ссылке на опрос: [URL2]. Данные о мероприятии, по которому проводится сбор обратной связи: \n- Название опроса: [TITLE]\n- Даты проведения опроса: [BEGIN] - [END]\n');
INSERT INTO NOTICE (TYPE_, EVENT, TITLE, RECEIVER, MESSAGE) VALUES (15,'Опрос преподавателей', 'Опрос преподавателей по курсу [URL_COURSE]', 0, 'Приглашаем Вас пройти анкетирование по курсу [URL_COURSE]! Отзыв о курсе (сбор обратной связи) является обязательным этапом обучения сотрудников компании. Пройти анкетирование можно в СДО ([URL]) или по ссылке на опрос: [URL2]. Данные о мероприятии, по которому проводится сбор обратной связи: \n- Название опроса: [TITLE]\n- Даты проведения опроса: [BEGIN] - [END]\n');
INSERT INTO NOTICE (TYPE_, EVENT, TITLE, RECEIVER, MESSAGE) VALUES (16,'Опрос руководителей', 'Опрос руководителей по курсу [URL_COURSE]', 0, 'Приглашаем Вас пройти анкетирование по курсу [URL_COURSE]! Отзыв о курсе (сбор обратной связи) является обязательным этапом обучения сотрудников компании. Пройти анкетирование можно в СДО ([URL]) или по ссылке на опрос: [URL2]. Данные о мероприятии, по которому проводится сбор обратной связи: \n- Название опроса: [TITLE]\n- Даты проведения опроса: [BEGIN] - [END]\n- ФИО сотрудников, прошедших обучение: [SLAVES]\n');
INSERT INTO NOTICE (TYPE_, EVENT, TITLE, RECEIVER, MESSAGE) VALUES (17,'Шаблон сгруппированых сообщений', 'Тема этого шаблона будет заменена темой шаблона события', 0, 'Сообщение этого шаблона будет заменено объединенными сообщениями шаблона события');
INSERT INTO NOTICE (TYPE_, EVENT, TITLE, RECEIVER, MESSAGE) VALUES (18,'Новое сообщение на форуме', 'Новое сообщение от пользователя [MESSAGE_USER_NAME]', 0, 'В теме "[SECTION_NAME]" форума "[FORUM_NAME]" оставлен новый комментарий. [MESSAGE_URL]');
INSERT INTO NOTICE (TYPE_, EVENT, TITLE, RECEIVER, MESSAGE) VALUES (19,'Новый скрытый ответ на форуме', 'Вы получили скрытый комментарий от пользователя [MESSAGE_USER_NAME]', 0, 'На ваше сообщение в теме "[SECTION_NAME]" форума "[FORUM_NAME]" оставлен новый скрытый комментарий. [MESSAGE_URL]');
INSERT INTO NOTICE (TYPE_, EVENT, TITLE, RECEIVER, MESSAGE) VALUES (20,'Оценка сообщения на форуме', 'Вашему сообщению на форуме выставлена оценка', 0, 'В теме "[SECTION_NAME]" форума "[FORUM_NAME]" выставлена оценка на ваш комментарий. [MESSAGE_URL]');
INSERT INTO NOTICE (TYPE_, EVENT, TITLE, RECEIVER, MESSAGE) VALUES (21,'Подтверждение email', 'Подтвердите email', 0, 'Для завершения регистрации и необходимо подтвердить Ваш email. Перейдите по ссылке: [EMAIL_CONFIRM_URL]');
INSERT INTO NOTICE (TYPE_, EVENT, TITLE, RECEIVER, MESSAGE) VALUES (22,'Учётная запись разблокирована', 'Учётная запись разблокирована', 0, 'Ваша учетная запись была разблокирована. Для входа на портал, перейдите по ссылке: [URL]');
INSERT INTO NOTICE (TYPE_, EVENT, TITLE, RECEIVER, MESSAGE) VALUES (25,'Создание очного занятия', 'Новое занятие по дисциплине [DISCIPLINE] на дату [DATE]. СДО УрФУ (el.ustu.ru)', 0, '<p>Сообщаем Вам, что в системе дистанционного обучения в расписании по дисциплине [DISCIPLINE] произошли изменения. Добавлено новое занятие: [DATE], [TIME], [UNIT], [LESSON_FORM], [ROOM], [TEACHER].<strong>&nbsp;<br></strong><br>По всем вопросам, связанным с работой в системе, можно обращаться в Центр образовательных технологий .</p>');
INSERT INTO NOTICE (TYPE_, EVENT, TITLE, RECEIVER, MESSAGE) VALUES (26,'Изменение очного занятия', 'Изменение расписания занятий по дисциплине [DISCIPLINE] на дату [DATE]. СДО УрФУ (el.ustu.ru)', 0, '<p>Сообщаем Вам, что для Вас создана учетная запись в системе дистанционного обучения в<span>&nbsp;расписании занятий по дисциплине [DISCIPLINE] произошли изменения. Новые параметры занятия: [DATE], [TIME], [UNIT], [LESSON_FORM], [ROOM], [TEACHER]. Параметры до изменения: [DATE_OLD], [TIME_OLD], [UNIT], [LESSON_FORM], [ROOM_OLD], [TEACHER_OLD].</span><strong><br></strong><br>По всем вопросам, связанным с работой в системе, можно обращаться в Центр образовательных технологий .</p>');
INSERT INTO NOTICE (TYPE_, EVENT, TITLE, RECEIVER, MESSAGE) VALUES (27,'Отмена очного занятия', 'Отменено занятие по дисциплине [DISCIPLINE] на дату [DATE]. СДО УрФУ (el.ustu.ru)', 0, '<p>По всем вопросам, связанным с работой в системе, можно обращаться в Центр образовательных технологий .</p>');
INSERT INTO NOTICE (TYPE_, EVENT, TITLE, RECEIVER, MESSAGE) VALUES (28,'Публикация расписания очных занятий', 'Ссылка на календарь очных занятий. СДО УрФУ (el.ustu.ru)', 0, '<p>По всем вопросам, связанным с работой в системе, можно обращаться в Центр образовательных технологий .</p>');

INSERT INTO PROVIDERS (ID, TITLE, ADDRESS, CONTACTS, DESCRIPTION) VALUES (1, 'ГиперМетод', NULL, NULL, NULL);
INSERT INTO PROVIDERS (ID, TITLE, ADDRESS, CONTACTS, DESCRIPTION) VALUES (2, 'SkillSoft', NULL, NULL, NULL);

INSERT INTO SCALES (SCALE_ID, NAME, DESCRIPTION, TYPE_) VALUES (1, 'Значения от 0 до 100', 'Любые значения в диапазоне от 0 до 100', NULL, 1);
INSERT INTO SCALES (SCALE_ID, NAME, DESCRIPTION, TYPE_) VALUES (2, '2 состояния', 'Пройдено / Не пройдено', 2);
INSERT INTO SCALES (SCALE_ID, NAME, DESCRIPTION, TYPE_) VALUES (3, '3 состояния', 'Пройдено успешно / Пройдено неуспешно / Не пройдено', 3);

INSERT INTO FORUMS_LIST (FORUM_ID, SUBJECT_ID, USER_ID, USER_NAME, USER_IP, TITLE, FLAGS) VALUES (1, 0, 1, 'Администратор Администратор', '127.0.0.1', 'Форум портала', 6);

COMMIT;
