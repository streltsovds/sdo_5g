<?php

use Phinx\Migration\AbstractMigration;

class InitFunctions extends AbstractMigration
{
  /**
   * Change Method.
   *
   * Write your reversible migrations using this method.
   *
   * More information on writing migrations is available here:
   * http://docs.phinx.org/en/latest/migrations.html#the-abstractmigration-class
   *
   * The following commands can be used in this method and Phinx will
   * automatically reverse them when rolling back:
   *
   *    createTable
   *    renameTable
   *    addColumn
   *    addCustomColumn
   *    renameColumn
   *    addIndex
   *    addForeignKey
   *
   * Any other destructive changes will result in an error when trying to
   * rollback the migration.
   *
   * Remember to call "create()" or "update()" and NOT "save()" when working
   * with the Table class.
   */
  public function change()
  {
    $adapterType = $this->getAdapter()->getAdapterType();

    if ('mysql' === $adapterType) {
        $this->changeMysql();
    } elseif ('sqlsrv' === $adapterType) {
        $this->changeSqlServer();
    }
  }

    private function changeMysql()
    {
    }

  private function changeSqlServer()
  {
      $query = <<<QUERY
CREATE FUNCTION [dbo].[CONCAT](@str0 varchar(255) , @str1 varchar(255) = '123')
RETURNS varchar(255)
AS
BEGIN
    return @str0 + @str1;
END
QUERY;
      $this->execute($query);

      $query = <<<QUERY
CREATE FUNCTION [dbo].[FROM_UNIXTIME] (@timestamp bigint)
RETURNS char(19)
AS
BEGIN
  DECLARE @iyear  int,    @imonth int,     @iday int,     @ihours int,     @iminutes int,     @iseconds int;
  DECLARE @cyear char(4), @cmonth char(2), @cday char(2), @chours char(2), @cminutes char(2), @cseconds char(2);

  DECLARE @i int, @current_timestamp bigint, @temp bigint;

  DECLARE @returned_date char(19);

  SET @i = 1970;
  SET @current_timestamp = 0;
  SET @temp = 0;

  WHILE (@current_timestamp < @timestamp)
     BEGIN
       SET @temp = @current_timestamp;
       IF (@i%4 = 0)
           SET @current_timestamp = @current_timestamp + 366*24*60*60;
       ELSE
           SET @current_timestamp = @current_timestamp + 365*24*60*60;
        SET @i = @i + 1;
     END

  IF(@i = 1971)
     SET @temp = 0;

  SET @iyear = @i - 1;

  IF(@iyear%4 = 0)
     BEGIN
        SET @i = 1;
        WHILE (@current_timestamp < @timestamp )
           BEGIN
              IF(@i != 1)
                 SET @temp = @current_timestamp;
              IF (@i = 1)
                 SET @current_timestamp = @current_timestamp + 31*24*60*60;
              ELSE IF (@i = 2)
                 SET @current_timestamp = @current_timestamp + 29*24*60*60;
              ELSE IF (@i = 3)
                 SET @current_timestamp = @current_timestamp + 31*24*60*60;
              ELSE IF (@i = 4)
                 SET @current_timestamp = @current_timestamp + 30*24*60*60;
              ELSE IF (@i = 5)
                 SET @current_timestamp = @current_timestamp + 31*24*60*60;
              ELSE IF (@i = 6)
                 SET @current_timestamp = @current_timestamp + 30*24*60*60;
              ELSE IF (@i = 7)
                 SET @current_timestamp = @current_timestamp + 31*24*60*60;
              ELSE IF (@i = 8)
                 SET @current_timestamp = @current_timestamp + 31*24*60*60;
              ELSE IF (@i = 9)
                 SET @current_timestamp = @current_timestamp + 30*24*60*60;
              ELSE IF (@i = 10)
                 SET @current_timestamp = @current_timestamp + 31*24*60*60;
              ELSE IF (@i = 11)
                 SET @current_timestamp = @current_timestamp + 30*24*60*60;
              ELSE IF (@i = 12)
                 SET @current_timestamp = @current_timestamp + 31*24*60*60;
              SET @i = @i + 1;
     END
     END
  ELSE
     BEGIN
        SET @i = 1;
        WHILE (@current_timestamp < @timestamp )
           BEGIN
              IF(@i != 1)
                 SET @temp = @current_timestamp;
              IF (@i = 1)
                 SET @current_timestamp = @current_timestamp + 31*24*60*60;
              ELSE IF (@i = 2)
                 SET @current_timestamp = @current_timestamp + 28*24*60*60;
              ELSE IF (@i = 3)
                 SET @current_timestamp = @current_timestamp + 31*24*60*60;
              ELSE IF (@i = 4)
                 SET @current_timestamp = @current_timestamp + 30*24*60*60;
              ELSE IF (@i = 5)
                 SET @current_timestamp = @current_timestamp + 31*24*60*60;
              ELSE IF (@i = 6)
                 SET @current_timestamp = @current_timestamp + 30*24*60*60;
              ELSE IF (@i = 7)
                 SET @current_timestamp = @current_timestamp + 31*24*60*60;
              ELSE IF (@i = 8)
                 SET @current_timestamp = @current_timestamp + 31*24*60*60;
              ELSE IF (@i = 9)
                 SET @current_timestamp = @current_timestamp + 30*24*60*60;
              ELSE IF (@i = 10)
                 SET @current_timestamp = @current_timestamp + 31*24*60*60;
              ELSE IF (@i = 11)
                 SET @current_timestamp = @current_timestamp + 30*24*60*60;
              ELSE IF (@i = 12)
                 SET @current_timestamp = @current_timestamp + 31*24*60*60;
              SET @i = @i + 1;                             END
     END

  SET @imonth = @i;

  SET @iday              = (@timestamp - @temp)/(24*60*60);
  SET @ihours            = (@timestamp - @temp - @iday*24*60*60)/(60*60);
  SET @iminutes          = (@timestamp - @temp - @iday*24*60*60 - @ihours*60*60)/60;
  SET @iseconds          =  @timestamp - @temp - @iday*24*60*60 - @ihours*60*60 - @iminutes*60;

  SET @iday = @iday + 1;


  SET @cyear = STR(@iyear, 4, 0);
  IF (LEN(@imonth) = 2)
     SET @cmonth = STR(@imonth, 2, 0);
  ELSE
     SET @cmonth = '0' + STR(@imonth, 1, 0);

  IF (LEN(@iday) = 2)
     SET @cday = STR(@iday, 2, 0);
  ELSE
     SET @cday = '0' + STR(@iday, 1, 0);


  IF (LEN(@ihours) = 2)
     SET @chours = STR(@ihours, 2, 0);
  ELSE
     SET @chours = '0' + STR(@ihours, 1, 0);

  IF (LEN(@iminutes) = 2)
     SET @cminutes = STR(@iminutes, 2, 0);
  ELSE
     SET @cminutes = '0' + STR(@iminutes, 1, 0);

  IF (LEN(@iseconds) = 2)
     SET @cseconds = STR(@iseconds, 2, 0);
  ELSE
     SET @cseconds = '0' + STR(@iseconds, 1, 0);


  SET @returned_date = @cyear + '-' + @cmonth + '-' + @cday + ' ' + @chours + ':' + @cminutes + ':' + @cseconds;

  return @returned_date;
END
QUERY;
      $this->execute($query);

      $query = <<<QUERY
CREATE FUNCTION [dbo].[GREATEST] (@first_entry bigint, @second_entry bigint)
RETURNS bigint
AS
BEGIN
    DECLARE @return_value bigint;
    IF(@first_entry <= @second_entry)
        SET @return_value = @second_entry;
    ELSE
        SET @return_value = @first_entry;
    RETURN @return_value;
END
QUERY;
      $this->execute($query);

      $query = <<<QUERY
CREATE FUNCTION [dbo].[LEAST] (@first_entry bigint, @second_entry bigint)
RETURNS bigint
AS
BEGIN
    DECLARE @return_value bigint;
    IF(@first_entry <= @second_entry)
        SET @return_value = @first_entry;
    ELSE
        SET @return_value = @second_entry;
    RETURN @return_value;
END
QUERY;
      $this->execute($query);

      $query = <<<QUERY
CREATE FUNCTION [dbo].[PASSWORD] (@pass varchar(255))
RETURNS varchar(255)
AS
BEGIN
RETURN SUBSTRING([master].[dbo].fn_varbintohexstr(HashBytes('MD5', @pass)), 3, 32)
END
QUERY;
      $this->execute($query);

      $query = <<<QUERY
CREATE FUNCTION [dbo].[SHOW] (@table_name  varchar(30))
RETURNS varchar(30)
AS
BEGIN
   RETURN @table_name
END
QUERY;
      $this->execute($query);

      $query = <<<QUERY
CREATE FUNCTION [dbo].[UNIX_TIMESTAMP] (@indate datetime)
RETURNS BIGINT
AS
BEGIN
	DECLARE @diff BIGINT
	IF @indate < '19020101' OR @indate > '20380101'
	BEGIN
		SET @diff = DATEDIFF(minute, DATEADD(minute, DATEPART ( TZoffset , SYSDATETIMEOFFSET()), '1970-01-01 00:00:00' ), @indate)
		SET @diff = @diff * 60
	END
	ELSE
		SET @diff = DATEDIFF(second, DATEADD(minute, DATEPART ( TZoffset , SYSDATETIMEOFFSET()), '1970-01-01 00:00:00' ), @indate)
	RETURN @diff
END
QUERY;
      $this->execute($query);

      $query = <<<QUERY
create function [dbo].[ranker] (@evGroupId int, @group int, @rank int)
returns int
as
begin
return case when @evGroupId = @group then @rank+1 else 1 end
end
QUERY;
      $this->execute($query);

      $query = <<<QUERY
create FUNCTION [dbo].SUBSTRING_INDEX
(
@BaseString varchar(4000),
@caracter varchar(4000),
@pos int
) RETURNS varchar(4000)

AS
/* ****************************************************
Description:
EQuivalent a mysql substring_index
Created by Omar Rodriguez Tineo
**************************************************** */
BEGIN

/*
DECLARE @pos INT
Declare @BaseString varchar(255)
Declare @caracter varchar(255)
*/
Declare @indice tinyint
Declare @pos2 int
Declare @lastPos2 int
Declare @length int
Declare @result varchar(4000)

set @result = @BaseString
set @pos2= 1

set @length = LEN(@caracter)
if @pos <= 1
begin
   set @length = 0
end

set @lastPos2 = 1
set @indice = 0

while @indice < ABS(@pos)
begin

set @lastPos2 = @pos2
set @pos2 = CHARINDEX(@caracter,@BaseString,@pos2+1)

set @indice = @indice +1



if @indice = ABS(@pos)
begin
if (@pos2-1) <= 0
begin
set @result= substring(left(@BaseString,1), @lastPos2 + @length, 255)
break
end
else
begin
set @result= substring(left(@BaseString,(@pos2-1)), @lastPos2 + @length, 255)
break
end
end
else
continue

end

RETURN @result
END
QUERY;
      $this->execute($query);

      $query = <<<QUERY
create FUNCTION [dbo].LPAD
(
@str varchar(4000),
@length int,
@padstr varchar(1)
) RETURNS varchar(4000)
AS
BEGIN
RETURN replicate(@padstr, @length - len(@str)) + @str
END
QUERY;
      $this->execute($query);

      $query = <<<QUERY
create FUNCTION [dbo].RPAD
(
@str varchar(4000),
@length int,
@padstr varchar(1)
) RETURNS varchar(4000)
AS
BEGIN
RETURN @str + replicate(@padstr, @length - len(@str))
END
QUERY;
      $this->execute($query);


// CREATING OF GROUP_CONCAT

      $query = <<<QUERY
CREATE ASSEMBLY [GroupConcatProject]
AUTHORIZATION [dbo]
FROM 
WITH PERMISSION_SET = SAFE
QUERY;
      $this->execute($query);

      $query = <<<QUERY
ALTER ASSEMBLY [GroupConcatProject]
ADD FILE FROM 0xEFBBBF7573696E672053797374656D3B0D0A7573696E672053797374656D2E446174613B0D0A7573696E67204D6963726F736F66742E53716C5365727665722E5365727665723B0D0A7573696E672053797374656D2E446174612E53716C54797065733B0D0A7573696E672053797374656D2E494F3B0D0A7573696E672053797374656D2E546578743B0D0A0D0A5B53657269616C697A61626C655D0D0A5B53716C55736572446566696E6564416767726567617465280D0A20202020466F726D61742E55736572446566696E65642C202F2F75736520636C722073657269616C697A6174696F6E20746F2073657269616C697A652074686520696E7465726D65646961746520726573756C740D0A202020204973496E76617269616E74546F4E756C6C73203D20747275652C202F2F6F7074696D697A65722070726F70657274790D0A202020204973496E76617269616E74546F4475706C696361746573203D2066616C73652C202F2F6F7074696D697A65722070726F70657274790D0A202020204973496E76617269616E74546F4F72646572203D2066616C73652C202F2F6F7074696D697A65722070726F70657274790D0A202020204D61784279746553697A65203D202D3129202F2F6D6178696D756D2073697A6520696E206279746573206F66207065727369737465642076616C75650D0A5D0D0A7075626C696320636C6173732047524F55505F434F4E434154203A204942696E61727953657269616C697A650D0A7B0D0A202020202F2F2F203C73756D6D6172793E0D0A202020202F2F2F20546865207661726961626C65207468617420686F6C64732074686520696E7465726D65646961746520726573756C74206F662074686520636F6E636174656E6174696F6E0D0A202020202F2F2F203C2F73756D6D6172793E0D0A202020207072697661746520537472696E674275696C64657220696E7465726D656469617465526573756C743B0D0A0D0A202020202F2F2F203C73756D6D6172793E0D0A202020202F2F2F20496E697469616C697A652074686520696E7465726E616C206461746120737472756374757265730D0A202020202F2F2F203C2F73756D6D6172793E0D0A202020207075626C696320766F696420496E697428290D0A202020207B0D0A2020202020202020746869732E696E7465726D656469617465526573756C74203D206E657720537472696E674275696C64657228293B0D0A202020207D0D0A0D0A202020202F2F2F203C73756D6D6172793E0D0A202020202F2F2F20416363756D756C61746520746865206E6578742076616C75652C206E6F74206966207468652076616C7565206973206E756C6C0D0A202020202F2F2F203C2F73756D6D6172793E0D0A202020202F2F2F203C706172616D206E616D653D2276616C7565223E3C2F706172616D3E0D0A202020207075626C696320766F696420416363756D756C617465285B53716C4661636574284D617853697A65203D202D31295D2053716C537472696E672076616C7565290D0A202020207B0D0A20202020202020206966202876616C75652E49734E756C6C290D0A20202020202020207B0D0A20202020202020202020202072657475726E3B0D0A20202020202020207D0D0A0D0A2020202020202020746869732E696E7465726D656469617465526573756C742E417070656E642876616C75652E56616C7565292E417070656E6428272C27293B0D0A202020207D0D0A0D0A202020202F2F2F203C73756D6D6172793E0D0A202020202F2F2F204D6572676520746865207061727469616C6C7920636F6D70757465642061676772656761746520776974682074686973206167677265676174652E0D0A202020202F2F2F203C2F73756D6D6172793E0D0A202020202F2F2F203C706172616D206E616D653D226F74686572223E3C2F706172616D3E0D0A202020207075626C696320766F6964204D657267652847524F55505F434F4E434154206F74686572290D0A202020207B0D0A2020202020202020746869732E696E7465726D656469617465526573756C742E417070656E64286F746865722E696E7465726D656469617465526573756C74293B0D0A20202020202020200D0A202020207D0D0A202020205B72657475726E3A2053716C4661636574284D617853697A65203D202D31295D0D0A202020200D0A202020202F2F2F203C73756D6D6172793E0D0A202020202F2F2F2043616C6C65642061742074686520656E64206F66206167677265676174696F6E2C20746F2072657475726E2074686520726573756C7473206F6620746865206167677265676174696F6E2E0D0A202020202F2F2F203C2F73756D6D6172793E0D0A202020202F2F2F203C72657475726E733E3C2F72657475726E733E0D0A202020207075626C69632053716C537472696E67205465726D696E61746528290D0A202020207B0D0A2020202020202020737472696E67206F7574707574203D20737472696E672E456D7074793B0D0A20202020202020202F2F64656C6574652074686520747261696C696E6720636F6D6D612C20696620616E790D0A202020202020202069662028746869732E696E7465726D656469617465526573756C7420213D206E756C6C0D0A202020202020202020202020262620746869732E696E7465726D656469617465526573756C742E4C656E677468203E2030290D0A20202020202020207B0D0A2020202020202020202020206F7574707574203D20746869732E696E7465726D656469617465526573756C742E546F537472696E6728302C20746869732E696E7465726D656469617465526573756C742E4C656E677468202D2031293B0D0A20202020202020207D0D0A0D0A202020202020202072657475726E206E65772053716C537472696E67286F7574707574293B0D0A202020207D0D0A0D0A202020207075626C696320766F696420526561642842696E6172795265616465722072290D0A202020207B0D0A2020202020202020696E7465726D656469617465526573756C74203D206E657720537472696E674275696C64657228722E52656164537472696E672829293B0D0A202020207D0D0A0D0A202020207075626C696320766F69642057726974652842696E6172795772697465722077290D0A202020207B0D0A2020202020202020772E577269746528746869732E696E7465726D656469617465526573756C742E546F537472696E672829293B0D0A202020207D0D0A7D
AS N'GroupConcat.cs'
QUERY;
      $this->execute($query);

      $query = <<<QUERY
ALTER ASSEMBLY [GroupConcatProject]
ADD FILE FROM 0x
AS N'Properties\AssemblyInfo.cs'
QUERY;
      $this->execute($query);

      $query = <<<QUERY
EXEC sys.sp_addextendedproperty @name=N'SqlAssemblyProjectRoot', @value=N'c:\Users\mike\Documents\Visual Studio 2010\Projects\GroupConcatProject\GroupConcatProject' , @level0type=N'ASSEMBLY',@level0name=N'GroupConcatProject'
QUERY;
      $this->execute($query);

      $query = <<<QUERY
CREATE AGGREGATE [dbo].[GROUP_CONCAT]
(@value [nvarchar](max))
RETURNS[nvarchar](max)
EXTERNAL NAME [GroupConcatProject].[GROUP_CONCAT]
QUERY;
      $this->execute($query);
  }
}
