// TODO: rewrite code, generated by Grid Deploy Table! It is old-fashioned
window.gridScriptsLoaded || (function () {
	var checkboxState = {},
		gridPrevSelectedCheckbox = {},
		gridSelectionsState = {},
		narrowColumns = /(:?^|\s|\xA0)(:?grid-actions|checkboxes|checkboxes|grid-planDate|grid-lastUpdateDate|grid-link_types|grid-begin|grid-end|grid-type|grid-volume|grid-public|grid-updated|grid-subject|grid-questions|grid-location|grid-role|grid-login|grid-created|grid-status|grid-responsobility|grid-assigned|grid-condition|grid-students|grid-percent|grid-bal|grid-stop|grid-narrow|grid-subid|grid-chain|grid-process)(:?\s|\xA0|$)/,
		documentResizeHandlerAdded = false;

	window.updateGridCssClasses = function ($grid) {
		var gridId = $grid.attr('id'),
			classes = _.map($grid.find('thead > tr:first > th').get(), function (item) {
				return '' + item.className;
			}),
			gridActionsMap = ['els-grid-no-actions', 'els-grid-one-action', 'els-grid-many-actions'],
			$tr = $grid.find('tbody > tr');
		// FIXME: move to backend
		// add css classes to row depending on number of actions in a row

		if ($grid.is('.patched')) {
			return;
		}

		$grid.addClass('patched');

		$tr.each(function () {
			var $actionsCell, actionsCount;
			$(this).children('td').each(function (idx) {
				if ((classes[idx] || '').indexOf('grid-actions') != -1) {
					$actionsCell = $(this);
				}
				$(this).addClass(classes[idx]);
			});
			actionsCount = $actionsCell ? $actionsCell.find('li').length : 0;
			$(this).addClass(gridActionsMap[actionsCount] ? gridActionsMap[actionsCount] : gridActionsMap[2]);
		});

		// FIXME: move to backend
		// marks sorted column header (<th>)
		$grid.find('thead > tr:first > th')
			.find('a > span > img')
			.closest('th, td').addClass('sorted');

		// FIXME: move to backend
		// add combined css classes to support ie6
		$tr.filter('.selected').each(function () {
			var $this = $(this);
			$this.addClass($this.is('.odd') ? 'selected-odd' : 'selected-even');
		}).last().addClass('selected-last');

		// FIXME: move to backend
		// mark first/last row in tbody. Sometimes in the future -- will be useful
		$tr.not('.filters_tr')
			.last().addClass('els-grid-last-row').end()
			.first().addClass('els-grid-first-row');

		// FIXME: move to backend
		// mark first/last cell in every row
		$grid.find('> table > * > tr')
			.find('> *:first-child').addClass('first-cell').end()
			.find('> *:last-child').addClass('last-cell');

		// FIXME: move to backend
		// shitty, useless, template :)
		if ($(document.documentElement).is('.ie')) {
			$grid.find('.bottom-grid > .pagination > *:empty').remove();
		}

		// FIXME: move to backend
		// empty cells appear without border in ie6/7 if border-collapse: separate
		if ($(document.documentElement).is('.ie6, .ie7')) {
			$grid.children('table').find('td, th').append('<span></span>');
		}

		// FIXME: move to backend
		// hack for narrowing columns.
		var colLine = [];
		var isIe = $(document.documentElement).is('.ie');
		for (var i = 0; i < classes.length; ++i) {
			colLine.push('<col width="' + (narrowColumns.test(classes[i] || '') ? '1' + (isIe ? '' : '%') : '*') + '"/>');
		}
		$grid.children('table').prepend('<colgroup>' + colLine.join('') + '</colgroup>');

		if (!HM.moduleExists('grid')) {
			// hack to remove gaps in left border of grid
			_.defer(function () {
				$('<div class="hacky-hack"/>')
					.appendTo($grid);
				if (!documentResizeHandlerAdded) {
					documentResizeHandlerAdded = true;
					$(document).bind('resize.hacky-hack', function () {
						var $hackyHacks = $('.els-grid > div.hacky-hack');
						$hackyHacks.each(function () {
							var $grid = $(this).closest('.els-grid'),
								$table = $grid.find('> table:first');
							$(this).css({
								height: $table.height(),
								top: $table.offset().top - $grid.offset().top
							});
						});
					});
				}
				$(document).trigger('resize.hacky-hack');
			});
		}
	}

	$(document).delegate('.els-grid tbody tr.filters_tr', 'keypress', function (event) {
		if (event.keyCode == 13)
			event.preventDefault();
	});

	// gmailcheckbox checkbox
	$(document).delegate('.els-grid .gmail-checkbox input[type="checkbox"]', 'click', function (event) {
		var $target = $(event.currentTarget),
			gridId = $target.closest('.els-grid').attr('id');
		if (event.shiftKey) {
			$target.propAttr('checked', true);
			GridHelpers.checkAll(gridId);
		} else if ($target.is(':checked')) {
			GridHelpers.check(gridId);
		} else {
			GridHelpers.uncheck(gridId);
		}
	});

	// add hover classes to rows
	$(document).delegate('.els-grid tbody tr', 'mouseenter mouseleave', function (event) {
		var $target = $(event.currentTarget),
			$tr = $target.closest('tr'),
			$grid = $tr.closest('.els-grid');

		if ($grid.hasClass('hm-grid-is-happy')) {
			return;
		}

		if ($tr.is('.filters_tr')) {
			return;
		}
		if (event.type == 'mouseleave') {
			$tr.removeClass('ui-state-hover');
		} else {
			$tr.siblings('tr.even, tr.odd')
				.removeClass('ui-state-hover')
				.end()
				.addClass('ui-state-hover');
		}
	});

	// show grid row actions
	$(document).delegate('.els-grid tbody tr', 'mouseup', function (event) {

		// !-------------------------------------------------------! //
		// фикс появления менюшки таблицы при нажатии по отображению
		// так называемого .workflow
		if ($(event.target).closest('.workflowBulbs')[0]) {
			return;
		}
		// !-------------------------------------------------------! //

		var $tr = $(event.currentTarget),
			$grid = $tr.closest('.els-grid'),
			gridId = $grid.attr('id'),
			$menu;

		if ($grid.hasClass('hm-grid-is-happy')) {
			return;
		}

		if ($(event.target).closest('.div_expand').length) {
			return;
		}
		if ($tr.is('.filters_tr')) {
			return;
		}
		if (event.which != 1) {
			return;
		}
		if (!$tr.is('.els-grid-many-actions')) {
			return;
		}
		if ($(event.target).is('.ui-els-icon, input, select, button, a, .grid__checkbox')) {
			return;
		}
		$tr.siblings('tr.even, tr.odd')
			.removeClass('ui-state-selected ui-state-selected-even ui-state-selected-odd')
			.end()
			.addClass('ui-state-selected ' + ($tr.is('.even') ? 'ui-state-selected-even' : 'ui-state-selected-odd'));
		$menu = $tr.find('> td.grid-actions > .grid-row-actions');
		if (!$menu.length) {
			$menu = $('.grid-row-actions[data-grid-id="' + gridId + '"][data-grid-row-id="' + $tr.attr('id') + '"]');
		}
		$menu.length && $menu
			.appendTo('body')
			.attr('data-grid-id', gridId)
			.attr('data-grid-row-id', $tr.attr('id'))
			.attr('data-origin', $tr.closest('*[id]').attr('id'))
			.show()
			.position({
				my: 'right top',
				at: 'right bottom',
				offset: "-2 -1",
				of: $tr,
				collision: 'none'
			});
	});
	// disable context menu :)
	//$(document).delegate('.els-grid tbody tr', 'contextmenu', function (event) {
	//	event.preventDefault();
	//});
	// hide grid row actions
	$(document).mouseup(function (event) {
		var $target = $(event.target),
			trId = $target.closest('tr.els-grid-many-actions').attr('id'),
			$grid = $target.closest('.els-grid'),
			gridId = $grid.attr('id'),
			$trs = $('.els-grid tr'),
			$gridRowActions = $('body > .grid-row-actions');

		if ($grid.hasClass('hm-grid-is-happy')) {
			return;
		}

		if (trId) {
			$gridRowActions = $gridRowActions
				.not('.grid-row-actions[data-grid-id="' + gridId + '"][data-grid-row-id="' + trId + '"]');
			$trs = $trs.not($target.closest('tr.els-grid-many-actions'));
		}
		$gridRowActions.hide();
		$trs.removeClass('ui-state-selected');
	});

	// disable default <a> actions in gmail checkbox menu
	$(document).delegate('.gmail-checkbox-menu a', 'click', function (event) {
		event.preventDefault();
	});
	// show gmail checkbox menu
	$(document).delegate('.els-grid .gmail-checkbox button', 'click', function (event) {
		var $target = $(event.target),
			gridId = $target.closest('.els-grid').attr('id'),
			$menu;
		if (!$target.is('input')) {
			$menu = $target.closest('.gmail-checkbox').children('.gmail-checkbox-menu');
			if (!$menu.length) {
				$menu = $('.gmail-checkbox-menu[data-grid-id="' + gridId + '"]');
			}
			$menu
				.appendTo('body')
				.attr('data-grid-id', gridId)
				.attr('data-origin', $target.closest('*[id]').attr('id'))
				.toggle()
				.position({
					my: 'left top',
					at: 'left bottom',
					offset: "2 -2",
					of: event.currentTarget,
					collision: 'none'
				});
		}
	});
	// hide gmail checkbox menu
	$(document).click(function (event) {
		var $target = $(event.target),
			$menu = $target.closest('.gmail-checkbox-menu'),
			$menus = $('.gmail-checkbox-menu'),
			$gmailCheckbox = $target.closest('.gmail-checkbox');
		if ($gmailCheckbox.length && !$target.is('input[type="checkbox"]')) {
			$menus = $menus.not('.gmail-checkbox-menu[data-grid-id="' + $target.closest('.els-grid').attr('id') + '"]');
		}
		if (!$target.is('a')) {
			$menus = $menus.not($menu);
		}
		$menus.hide();
	});

	function updateSelected($grid, values) {
		$grid.find('.selected-count')
			.text(values.length);
		$grid.find('#postMassIds_' + $grid.attr('id'))
			.val(values.join(','));
		$grid.find('.gmail-checkbox input[type="checkbox"]')
			.propAttr('checked', !!values.length);
	}

	function getSelected($grid) {
		var selected = gridSelectionsState[$grid.attr('id')];
		if ($grid.find('#postMassIds_' + $grid.attr('id')).length) {
			selected = _(($grid.find('#postMassIds_' + $grid.attr('id'))
				.val() || '').split(',')).without('');
		}
		return selected;
	}

	function getAll($grid) {
		return _(($grid.find('#massActionsAll_' + $grid.attr('id'))
			.val() || '').split(',')).without('');
	}

	function getAllVisible($grid) {
		return $grid.find('input.mass-checkbox').map(function () {
			return this.value;
		}).get();
	}
	// do not cache return results!!!!
	function getGrid(grid) {
		return $('#' + grid);
	}

	function checkInternal($grid, selected) {
		var $checkboxes = $grid.find('input.mass-checkbox');
		if (!selected || selected.length == 0) {
			$checkboxes.propAttr('checked', !selected);
		} else {
			$checkboxes.each(function () {
				$(this).propAttr('checked', _(selected).indexOf('' + this.value) != -1);
			});
		}
	}

	function gridSubmitValidate(gridId) {
		var $grid = getGrid(gridId),
			selected = getSelected($grid),
			$gridActions = $grid.find('#gridAction_' + gridId),
			confirmMessages = window['confirmMessages_' + gridId],
			confirmMessage, selectedAction = $gridActions.val();

		if (!selectedAction || (selectedAction == (window.location.pathname || '').replace(/\/$/, '') && $gridActions.prop('selectedIndex') == 0)) {
			window.elsHelpers.alert(window['translations_' + gridId]['no actions selected']);
			return 'postpone';
		}

		if (selected.length == 0) {
			window.elsHelpers.alert(window['translations_' + gridId]['no records selected']);
			return 'postpone';
		}

		confirmMessage = _(_.keys(confirmMessages)).detect(function (key) {
			return selectedAction.indexOf(key) != -1;
		});
		confirmMessage = confirmMessages[confirmMessage];

		if (!confirmMessage) {
			confirmMessage = jQuery.trim(window['translations_' + gridId]['are u shure']).replace(/\?$/, '') + ' «' + $gridActions.children('option:selected').text() + '»';
		}
		if (confirmMessage) {
			window.elsHelpers.confirm(confirmMessage)
				.done(function () {
					document.forms['massActions_' + gridId].action = selectedAction;
					$gridActions.closest('form').submit();
				})
				.fail(function () {
					document.forms['massActions_' + gridId].action = '';
				});
			return 'postpone';
		} else {
			document.forms['massActions_' + gridId].action = selectedAction;
		}
	}

	window.GridHelpers = {
		check: function (gridId) {
			var $grid = getGrid(gridId);
			checkInternal($grid);
			updateSelected($grid, getAllVisible($grid));
		},
		checkAll: function (gridId) {
			var $grid = getGrid(gridId);
			checkInternal($grid);
			updateSelected($grid, getAll($grid));
		},
		inverse: function (gridId) {
			var $grid = getGrid(gridId),
				selected;

			selected = _.without.apply(_, [].concat(
				[getAllVisible($grid)],
				getSelected($grid)
			));
			checkInternal($grid, selected);
			updateSelected($grid, selected);
		},
		uncheck: function (gridId) {
			var $grid = getGrid(gridId);
			checkInternal($grid, []);
			updateSelected($grid, []);
		}
	};

	$(document).delegate('.els-grid input.mass-checkbox', 'click', function (event) {
		var $target = $(event.currentTarget),
			gridId = $target.closest('.els-grid').attr('id'),
			$grid = getGrid(gridId),
			selected = getSelected($grid);
		if ($target.is(':checked')) {
			selected.push('' + $target.val());
			selected = _(selected).uniq();
		} else {
			selected = _(selected).without('' + $target.val());
		}
		updateSelected($grid, selected);
	});
	$(document).delegate('.els-grid input.mass-checkbox', 'click', function (event) {
		var $target = $(event.currentTarget),
			$grid = $target.closest('.els-grid'),
			$allCheckboxes, $cb = gridPrevSelectedCheckbox[$grid.attr('id')],
			cbState, args, changed, selected;
		if (event.shiftKey && $cb) {
			$allCheckboxes = $grid.find('input.mass-checkbox');
			args = [$allCheckboxes.index($target), $allCheckboxes.index($cb)];
			cbState = $cb.is(':checked');

			changed = [];
			for (var j = Math.max.apply(Math, args); j >= Math.min.apply(Math, args); --j) {
				changed.push('' + $allCheckboxes.eq(j).val());
			}

			selected = getSelected($grid);
			selected = [].concat(cbState ? selected : [selected], changed);
			selected = _[cbState ? 'uniq' : 'without'].apply(_, cbState ? [selected] : selected);
			checkInternal($grid, selected);
			updateSelected($grid, selected);
		}
		gridPrevSelectedCheckbox[$grid.attr('id')] = $target;
	});
	$(document).delegate('.els-grid .mass-actions form input[type="submit"]', 'click', function (event) {
		var $this = $(event.currentTarget),
			gridId = $this.closest('.els-grid').attr('id'),
			$form = $this.closest('form#massActions_' + gridId),
			action = $form.find('select#gridAction_' + gridId).val();

		if (/\/transfer-to-next-training-period(\/|$)/.test(action)) {
			var cbId, dialogId, $dialog;

			cbId = 'ttntp-confirm-' + gridId;
			dialogId = 'ttntp-gialog-' + gridId;
			$dialog = $('#' + dialogId);

			if (!$dialog.length) {
				$dialog = $('<div id="' + dialogId + '"/>')
					.append($('<p/>').text(window.translations_grid.dconfirm.text))
					.append(
						$('<p/>')
						.html('<input type="checkbox" id="' + cbId + '"/> <label for="' + cbId + '"/>')
						.find('label')
						.text(window.translations_grid.dconfirm.generate)
						.end()
					)
					.hide().appendTo('body').dialog({
						autoOpen: false,
						resizable: false,
						modal: true,
						buttons: [{
							text: window.translations_grid.dconfirm.no,
							click: function () {
								$form.find('input[name="with_generate"]').remove();
								$dialog.dialog('close');
							}
						}, {
							text: window.translations_grid.dconfirm.yes,
							click: function () {
								$form
									.find('input[name="with_generate"]').remove().end()
									.append('<input type="hidden" name="with_generate" value="' + Number($(this).find('input#' + cbId).is(':checked')) + '">');
								$dialog.dialog('close');
								$form.prop('action', action);
								$form.submit();
							}
						}],
						title: window.translations_grid.dconfirm.title
					});
			}

			$dialog.find('input#' + cbId).prop('checked', false);
			$form.find('input[name="with_generate"]').remove();

			$dialog.dialog('open');

			event.preventDefault();
		} else if (/^(false|postpone)$/.test('' + gridSubmitValidate(gridId))) {
			event.preventDefault();
		}
	});

	window.gridAjaxRequestStartedInternal = function ($grid) {
		$('.grid-row-actions[data-grid-id="' + $grid.attr('id') + '"]').each(function () {
			$(this).hide().appendTo('tr#' + $(this).attr('data-grid-row-id') + ' > td.grid-actions');
		});
		gridSelectionsState[$grid.attr('id')] = getSelected($grid);
	}
	window.gridAjaxRequestCompletedInternal = function ($grid) {
		var gridId = $grid.attr('id');
		gridPrevSelectedCheckbox[gridId] = null;
		updateGridCssClasses($grid);
		if (gridSelectionsState[gridId]) {
			checkInternal($grid, gridSelectionsState[gridId]);
			updateSelected($grid, gridSelectionsState[gridId]);
		}
	}
})();

window.gridScriptsLoaded = 'yes';

$(function () {
	$('.els-grid').each(function () {
		updateGridCssClasses($(this));
	});
});

function gridTotalProhibiter(event) {
	event.stopImmediatePropagation();
	event.preventDefault();
	return false;
}

function gridShowOverlay(context) {
	var $ajaxSpinner = $('<div class="ajax-spinner-local">');
	$ajaxSpinner.appendTo(context);
	$(context)
		.bind('click mousedown mouseup keydown keyup keypress', gridTotalProhibiter);
	$(window).bind('resize.grid-overlay', function () {
		$ajaxSpinner
			.css({
				left: 0,
				right: 0,
				top: 0,
				bottom: 0
			});
	}).trigger('resize.grid-overlay');
	_.defer(function () {
		$(window).trigger('resize.grid-overlay');
	});
}

function gridHideOverlay(context) {
	$(context)
		.unbind('click mousedown mouseup keydown keyup keypress', gridTotalProhibiter)
		.find('> .ajax-spinner-local')
		.remove();
	$(window).unbind('resize.grid-overlay');
}

function gridAjaxRequestStarted(context) {
	gridShowOverlay(context);
	gridAjaxRequestStartedInternal($(context));
}

function gridAjaxRequestCompleted(context) {
	gridAjaxRequestCompletedInternal($(context));
	gridHideOverlay(context);
	$("div.multiple_toggle").toggle(
		function () {
			var sel = $(this).prevAll("select:visible")[0];
			sel.size = 10;
			sel.multiple = true;
		},
		function () {
			var sel = $(this).prevAll("select:visible")[0]
			sel.size = 1;
			sel.multiple = false;
		}
	);
	filterPrc();
	fCollasz();
}
/* ---------- FILTER INPUT/CLEAR FILTER ------------ */
function checkFilterInput(obj) {
	var ths = $(obj)
	if (ths.length > 0) {
		for (var i = 0; i < ths.length; i++) {
			fBorder(ths[i])
		}
	}
}

function fBorder(obj) {
	if ($(obj).val().length > 0) {
		$(obj).addClass("fillFilter");
	} else {
		$(obj).removeClass("fillFilter");
	}
}

function filterPrc() {
	var obj;
	var arInp = $("input[id^='filter_'],select[id^='filter_']")
	var iFilter = []
	var j = 0
	$.map(arInp, function (i) {
		if ($(i).val() != "") {
			iFilter[j++] = i
			var cFilter = $(i).next()
			if (cFilter.attr("class") != "clearFilterSpan") {
				var cFilter = cFilter.next()
			}
			cFilter.addClass("x_filter")
			$(i).parents(".wrapFiltersInput").css("padding-right", "17px")
		} else {
			$(i).next().removeClass("x_filter")
			if ($(i).parents(".grid-filter-daterange").length == 0) {
				$(i).parents(".wrapFiltersInput").css("padding-right", "0px")
			}
		}
	})
	checkFilterInput("input[id^='filter_'],select[id^='filter_']");
	$("input[id^='filter_']").bind("focus", function () {
		fBorder(this)
	})
	$("input[id^='filter_']").bind("blur", function () {
		fBorder(this)
	})
	$("input[id^='filter_'], select[id^='filter_']").bind("change", function () {
		fBorder(this)
	})
	$("input[id^='filter_']").bind("keypress", function () {
		fBorder(this)
	})

	$(".x_filter").bind("click", function () {
		var cFilter = $(this).prev();
		var tag = cFilter[0].tagName;
		if (tag == "SELECT") {
			$(cFilter)[0].options.selectedIndex = 0
			$(cFilter).trigger("keyup")
		}
		if (tag != "INPUT" && tag != "SELECT") {
			cFilter = $(cFilter).prev();
		}
		$(cFilter).val("");
		fBorder(cFilter);

		$(cFilter).trigger("keyup");
	})
}
/*------------------------------------------*/
function fCollasz() {
	var td = $('.els-grid table tr[id] td')
	$.map(td, function (o) {
		if ($(o).find("p").length > 1) {
			$(o).addClass('td_expand');
		}
	})
	$(".td_expand").collapsorz({
		minimum: 1,
		toggle: "p",
		callback: function (obj) {
			$menu = $(".els-grid-many-actions .grid-row-actions").filter(":visible")
			$menu.position({
				my: 'right top',
				at: 'right bottom',
				offset: "-2 -1",
				of: $(obj).parents("tr"),
				collision: 'none'
			});
		}
	});
}
$(document).ready(function () {
	if ($.browser.msie == true && $.browser.version.split(".")[0] == '9')
		$("html").addClass("ie9")

	fCollasz();
	filterPrc();
	/* -------  multiple select actions  --------- */
	$("div.multiple_toggle").toggle(
		function () {
			var sel = $(this).prevAll("select:visible")[0];
			sel.size = 10;
			sel.multiple = true;
		},
		function () {
			var sel = $(this).prevAll("select:visible")[0];
			sel.size = 1;
			sel.multiple = false;
		}
	);
});

/* paginator */
function paginatorPrc(val, url, pageNum, ajax) {
	url = url.replace(/^\//, "") + ((val - 1) * pageNum);
	gridAjax(ajax, url);
}

function paginatorChange(url, pageNum, ajax) {
	$(".page-numbers a").bind('click', function () {
		var $target = $(this),
			val = $target.text();
		if (isNaN(val)) {
			prev = $target.prev('a').length;
			next = $target.next('a').length;
			if (prev && !next) {
				val = parseInt($(".page-numbers strong").text()) + 1;
			}
			if (!prev && next) {
				val = parseInt($(".page-numbers strong").text()) - 1;
			}
		}
		paginatorPrc(parseInt(val, 10), url, pageNum, ajax);
	})

	$(".page-select").bind('keydown', function (e) {
		if (e.keyCode != 13) return;
		var val = $(e.target).val();
		if ($(e.target).is("select")) {
			val = (val / pageNum) + 1;
		}
		paginatorPrc(parseInt(val, 10), url, pageNum, ajax);
	})
	$(".page-select select").bind('change', function (e) {
		var val = $(e.target).val();
		if ($(e.target).is("select")) {
			val = (val / pageNum) + 1;
		}
		paginatorPrc(parseInt(val, 10), url, pageNum, ajax);
	})
}
/* добавил title для option в multiselect ie7*/
$(function () {
	var $massActions = $('#massActions_grid'),
		arOpt,
		i;
	if ($("html").is(".ie7")) {
		arOpt = $massActions.find("select:hidden").find("option");
		arOpt.each(function (i) {
			arOpt[i].title = arOpt[i].text;
		})
	}
})
/* Горизонтальный скролинг */
$(function () {
	var $tableWrapper = $('.els-grid.patched');
	if (!$tableWrapper.length) return;
	var tableWidth = $tableWrapper.width();
	$tableWrapper.on('mousewheel DOMMouseScroll', function (event) {
		// В хроме не обязательно реализовывать, там и так есть скролл на шифт
		var isChromium = !!window['chrome'];
		if (isChromium) {
			return;
		}
		var isAltPressed = event.altKey;
		var isShiftPressed = event.altKey;
		var qwerty = 76123;
		if (isAltPressed && isShiftPressed) {
			var originalEvent = event.originalEvent;
			var delta = void 0;
			if (originalEvent.wheelDelta) {
				// IE
				delta = originalEvent.wheelDelta;
			} else {
				// Firefox
				delta = originalEvent.detail * -50;
			}
			$(this).stop().animate({
				scrollLeft: '-=' + delta
			}, 100);
			event.preventDefault();
		}
	});
	// Установка враппера футера таблицы
	$tableWrapper.find('tfoot td > div').wrapAll($('<div/>'));
	var $tfootWrapper = $tableWrapper.find('tfoot td > div').css({
		maxWidth: (tableWidth - 15) + 'px',
		position: 'relative'
	});
	// Фиксация требуемых элементов таблицы при скролле
	$tableWrapper.find('table').find('thead, tbody').find('tr').each(function () {
		$(this).css({
			position: 'relative'
		});
		var $cells = $(this).find('td, th');
		var $firstCell = $cells.filter(':first');
		var $secondCell = $cells.filter(':nth-child(2)');
		$cells.css({
			position: 'relative',
		});
		$firstCell.add($secondCell).css({
			zIndex: '10',
		});
		// Бинд скролла
		$tableWrapper.scroll(function (event) {
			var scrollLeft = $(this).scrollLeft();
			// Фиксация первой и второй ячейки, а также футера
			$firstCell.add($secondCell).add($tfootWrapper).css({
				left: scrollLeft + 'px'
			});
		}).trigger('scroll');
	});
	// фикс бага «улетания» меню с действиями
	// var $gridRowActionsMenu = $('.grid-row-actions');
	var clientRect = $tableWrapper[0].getBoundingClientRect();
	$tableWrapper.find('table tbody tr').on('click,resize', function (event) {
		var $gridRowActionsMenu = $('.grid-row-actions:last');
		var menuWidth = $gridRowActionsMenu.width();
		$gridRowActionsMenu.css({
			left: (clientRect.left + tableWidth - menuWidth - 10) + 'px'
		});
	});
});
//# sourceMappingURL=horisontalScroll.js.map