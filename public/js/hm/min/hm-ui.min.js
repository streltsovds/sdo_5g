HM.define("hm.ui.Component", {extend:"hm.ObservableClass", config:{renderTo:"", elTag:"div"}, __construct:function() {
  this._init();
  this._initEvemts();
  if(this.renderTo) {
    $(this.renderTo).append(this.el)
  }
}, _init:function() {
  this.el = document.createElement(this.elTag);
  this.$el = $(this.el)
}, _initEvemts:function() {
}});
HM.define("hm.ui.List", {extend:"hm.ui.Component", config:{minWidth:"30px", displayField:"name", valueField:"id"}, _init:function() {
  this.callParent(arguments);
  this.renderList()
}, renderList:function() {
  var collection = this.collection, ln = collection.length();
  if(!this.collection) {
    throw"\u0414\u043b\u044f hm.ui.List \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d \u043e\u0431\u044a\u0435\u043a\u0442 \u0442\u0438\u043f\u0430 hm.Collection";
  }
  if(!ln) {
    return
  }
  var df = document.createDocumentFragment();
  for(var i = 0;i < ln;i++) {
    var item = document.createElement("div"), model = collection.models[i];
    item.innerHTML = model.get(this.displayField);
    item.hmModel = model;
    item.className = "hm-list-item";
    if(this.getCls) {
      var itemClassName = this.getCls(model);
      if(itemClassName) {
        $(item).addClass(itemClassName)
      }
    }
    df.appendChild(item)
  }
  this.el.appendChild(df);
  this.$el.bind("click", _.bind(this.onClick, this))
}, onClick:function(e) {
  var target = e.target;
  while(target && !$(target).hasClass("hm-list-item")) {
    target = $(target).parent()[0]
  }
  if(!target.hmModel) {
    return
  }
  this.fireEvent("select", this, target.hmModel)
}});
HM.define("hm.ui.RoleSwitcher", {extend:"hm.ui.Component", config:{elTag:"span"}, _init:function() {
  this.callParent(arguments);
  var roles = this.userRoles || [], rolesWithoutEmployee = [], roleEndUser = null;
  for(var i in roles) {
    if(!roles.hasOwnProperty(i)) {
      continue
    }
    if(!this.isEndUser(roles[i].basic_name)) {
      rolesWithoutEmployee.push(roles[i])
    }else {
      roleEndUser = roles[i]
    }
  }
  if(roleEndUser) {
    this.endUser = roleEndUser;
    this.ENDUSER_NAME = roleEndUser.basic_name;
    roleEndUser.alias = '<div class="hm-roleswitcher-list-item-enduser-separator"></div>' + HM._("\u0412\u044b\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0440\u0435\u0436\u0438\u043c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f") + '<div class="hm-roleswitcher-list-item-enduser-bottomtext">(' + HM._("\u0432\u043e\u0439\u0442\u0438 \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c") + ")</div>";
    rolesWithoutEmployee.push(roleEndUser)
  }
  this.collection = HM.create("hm.Collection", {data:rolesWithoutEmployee});
  this.$el.css({width:"200px", height:"10px", display:"inline-block", position:"relative"});
  var cont = this.el.appendChild(document.createElement("div"));
  cont.className = "hm-roleswitcher";
  this.elCont = cont;
  this.elLeftPart = document.createElement("div");
  this.elLeftPart.className = "hm-roleswitcher-left";
  this.elRightPart = document.createElement("div");
  this.elRightPart.className = "hm-roleswitcher-right";
  this.elCenterPart = document.createElement("div");
  this.elCenterPart.className = "hm-roleswitcher-center";
  $(this.elCenterPart).attr("unselectable", "on");
  if(this.collection.length() > 2) {
    this.elTrigger = document.createElement("div");
    this.elTrigger.className = "hm-roleswitcher-trigger";
    this.elRightPart.appendChild(this.elTrigger)
  }
  cont.appendChild(this.elLeftPart);
  cont.appendChild(this.elCenterPart);
  cont.appendChild(this.elRightPart);
  var currentRole = this.collection.find("current", true);
  if(currentRole) {
    this.setValue(currentRole.get("basic_name"))
  }
}, _initEvemts:function() {
  if(this.collection.length() > 2) {
    $(this.elLeftPart).bind("click", _.bind(this.onClickButton, this))
  }else {
    $(this.elLeftPart).bind("click", _.bind(this.onClickTrigger, this))
  }
  $(this.elRightPart).bind("click", _.bind(this.onClickTrigger, this));
  $(this.elCenterPart).bind("click", _.bind(this.onClickTrigger, this));
  $(document).bind("click", _.bind(this.onClick_document, this))
}, isEndUser:function(basic_name) {
  var inheiritUsers = this.inheritUsers[basic_name];
  if(!inheiritUsers) {
    return false
  }
  for(var i = 0;i < inheiritUsers.length;i++) {
    if(inheiritUsers[i] === "enduser") {
      return true
    }
  }
  return false
}, disable:function() {
  if(this.disabled) {
    return
  }
  this.$el.addClass("hm-roleswitcher-disabled");
  this.elCenterPart.innerHTML = HM._("\u0420\u0435\u0436\u0438\u043c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f");
  this.disabled = true
}, enable:function() {
  if(!this.disabled) {
    return
  }
  this.$el.removeClass("hm-roleswitcher-disabled");
  this.disabled = false
}, showMenu:function() {
  if(this.disabled) {
    return
  }
  var position = $(this.elCont).offset();
  this.menu.$el.css({left:position.left + 25 + "px", top:position.top + 24 + "px"});
  if(this.value == this.ENDUSER_NAME) {
    this.menu.$el.find(".hm-roleswitcher-menu-item-enduser").hide()
  }else {
    this.menu.$el.find(".hm-roleswitcher-menu-item-enduser").show()
  }
  hm.PopupManager.show(this.menu.el, this.onHideMenu, this, true);
  this.menuShowed = true
}, hideMenu:function() {
  hm.PopupManager.hide(this.menu.el)
}, setLocation:function(roleName) {
  window.location.href = "/switch/role/" + roleName
}, setValue:function(basic_name, redirect) {
  this.value = basic_name;
  if(basic_name === this.ENDUSER_NAME) {
    this.disable()
  }else {
    var currentRole = this.collection.find("basic_name", basic_name);
    this.elCenterPart.innerHTML = currentRole.get("alias");
    this.enable()
  }
  if(redirect) {
    this.setLocation(basic_name)
  }
}, onClickButton:function() {
  if(this.disabled) {
    this.enable()
  }else {
    this.disable();
    if(this.value !== this.ENDUSER_NAME) {
      this.setLocation(this.ENDUSER_NAME)
    }
  }
}, onClick_document:function(e) {
  if(e.target === this.elLeftPart) {
    return
  }
  this.setValue(this.value)
}, onGetListCls:function(model) {
  var role = model.get("basic_name");
  if(role === this.ENDUSER_NAME) {
    return"hm-roleswitcher-menu-item-enduser"
  }else {
    return"hm-roleswitcher-menu-item-" + role
  }
}, onClickTrigger:function(e) {
  if(this.collection.length() === 2) {
    if(this.isEndUser(this.value)) {
      this.setValue(this.collection.models[0].get("basic_name"), true)
    }else {
      this.setValue(this.ENDUSER_NAME, true)
    }
    return
  }
  if(this.disabled) {
    this.onClickButton()
  }
  if(!this.menu) {
    this.menu = HM.create("hm.ui.List", {collection:this.collection, displayField:"alias", valueField:"basic_name", listeners:{select:this.onSelect, scope:this}, getCls:_.bind(this.onGetListCls, this)});
    this.menu.$el.addClass("hm-roleswitcher-menu")
  }
  if(!this.menuShowed) {
    this.showMenu()
  }else {
    this.hideMenu()
  }
  e.stopPropagation()
}, onHideMenu:function() {
  this.menuShowed = false;
  if(this.value === this.ENDUSER_NAME) {
    this.disable()
  }
}, onSelect:function(e, list, model) {
  var name = model.get("basic_name");
  if(this.value !== name) {
    this.setValue(name);
    this.setLocation(name)
  }else {
    this.setValue(name)
  }
  this.hideMenu()
}});
HM.define("hm.ui.InlineEditor", {extend:"hm.ui.Component", config:{saveUrl:""}, _init:function() {
  this.callParent(arguments);
  this.$el.addClass("hm-ui-InlineEditor");
  this.$el.attr("contenteditable", "true");
  this.setText($(this.renderTo).text(), true);
  $(this.renderTo).text("")
}, _initEvemts:function() {
  this.$el.on("blur", _.bind(this.onBlur, this))
}, setText:function(text, notSave) {
  this.$el.text(text);
  if(text !== this.text && !notSave) {
    $.ajax({url:this.saveUrl, type:"post", success:_.bind(this.onSaveSuccess, this), error:_.bind(this.onSaveFailure, this), data:{text:text}})
  }
  this.text = text
}, onBlur:function() {
  this.setText(this.$el.text())
}, onSaveSuccess:function() {
}, onSaveFailure:function() {
  elsHelpers.alert(HM._("\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c! \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0443 \u043f\u043e\u0437\u0436\u0435."))
}});
HM.define("hm.ui.marksheet.ScrollBar", {extend:"hm.ui.Component", config:{scrollSize:"100px"}, _init:function() {
  this.callParent(arguments);
  var $elRenderTo = $(this.renderTo);
  this._elRenderTo = $elRenderTo[0];
  this._scroll = document.createElement("div");
  var $scroll = $(this._scroll);
  this.$el.append($scroll);
  $elRenderTo.addClass("hm-marksheet-scroll");
  $scroll.addClass("hm-marksheet-scroll-scrollbar");
  $elRenderTo.attr("unselectable", "on");
  $scroll.attr("unselectable", "on");
  $scroll.css({width:this.scrollSize + "%"});
  $scroll.bind("mousedown", _.bind(this.onMouseDown, this));
  $(document).bind("mouseup", _.bind(this.onMouseUp, this));
  $(document).bind("mousemove", _.bind(this.onMouseMove, this))
}, onMouseDown:function(e) {
  this._start = e.screenX;
  this._scrollLeft = this._scroll.offsetLeft;
  this._scrollWidth = this._scroll.offsetWidth;
  this._offset = e.offsetX;
  this._scrolling = true;
  e.preventDefault()
}, onMouseMove:function(e) {
  if(!this._scrolling) {
    return
  }
  var left = this._scrollLeft + e.screenX - this._start, maxLeft = this._elRenderTo.offsetWidth - this._scrollWidth - 3;
  if(left < 1) {
    left = 1
  }
  if(left > maxLeft) {
    left = maxLeft
  }
  $(this._scroll).css({left:left + "px"});
  this.fireEvent("scroll", left / maxLeft);
  try {
    window.getSelection().removeAllRanges()
  }catch(e) {
    document.selection.empty()
  }
}, onMouseUp:function(e) {
  if(!this._scrolling) {
    return
  }
  this._scrolling = false
}});

