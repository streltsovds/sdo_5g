(function(window, undefined) {
  var hm = window.hm = window.hm || {};
  hm.dict = hm.dict || {};
  hm.core = hm.core || {};
  hm.compilationInfo = {"time":1506585131E3, "config":{"project":"default", "parts":{"base":[{"name":"core", "version":"master", "enabled":true}, {"name":"core-ui", "version":"master", "enabled":true}], "projects":[{"name":"default", "version":"master", "enabled":true}], "modules":[{"name":"calendar", "version":"master", "enabled":false}, {"name":"graph", "version":"master", "enabled":false}, {"name":"grid", "version":"master", "enabled":false}, {"name":"es", "version":"temocenter", "enabled":true}, 
  {"name":"messenger", "version":"master", "enabled":true}, {"name":"trainingModules", "version":"master", "enabled":true}, {"name":"mainPageWidgets", "version":"master", "enabled":true}]}}};
  (function() {
    var NFE = hm.NFE = {}, isStrictMode = false, expr = /\/\*\s*NFE_FIX\s*\*\/\s+function\s+([\w\d]+)\s*\(([^\)]*)\)\s\{/g, replace = "function($2) { var $1 = arguments.callee;\n";
    try {
      var test = arguments.callee;
    } catch (e) {
      isStrictMode = true;
    }
    if (isStrictMode) {
      NFE.fix = function(code) {
        return'"use strict";\n' + code;
      };
    } else {
      NFE.fix = function(code) {
        return code.replace(expr, replace);
      };
    }
  })();
  var Handlebars = function() {
    var __module3__ = function() {
      var __exports__;
      function SafeString(string) {
        this.string = string;
      }
      SafeString.prototype.toString = function() {
        return "" + this.string;
      };
      __exports__ = SafeString;
      return __exports__;
    }();
    var __module2__ = function(__dependency1__) {
      var __exports__ = {};
      var SafeString = __dependency1__;
      var escape = {"&":"&amp;", "<":"&lt;", ">":"&gt;", '"':"&quot;", "'":"&#x27;", "`":"&#x60;"};
      var badChars = /[&<>"'`]/g;
      var possible = /[&<>"'`]/;
      function escapeChar(chr) {
        return escape[chr] || "&amp;";
      }
      function extend(obj, value) {
        for (var key in value) {
          if (Object.prototype.hasOwnProperty.call(value, key)) {
            obj[key] = value[key];
          }
        }
      }
      __exports__.extend = extend;
      var toString = Object.prototype.toString;
      __exports__.toString = toString;
      var isFunction = function(value) {
        return typeof value === "function";
      };
      if (isFunction(/x/)) {
        isFunction = function(value) {
          return typeof value === "function" && toString.call(value) === "[object Function]";
        };
      }
      var isFunction;
      __exports__.isFunction = isFunction;
      var isArray = Array.isArray || function(value) {
        return value && typeof value === "object" ? toString.call(value) === "[object Array]" : false;
      };
      __exports__.isArray = isArray;
      function escapeExpression(string) {
        if (string instanceof SafeString) {
          return string.toString();
        } else {
          if (!string && string !== 0) {
            return "";
          }
        }
        string = "" + string;
        if (!possible.test(string)) {
          return string;
        }
        return string.replace(badChars, escapeChar);
      }
      __exports__.escapeExpression = escapeExpression;
      function isEmpty(value) {
        if (!value && value !== 0) {
          return true;
        } else {
          if (isArray(value) && value.length === 0) {
            return true;
          } else {
            return false;
          }
        }
      }
      __exports__.isEmpty = isEmpty;
      return __exports__;
    }(__module3__);
    var __module4__ = function() {
      var __exports__;
      var errorProps = ["description", "fileName", "lineNumber", "message", "name", "number", "stack"];
      function Exception(message, node) {
        var line;
        if (node && node.firstLine) {
          line = node.firstLine;
          message += " - " + line + ":" + node.firstColumn;
        }
        var tmp = Error.prototype.constructor.call(this, message);
        for (var idx = 0;idx < errorProps.length;idx++) {
          this[errorProps[idx]] = tmp[errorProps[idx]];
        }
        if (line) {
          this.lineNumber = line;
          this.column = node.firstColumn;
        }
      }
      Exception.prototype = new Error;
      __exports__ = Exception;
      return __exports__;
    }();
    var __module1__ = function(__dependency1__, __dependency2__) {
      var __exports__ = {};
      var Utils = __dependency1__;
      var Exception = __dependency2__;
      var VERSION = "1.3.0";
      __exports__.VERSION = VERSION;
      var COMPILER_REVISION = 4;
      __exports__.COMPILER_REVISION = COMPILER_REVISION;
      var REVISION_CHANGES = {1:"<= 1.0.rc.2", 2:"== 1.0.0-rc.3", 3:"== 1.0.0-rc.4", 4:">= 1.0.0"};
      __exports__.REVISION_CHANGES = REVISION_CHANGES;
      var isArray = Utils.isArray, isFunction = Utils.isFunction, toString = Utils.toString, objectType = "[object Object]";
      function HandlebarsEnvironment(helpers, partials) {
        this.helpers = helpers || {};
        this.partials = partials || {};
        registerDefaultHelpers(this);
      }
      __exports__.HandlebarsEnvironment = HandlebarsEnvironment;
      HandlebarsEnvironment.prototype = {constructor:HandlebarsEnvironment, logger:logger, log:log, registerHelper:function(name, fn, inverse) {
        if (toString.call(name) === objectType) {
          if (inverse || fn) {
            throw new Exception("Arg not supported with multiple helpers");
          }
          Utils.extend(this.helpers, name);
        } else {
          if (inverse) {
            fn.not = inverse;
          }
          this.helpers[name] = fn;
        }
      }, registerPartial:function(name, str) {
        if (toString.call(name) === objectType) {
          Utils.extend(this.partials, name);
        } else {
          this.partials[name] = str;
        }
      }};
      function registerDefaultHelpers(instance) {
        instance.registerHelper("helperMissing", function(arg) {
          if (arguments.length === 2) {
            return undefined;
          } else {
            throw new Exception("Missing helper: '" + arg + "'");
          }
        });
        instance.registerHelper("blockHelperMissing", function(context, options) {
          var inverse = options.inverse || function() {
          }, fn = options.fn;
          if (isFunction(context)) {
            context = context.call(this);
          }
          if (context === true) {
            return fn(this);
          } else {
            if (context === false || context == null) {
              return inverse(this);
            } else {
              if (isArray(context)) {
                if (context.length > 0) {
                  return instance.helpers.each(context, options);
                } else {
                  return inverse(this);
                }
              } else {
                return fn(context);
              }
            }
          }
        });
        instance.registerHelper("each", function(context, options) {
          var fn = options.fn, inverse = options.inverse;
          var i = 0, ret = "", data;
          if (isFunction(context)) {
            context = context.call(this);
          }
          if (options.data) {
            data = createFrame(options.data);
          }
          if (context && typeof context === "object") {
            if (isArray(context)) {
              for (var j = context.length;i < j;i++) {
                if (data) {
                  data.index = i;
                  data.first = i === 0;
                  data.last = i === context.length - 1;
                }
                ret = ret + fn(context[i], {data:data});
              }
            } else {
              for (var key in context) {
                if (context.hasOwnProperty(key)) {
                  if (data) {
                    data.key = key;
                    data.index = i;
                    data.first = i === 0;
                  }
                  ret = ret + fn(context[key], {data:data});
                  i++;
                }
              }
            }
          }
          if (i === 0) {
            ret = inverse(this);
          }
          return ret;
        });
        instance.registerHelper("if", function(conditional, options) {
          if (isFunction(conditional)) {
            conditional = conditional.call(this);
          }
          if (!options.hash.includeZero && !conditional || Utils.isEmpty(conditional)) {
            return options.inverse(this);
          } else {
            return options.fn(this);
          }
        });
        instance.registerHelper("unless", function(conditional, options) {
          return instance.helpers["if"].call(this, conditional, {fn:options.inverse, inverse:options.fn, hash:options.hash});
        });
        instance.registerHelper("with", function(context, options) {
          if (isFunction(context)) {
            context = context.call(this);
          }
          if (!Utils.isEmpty(context)) {
            return options.fn(context);
          }
        });
        instance.registerHelper("log", function(context, options) {
          var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
          instance.log(level, context);
        });
      }
      var logger = {methodMap:{0:"debug", 1:"info", 2:"warn", 3:"error"}, DEBUG:0, INFO:1, WARN:2, ERROR:3, level:3, log:function(level, obj) {
        if (logger.level <= level) {
          var method = logger.methodMap[level];
          if (typeof console !== "undefined" && console[method]) {
            console[method].call(console, obj);
          }
        }
      }};
      __exports__.logger = logger;
      function log(level, obj) {
        logger.log(level, obj);
      }
      __exports__.log = log;
      var createFrame = function(object) {
        var obj = {};
        Utils.extend(obj, object);
        return obj;
      };
      __exports__.createFrame = createFrame;
      return __exports__;
    }(__module2__, __module4__);
    var __module5__ = function(__dependency1__, __dependency2__, __dependency3__) {
      var __exports__ = {};
      var Utils = __dependency1__;
      var Exception = __dependency2__;
      var COMPILER_REVISION = __dependency3__.COMPILER_REVISION;
      var REVISION_CHANGES = __dependency3__.REVISION_CHANGES;
      function checkRevision(compilerInfo) {
        var compilerRevision = compilerInfo && compilerInfo[0] || 1, currentRevision = COMPILER_REVISION;
        if (compilerRevision !== currentRevision) {
          if (compilerRevision < currentRevision) {
            var runtimeVersions = REVISION_CHANGES[currentRevision], compilerVersions = REVISION_CHANGES[compilerRevision];
            throw new Exception("Template was precompiled with an older version of Handlebars than the current runtime. " + "Please update your precompiler to a newer version (" + runtimeVersions + ") or downgrade your runtime to an older version (" + compilerVersions + ").");
          } else {
            throw new Exception("Template was precompiled with a newer version of Handlebars than the current runtime. " + "Please update your runtime to a newer version (" + compilerInfo[1] + ").");
          }
        }
      }
      __exports__.checkRevision = checkRevision;
      function template(templateSpec, env) {
        if (!env) {
          throw new Exception("No environment passed to template");
        }
        var invokePartialWrapper = function(partial, name, context, helpers, partials, data) {
          var result = env.VM.invokePartial.apply(this, arguments);
          if (result != null) {
            return result;
          }
          if (env.compile) {
            var options = {helpers:helpers, partials:partials, data:data};
            partials[name] = env.compile(partial, {data:data !== undefined}, env);
            return partials[name](context, options);
          } else {
            throw new Exception("The partial " + name + " could not be compiled when running in runtime-only mode");
          }
        };
        var container = {escapeExpression:Utils.escapeExpression, invokePartial:invokePartialWrapper, programs:[], program:function(i, fn, data) {
          var programWrapper = this.programs[i];
          if (data) {
            programWrapper = program(i, fn, data);
          } else {
            if (!programWrapper) {
              programWrapper = this.programs[i] = program(i, fn);
            }
          }
          return programWrapper;
        }, merge:function(param, common) {
          var ret = param || common;
          if (param && (common && param !== common)) {
            ret = {};
            Utils.extend(ret, common);
            Utils.extend(ret, param);
          }
          return ret;
        }, programWithDepth:env.VM.programWithDepth, noop:env.VM.noop, compilerInfo:null};
        return function(context, options) {
          options = options || {};
          var namespace = options.partial ? options : env, helpers, partials;
          if (!options.partial) {
            helpers = options.helpers;
            partials = options.partials;
          }
          var result = templateSpec.call(container, namespace, context, helpers, partials, options.data);
          if (!options.partial) {
            env.VM.checkRevision(container.compilerInfo);
          }
          return result;
        };
      }
      __exports__.template = template;
      function programWithDepth(i, fn, data) {
        var args = Array.prototype.slice.call(arguments, 3);
        var prog = function(context, options) {
          options = options || {};
          return fn.apply(this, [context, options.data || data].concat(args));
        };
        prog.program = i;
        prog.depth = args.length;
        return prog;
      }
      __exports__.programWithDepth = programWithDepth;
      function program(i, fn, data) {
        var prog = function(context, options) {
          options = options || {};
          return fn(context, options.data || data);
        };
        prog.program = i;
        prog.depth = 0;
        return prog;
      }
      __exports__.program = program;
      function invokePartial(partial, name, context, helpers, partials, data) {
        var options = {partial:true, helpers:helpers, partials:partials, data:data};
        if (partial === undefined) {
          throw new Exception("The partial " + name + " could not be found");
        } else {
          if (partial instanceof Function) {
            return partial(context, options);
          }
        }
      }
      __exports__.invokePartial = invokePartial;
      function noop() {
        return "";
      }
      __exports__.noop = noop;
      return __exports__;
    }(__module2__, __module4__, __module1__);
    var __module0__ = function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__) {
      var __exports__;
      var base = __dependency1__;
      var SafeString = __dependency2__;
      var Exception = __dependency3__;
      var Utils = __dependency4__;
      var runtime = __dependency5__;
      var create = function() {
        var hb = new base.HandlebarsEnvironment;
        Utils.extend(hb, base);
        hb.SafeString = SafeString;
        hb.Exception = Exception;
        hb.Utils = Utils;
        hb.VM = runtime;
        hb.template = function(spec) {
          return runtime.template(spec, hb);
        };
        return hb;
      };
      var Handlebars = create();
      Handlebars.create = create;
      __exports__ = Handlebars;
      return __exports__;
    }(__module1__, __module3__, __module4__, __module2__, __module5__);
    return __module0__;
  }();
  window.Handlebars = Handlebars;
  var HM = window.HM = {build:hm.build, serverInitTime:hm.serverInitTime || new Date - 0, clientInitTime:hm.clientInitTime || new Date - 0, global:window, isDebug:hm.isDebug, hmRoot:hm.basePath, theme:"default", emptyFn:function() {
  }, jQuery:jQuery, $document:function() {
    return this._redirectMethodCall({method:"$document", Class:hm.core.DOM, args:arguments});
  }, $window:function() {
    return this._redirectMethodCall({method:"$window", Class:hm.core.DOM, args:arguments});
  }, $html:function() {
    return this._redirectMethodCall({method:"$html", Class:hm.core.DOM, args:arguments});
  }, $body:function() {
    return this._redirectMethodCall({method:"$body", Class:hm.core.DOM, args:arguments});
  }, $head:function() {
    return this._redirectMethodCall({method:"$head", Class:hm.core.DOM, args:arguments});
  }, define:function() {
    return this._redirectMethodCall({method:"define", Class:hm.core.ClassManager, args:arguments});
  }, override:function() {
    return this._redirectMethodCall({method:"override", Class:hm.core.ClassManager, args:arguments});
  }, create:function() {
    return this._redirectMethodCall({method:"create", Class:hm.core.ClassManager, args:arguments});
  }, require:function() {
    return this._redirectMethodCall({method:"require", Class:hm.core.ClassManager, args:arguments});
  }, getService:function() {
    return this._redirectMethodCall({method:"getService", Class:hm.core.BaseService, classMethod:"get", args:arguments});
  }, _redirectMethodCall:function(cfg) {
    var method = cfg.method, Class = cfg.Class, classMethod = cfg.classMethod || method, args = cfg.args;
    this[method] = Class[classMethod].bind(Class);
    return this[method].apply(Class, args);
  }, _modulesState:{hm:{js:true, css:false}}, moduleExists:function(moduleName) {
    var modules = hm.compilationInfo.config.parts.modules;
    for (var i = 0, ln = modules.length;i < ln;i++) {
      var module = modules[i];
      if (module.name === moduleName) {
        return module.enabled;
      }
    }
    return false;
  }, moduleLoaded:function(moduleCode) {
    var state = this._modulesState[moduleCode];
    if (state && (state.js && state.css)) {
      return true;
    }
    return false;
  }, requireModule:function(moduleCode, callBack) {
    var linkId = "hm-module-link-" + (new Date - 0);
    function afterLoadCallBack() {
      setTimeout(callBack, 0);
    }
    if (this.moduleLoaded(moduleCode)) {
      afterLoadCallBack();
      return;
    }
    if (!this._modulesState.hasOwnProperty(moduleCode)) {
      this._modulesState[moduleCode] = {js:this.isDebug ? true : false, css:false};
    }
    var me = this, state = this._modulesState[moduleCode];
    function checkState() {
      if (me.moduleLoaded(moduleCode)) {
        afterLoadCallBack();
      }
    }
    function needLoadJs() {
      return state.js === false;
    }
    function needLoadCss() {
      return state.css === false;
    }
    function jsLoaded() {
      state.js = true;
      checkState();
    }
    function cssLoaded() {
      state.css = true;
      checkState();
    }
    if (needLoadJs()) {
      var scriptUrl = this.hmRoot + "/data/js/" + moduleCode + ".min.js?v=" + this.build;
      yepnope.injectJs(scriptUrl, jsLoaded);
    } else {
      jsLoaded();
    }
    if (needLoadCss()) {
      var styleUrl, $link = $(document.createElement("link"));
      $link.prop("id", linkId);
      if (this.isDebug) {
        styleUrl = "/unmanaged/dev_tools.php?tool=sass&runtime=1&module=" + moduleCode + "&v=" + this.build;
      } else {
        styleUrl = this.hmRoot + "/data/css/" + moduleCode + "/" + this.theme + "/screen.css?v=" + this.build;
      }
      $link.prop("type", "text/css").prop("href", styleUrl).prop("rel", "stylesheet");
      $link.on("load", cssLoaded);
      $link.insertBefore("#theme-css-file");
    } else {
      cssLoaded();
    }
  }, _:function(name) {
    var translate = hm.dict.translate;
    if (!translate) {
      return name;
    }
    this._ = function(name) {
      var result = translate[name];
      return typeof result === "string" ? result : name;
    };
    return this._(name);
  }, init:function() {
    hm.core.Console.info(hm.core.Info.getSimpleInfo());
    if (!hm.appClass) {
      return;
    }
    this.app = HM.create(hm.appClass);
  }, isObject:function() {
    return this._redirectMethodCall({method:"isObject", Class:hm.core.Object, args:arguments});
  }, namespace:function(namespace) {
    var ns = namespace.split("."), child = this.global;
    for (var j = 0, ln = ns.length;j < ln;j++) {
      var nsPart = ns[j];
      child = child[nsPart] = child[nsPart] || {};
    }
  }, singleton:function(Constructor) {
    var instance = null;
    Constructor.getInstance = function() {
      if (instance === null) {
        instance = new Constructor;
      }
      return instance;
    };
  }, each:function() {
    return this._redirectMethodCall({method:"each", Class:hm.core.Object, args:arguments});
  }};
  (function() {
    var self;
    hm.core.Object = {isObject:function(obj) {
      return typeof obj === "object" && obj !== null;
    }, getProperty:function(name, obj, delimeter) {
      if (name === "") {
        return obj;
      }
      var nameParts = name.split(delimeter || ".");
      for (var i = 0;i < nameParts.length;i++) {
        var namePart = nameParts[i];
        if (!obj.hasOwnProperty(namePart)) {
          return null;
        }
        obj = obj[namePart];
      }
      return obj;
    }, clone:function(obj) {
      var result = null;
      if (obj instanceof Array) {
        result = [];
      } else {
        result = {};
      }
      for (var i in obj) {
        if (!obj.hasOwnProperty(i)) {
          continue;
        }
        var value = obj[i];
        if (value instanceof Array || this.isObject(value)) {
          result[i] = this.clone(value);
        } else {
          result[i] = value;
        }
      }
      return result;
    }, _extend:function(target, source) {
      for (var i in source) {
        if (!source.hasOwnProperty(i)) {
          continue;
        }
        target[i] = source[i];
      }
    }, extend:function(target) {
      for (var i = 1, ln = arguments.length;i < ln;i++) {
        this._extend(target, arguments[i]);
      }
      return target;
    }, each:function(obj, callBack, scope) {
      var i, ln, key;
      if (hm.core.Array.isArrayLikely(obj)) {
        return hm.core.Array.forEach(obj, callBack, scope);
      }
      if (Object.getOwnPropertyNames) {
        var keys = Object.getOwnPropertyNames(obj);
        for (i = 0, ln = keys.length;i < ln;i++) {
          key = keys[i];
          callBack.call(scope, obj[key], key, obj);
        }
        return;
      }
      for (key in obj) {
        if (!obj.hasOwnProperty(i)) {
          continue;
        }
        callBack.call(scope, obj[key], key, obj);
      }
    }};
    self = hm.core.Object;
  })();
  (function() {
    var self;
    hm.core.Array = {isArrayLikely:function(obj) {
      return obj.length !== undefined;
    }};
    var ArrayPrototype = Array.prototype, forEachFn = ArrayPrototype.forEach, indexOf = ArrayPrototype.indexOf;
    if (!forEachFn) {
      forEachFn = function forEach(callback, thisArg) {
        var T, k, hasOwnProp = Object.prototype.hasOwnProperty;
        if (this == null) {
          throw new TypeError("this is null or not defined");
        }
        var O = Object(this);
        var len = O.length >>> 0;
        if ({}.toString.call(callback) !== "[object Function]") {
          throw new TypeError(callback + " is not a function");
        }
        if (thisArg) {
          T = thisArg;
        }
        k = 0;
        while (k < len) {
          var kValue;
          if (hasOwnProp.call(O, k)) {
            kValue = O[k];
            callback.call(T, kValue, k, O);
          }
          k++;
        }
      };
    }
    hm.core.Array.forEach = function(obj, callBack, scope) {
      return forEachFn.call(obj, callBack, scope);
    };
    if (!indexOf) {
      indexOf = function(searchElement, fromIndex) {
        var k;
        if (this == null) {
          throw new TypeError('"this" is null or not defined');
        }
        var O = Object(this);
        var len = O.length >>> 0;
        if (len === 0) {
          return-1;
        }
        var n = +fromIndex || 0;
        if (Math.abs(n) === Infinity) {
          n = 0;
        }
        if (n >= len) {
          return-1;
        }
        k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);
        while (k < len) {
          var kValue;
          if (k in O && O[k] === searchElement) {
            return k;
          }
          k++;
        }
        return-1;
      };
    }
    hm.core.Array.indexOf = function(array, searchElement, fromIndex) {
      return indexOf.call(array, searchElement, fromIndex);
    };
    self = hm.core.Array;
  })();
  (function() {
    var self;
    ({_classXtypes:{}, _classDefined:{}, loadCachedFile:function(fileName) {
      var result = $.ajax({async:false, url:fileName + (fileName.indexOf("?") === -1 ? "?" : "&") + "v=" + HM.build, global:false});
      return result.responseText;
    }, injectScript:function(fileName) {
      var classTxt = this.loadCachedFile(fileName);
      if (classTxt) {
        classTxt = hm.NFE.fix(classTxt);
        (new Function('"use strict";\n' + classTxt + "\n// //@ sourceURL=" + fileName))();
      }
    }, injectScripts:function() {
      for (var i = 0, ln = arguments.length;i < ln;i++) {
        this.injectScript(arguments[i]);
      }
    }, extendedFrom:function(cls) {
      if (this === cls) {
        return true;
      }
      if (!this.hasOwnProperty("$parentСlass")) {
        return false;
      }
      if (this.$parentСlass === cls) {
        return true;
      }
      if (this.$parentСlass.hasOwnProperty("extendedFrom")) {
        return this.$parentСlass.extendedFrom(cls);
      }
      return false;
    }, define:function(className, classConfig) {
      if (!classConfig) {
        classConfig = {};
      }
      var simpleClsName = className.replace(/\./g, "_"), HmObject = hm.core.Object, NewClass, ParentClass;
      if (classConfig.hasOwnProperty("constructor")) {
        NewClass = classConfig.constructor;
        delete classConfig.constructor;
      } else {
        NewClass = function() {
          var constructor = arguments.callee;
          return this.callParent(constructor, arguments);
        };
      }
      ParentClass = this.require(classConfig.extend || "hm.core.Class");
      delete classConfig.extend;
      var NewClassPrototypeConstructor = function() {
      }, parentPrototype = ParentClass.prototype, newPrototype;
      NewClassPrototypeConstructor.prototype = parentPrototype;
      NewClass.prototype = newPrototype = new NewClassPrototypeConstructor;
      newPrototype.constructor = NewClass;
      newPrototype.self = NewClass;
      newPrototype.$className = className;
      NewClass.$parentСlass = ParentClass;
      NewClass.extendedFrom = this.extendedFrom;
      if (classConfig.hasOwnProperty("statics")) {
        HmObject.extend(NewClass, classConfig.statics);
        delete classConfig.statics;
      }
      if (parentPrototype.hasOwnProperty("config")) {
        newPrototype.config = HmObject.extend({}, parentPrototype.config);
      } else {
        newPrototype.config = {};
      }
      if (classConfig.hasOwnProperty("config")) {
        HmObject.extend(newPrototype.config, classConfig.config);
        delete classConfig.config;
      }
      var classAlias = classConfig.alias;
      delete classConfig.alias;
      var classRequires = classConfig.requires;
      delete classConfig.requires;
      for (var i in classConfig) {
        if (!classConfig.hasOwnProperty(i)) {
          continue;
        }
        newPrototype[i] = classConfig[i];
        if (!(classConfig[i] instanceof Function)) {
          continue;
        }
        newPrototype[i].$owner = NewClass;
        newPrototype[i].$name = i;
        newPrototype[i].displayName = className + "." + i + "()";
      }
      NewClass.$owner = NewClass;
      NewClass.$name = "constructor";
      NewClass.displayName = className;
      if (classConfig.singleton) {
        NewClass = new NewClass;
      }
      this.classAlias(className, NewClass);
      if (classAlias) {
        this.classAlias(classAlias, NewClass);
      }
      if (!classRequires) {
        return;
      }
      var $requiredClasses = NewClass.$requiredClasses = [], classDefined = this._classDefined;
      for (var i = 0, ln = classRequires.length;i < ln;i++) {
        var requiredClass = classRequires[i];
        if (!classDefined[requiredClass]) {
          this.require(requiredClass);
        }
        $requiredClasses.push(classDefined[requiredClass]);
      }
    }, override:function(className, prototype) {
      var constructor = this.require(className), classPrototype;
      if (constructor.singleton) {
        classPrototype = constructor;
      } else {
        classPrototype = constructor.prototype;
      }
      for (var i in prototype) {
        if (!prototype.hasOwnProperty(i)) {
          continue;
        }
        if (!classPrototype.hasOwnProperty(i)) {
          classPrototype[i] = prototype[i];
          if (!(prototype[i] instanceof Function)) {
            continue;
          }
          classPrototype[i].$owner = constructor;
          classPrototype[i].$name = i;
          classPrototype[i].displayName = className + "." + i + "()";
          continue;
        }
        if (!(prototype[i] instanceof Function)) {
          classPrototype[i] = prototype[i];
        } else {
          var overridedMethod = classPrototype[i];
          classPrototype[i] = prototype[i];
          classPrototype[i].$owner = constructor;
          classPrototype[i].$name = i;
          classPrototype[i].$overridedMethod = overridedMethod;
          classPrototype[i].displayName = className + "." + i + "()";
        }
      }
    }, classAlias:function(className, classFunction) {
      var ns = className.split("."), child = HM.global;
      for (var j = 0, ln = ns.length - 1;j < ln;j++) {
        var nsPart = ns[j];
        child[nsPart] = child[nsPart] || {};
        child = child[nsPart];
      }
      child[ns[j]] = classFunction;
      this._classDefined[className] = classFunction;
    }, create:function(className, cfg) {
      var cls;
      if (typeof className !== "function") {
        cls = this.require(className);
      } else {
        cls = className;
      }
      return new cls(cfg);
    }, requires:function() {
      for (var i in arguments) {
        if (!arguments.hasOwnProperty(i)) {
          continue;
        }
        this.require(arguments[i]);
      }
    }, require:function(className) {
      if (!this._classDefined.hasOwnProperty(className)) {
        throw new Error(className + " не найден");
      }
      return this._classDefined[className];
    }, createFactory:function(cfgPropertyName, classMap) {
      return function(cfg) {
        if (typeof cfg === "string") {
          var type = cfg;
          cfg = {};
          cfg[cfgPropertyName] = type;
        }
        var classCode, className;
        if (!cfg.hasOwnProperty(cfgPropertyName)) {
          if (!classMap.hasOwnProperty("default")) {
            throw new Error("Для фабрики необходимо указать тип");
          }
          classCode = "default";
        } else {
          classCode = cfg[cfgPropertyName];
        }
        if (classMap.hasOwnProperty(classCode)) {
          className = classMap[classCode];
        } else {
          className = classCode;
        }
        return HM.create(className, cfg);
      };
    }, init:function() {
      this.classAlias("hm.core.ClassManager", this);
      delete this.init;
    }}).init();
    self = hm.core.ClassManager;
  })();
  (function() {
    var self;
    hm.core.ClassManager.classAlias("hm.core.Class", function(cfg) {
      this.__initConfig(cfg);
      return this.__construct();
    });
    hm.core.Class.prototype.callOverriden = function(method, args) {
      var overridenMethod = method.$overridedMethod;
      if (!overridenMethod) {
        throw new Error("Не найден перезаписанный метод");
      }
      return overridenMethod.apply(this, args || []);
    };
    hm.core.Class.prototype.callParent = function(method, args) {
      if (typeof method !== "function") {
        args = method;
        method = args.callee;
        try {
          console.warn("Вызов callParent с одним аргументом устарел!", method.$owner.prototype.$className + "." + method.$name);
        } catch (e) {
        }
      }
      var parentMethod = method.$owner.$parentСlass.prototype[method.$name];
      if (parentMethod && parentMethod instanceof Function) {
        return parentMethod.apply(this, args || []);
      }
    };
    hm.core.Class.prototype.__construct = HM.emptyFn;
    hm.core.Class.prototype.__destruct = function() {
      if (this._needToDestroy) {
        var needToDestroy = this._needToDestroy;
        while (needToDestroy.length != 0) {
          if (needToDestroy[0].destroy) {
            needToDestroy[0].destroy();
          }
          needToDestroy.splice(0, 1);
        }
      }
      var i;
      if (this.hasOwnProperty("config")) {
        var config = this.config;
        for (i in config) {
          if (config.hasOwnProperty(i)) {
            delete config[i];
          }
        }
      }
      for (i in this) {
        if (this.hasOwnProperty(i)) {
          delete this[i];
        }
      }
      this.destructed = true;
    };
    hm.core.Class.prototype.destroy = function() {
      this.__destruct();
    };
    hm.core.Class.prototype.needToDestroy = function(obj) {
      if (obj.destroy) {
        if (!this._needToDestroy) {
          this._needToDestroy = [];
        }
        this._needToDestroy.push(obj);
      } else {
        console.warn("Не найден метод destroy.", obj);
      }
    };
    hm.core.Class.prototype.__initConfig = function(userCfg) {
      userCfg = userCfg || {};
      var config = this.config = hm.core.Object.extend({}, this.config);
      for (var i in userCfg) {
        if (!userCfg.hasOwnProperty(i)) {
          continue;
        }
        if (!config.hasOwnProperty(i)) {
          throw new Error("Параметр " + i + " не определен в конфиге класса " + this.$className);
        }
        config[i] = userCfg[i];
      }
    };
    self = hm.core.Class;
  })();
  (function() {
    var self;
    HM.define("hm.core.Console", {singleton:true, __construct:function() {
      var console = window.console || {}, emptyFn = HM.emptyFn, functionNames = "assert,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,markTimeline,profile,profileEnd,time,timeEnd,trace,warn".split(","), ln = functionNames.length, functionName, me = this;
      this._browserConsoleAllowed = HM.isDebug;
      for (var i = 0;i < ln;i++) {
        functionName = functionNames[i];
        try {
          this[functionName] = (console[functionName] || emptyFn).bind(console);
        } catch (e) {
          this[functionName] = emptyFn.bind(console);
        }
        (function(functionName) {
          console[functionName] = function() {
            if (!me._browserConsoleAllowed) {
              return;
            }
            return me[functionName].apply(me, arguments);
          };
        })(functionName);
      }
    }, enableBrowserConsole:function() {
      this._browserConsoleAllowed = true;
    }});
    self = hm.core.Console;
  })();
  (function() {
    var self;
    HM.define("hm.core.ObservableClass", {config:{listeners:null}, constructor:function(cfg) {
      var constructor = arguments.callee;
      this.__events = {};
      if (cfg && (cfg.listeners && typeof cfg.listeners === "object")) {
        this.__initListeners(cfg.listeners);
      }
      return this.callParent(constructor, arguments);
    }, __destruct:function() {
      var __destruct = arguments.callee;
      this.fireEvent("destroy", this);
      this.clearEvents();
      this.callParent(__destruct, arguments);
    }, __initListeners:function(listeners) {
      var listener, scope = listeners.scope || this;
      for (var i in listeners) {
        if (!listeners.hasOwnProperty(i)) {
          continue;
        }
        if (i === "scope") {
          continue;
        }
        listener = listeners[i];
        if (typeof listener === "function") {
          this.on(i, listener, scope);
        } else {
          if (typeof listener === "string") {
            this.on(i, eval("(" + listener + ")"), scope);
          } else {
            if (HM.isObject(listener) && typeof listener.fn === "function") {
              this.on(i, listener.fn, listener.scope || scope, listener.data);
            }
          }
        }
      }
    }, fireEvent:function(eventName) {
      var events = this.__events, eventListeners, event;
      if (!events) {
        return null;
      }
      eventListeners = events[eventName];
      if (!eventListeners) {
        return null;
      }
      event = HM.create("hm.core.Event", {target:this, name:eventName, listeners:eventListeners.slice(), args:[].slice.call(arguments, 1)});
      var result = event.fire();
      for (var i = eventListeners.length - 1;i >= 0;i--) {
        if (eventListeners[i].isOne) {
          eventListeners.splice(i, 1);
        }
      }
      return result;
    }, on:function(eventName, fn, scope, cfg, isOne) {
      var events = this.__events;
      scope = scope || this;
      if (!events[eventName]) {
        events[eventName] = [];
      }
      events[eventName].push({fn:fn, scope:scope, cfg:cfg, isOne:isOne});
      return this;
    }, one:function(eventName, fn, scope, cfg) {
      return this.on(eventName, fn, scope, cfg, true);
    }, un:function(eventName, fn, scope) {
      var events = this.__events;
      if (!events[eventName]) {
        return this;
      }
      var eventListeners = events[eventName], listener;
      scope = scope || this;
      for (var i = eventListeners.length - 1;i >= 0;i--) {
        listener = eventListeners[i];
        if (listener.fn === fn && listener.scope === scope) {
          eventListeners.splice(i, 1);
        }
      }
      return this;
    }, hasListeners:function() {
      return!!Object.getOwnPropertyNames(this.__events).length;
    }, clearEvents:function() {
      this.__events = {};
    }});
    self = hm.core.ObservableClass;
  })();
  (function() {
    var self;
    var $document = null, $window = null, $body = null, $head = null, $html = null;
    var maxZIndex = 1E4, $cropTagsCont = $(document.createElement("div"));
    HM.define("hm.core.DOM", {statics:{$document:function() {
      if ($document === null) {
        $document = $(document);
      }
      return $document;
    }, $html:function() {
      if ($html === null) {
        $html = $(document.documentElement);
      }
      return $html;
    }, $window:function() {
      if ($window === null) {
        $window = $(window);
      }
      return $window;
    }, $body:function() {
      if ($body === null) {
        if (!document.body) {
          return null;
        }
        $body = $(document.body);
      }
      return $body;
    }, $head:function() {
      if ($head === null) {
        if (!document.head) {
          return null;
        }
        $head = $(document.head);
      }
      return $head;
    }, cropTags:function(html) {
      return $cropTagsCont.html(html).text();
    }, injectJs:function(url) {
      var $script = $(document.createElement("script"));
      $script.attr("src", url);
      this.$head().append($script);
    }, isNode:function(el) {
      if (!hm.core.Object.isObject(el)) {
        return false;
      }
      return!!el.nodeType;
    }, getComputedStyle:function(el) {
      if (window.getComputedStyle) {
        this.getComputedStyle = function(el) {
          return window.getComputedStyle(el, null);
        };
      } else {
        this.getComputedStyle = function(el) {
          return el.currentStyle;
        };
      }
      return this.getComputedStyle(el);
    }, getScrollBarWidth:function() {
      var $outer = $(document.createElement("div")), $inner = $(document.createElement("div"));
      $outer.css({visibility:"hidden", width:"100px", position:"absolute", left:0, top:0, overflowY:"scroll"});
      $outer.append($inner);
      this.$body().append($outer);
      var result = $outer.width() - $inner.width();
      $outer.remove();
      this.getScrollBarWidth = function() {
        return result;
      };
      return result;
    }}});
    self = hm.core.DOM;
  })();
  (function() {
    var self;
    HM.define("hm.core.PopupManager", {statics:{popupElements:[], show:function(el, callback, context, hideOtherIfExists) {
      if (!hm.core.Object.isObject(el)) {
        throw new Error("el должен быть объектом");
      }
      if (!hm.core.DOM.isNode(el)) {
        var elDefaults = {hideOther:false, scope:null, onClose:null};
        el = hm.core.Object.extend(elDefaults, el);
        hideOtherIfExists = el.hideOther;
        context = el.scope;
        callback = el.onClose;
        el = el.el;
      }
      if (hideOtherIfExists) {
        this.hideAll();
      }
      var $el = $(el);
      $el.on("click", this._onElClick);
      this.popupElements.push({$el:$el, el:el, fn:typeof callback === "function" ? callback : HM.emptyFn, context:context || el});
      HM.$body().append($el);
      $el.css({zIndex:hm.core.ZIndexManager.getMaxZIndex() + 1, position:"absolute", visibility:"visible"});
    }, hide:function(el) {
      var popupElements = this.popupElements;
      for (var i = popupElements.length - 1;i >= 0;i--) {
        var popupElement = popupElements[i];
        if (popupElement.el !== el) {
          continue;
        }
        var $el = popupElement.$el;
        $el.off("click", this._onElClick);
        $el.detach();
        $el.css({zIndex:"auto"});
        popupElements.splice(i, 1);
        popupElement.fn.call(popupElement.context);
        return;
      }
      $(el).off("click", this._onElClick);
    }, hideAll:function() {
      var popupElements = this.popupElements;
      while (popupElements.length) {
        this.hide(popupElements[0].el);
      }
    }, _onElClick:function(e) {
      e.stopPropagation();
    }, _onBodyClick:function(e) {
      this.hideAll();
    }}});
    HM.$document().on("click", hm.core.PopupManager._onBodyClick.bind(hm.core.PopupManager));
    self = hm.core.PopupManager;
  })();
  (function() {
    var self;
    (function() {
      HM.define("hm.core.HardwareDetect", {__construct:function() {
        this._check();
        self.pluginDetect.INIT();
      }, adobeFlashPlayerVersion:function() {
        var playerVersion = HM.create("hm.core.env.Version", {version:[0, 0, 0]});
        if (navigator.plugins && navigator.mimeTypes.length) {
          var x = navigator.plugins["Shockwave Flash"];
          if (x && x.description) {
            playerVersion = HM.create("hm.core.env.Version", {version:x.description.replace(/([a-zA-Z]|\s)+/, "").replace(/(\s+r|\s+b[0-9]+)/, ".").split(".")});
          }
        } else {
          if (navigator.userAgent && navigator.userAgent.indexOf("Windows CE") >= 0) {
            var axo = 1;
            var counter = 3;
            while (axo) {
              try {
                counter++;
                axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash." + counter);
                playerVersion = new deconcept.PlayerVersion([counter, 0, 0]);
              } catch (e) {
                axo = null;
              }
            }
          } else {
            try {
              var axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7");
            } catch (e) {
              try {
                var axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");
                playerVersion = HM.create("hm.core.env.Version", {version:[6, 0, 21]});
                axo.AllowScriptAccess = "always";
              } catch (e) {
                if (playerVersion.major == 6) {
                  return playerVersion;
                }
              }
              try {
                axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
              } catch (e) {
              }
            }
            if (axo != null) {
              playerVersion = HM.create("hm.core.env.Version", {version:axo.GetVariable("$version").split(" ")[1].split(",")});
            }
          }
        }
        return playerVersion;
      }, _cache:{}, _checkBrowser:function(name, version, msxmlVersion) {
        if (!this._cache.require.browser[name]) {
          return false;
        }
        if (name == "explorer") {
          return version.compare(this._cache.require.browser.explorer) >= 0 && msxmlVersion.compare(this._cache.require.msxml) >= 0;
        }
        return version.compare(this._cache.require.browser[name]) >= 0;
      }, _check:function() {
        var cache = this._cache;
        if (!cache.require) {
          cache.require = {browser:{explorer:HM.create("hm.core.env.Version", {version:[7, 0]}), opera:HM.create("hm.core.env.Version", {version:[9, 0, 0]}), safari:HM.create("hm.core.env.Version", {version:[2, 0, 0]}), firefox:HM.create("hm.core.env.Version", {version:[10, 0]}), camino:HM.create("hm.core.env.Version", {version:[1, 0, 0]}), seamonkey:HM.create("hm.core.env.Version", {version:[1, 0, 0]}), mozilla:HM.create("hm.core.env.Version", {version:[10, 0]}), chrome:HM.create("hm.core.env.Version", 
          {version:[10, 0, 0]})}, fp:HM.create("hm.core.env.Version", {version:[9, 0, 0]}), msxml:HM.create("hm.core.env.Version", {version:[3, 0, 0]})};
        }
        if (!cache.available) {
          cache.available = {fp:this.adobeFlashPlayerVersion(), msxml:hm.core.env.MsXml.detect()};
          cache.available.browser = hm.core.env.Browser.detect();
        }
        if (typeof cache.passed == "undefined") {
          cache.browserPassed = this._checkBrowser(cache.available.browser.name, cache.available.browser.version, cache.available.msxml);
          cache.passed = cache.browserPassed && cache.available.fp.compare(cache.require.fp) >= 0;
          cache.iePassed = cache.passed && hm.core.env.Browser.isIE();
        }
      }, ieFeedback:false, check:function() {
        this._check();
        this.ieFeedback = false;
        return this._cache.passed;
      }, courseCheck:function() {
        this._check();
        this.ieFeedback = true;
        return this._cache.iePassed;
      }, getSystemInfo:function() {
        var cache = this._cache;
        if (!cache.require.browser[cache.available.browser.name]) {
          return false;
        }
        var pluginDetect = hm.core.HardwareDetect.pluginDetect, plugins = pluginDetect.Plugins;
        plugins.java.getVersion();
        plugins.silverlight.getVersion();
        plugins.adobereader.getVersion();
        var result = {browser:{name:cache.available.browser.appName, value:cache.available.browser.version.toString() || ""}, flash:{value:cache.available.fp.toString() || ""}, os:{value:hm.core.env.OS.detect()}, screen:{value:screen.width + "x" + screen.height}, cookie:{value:document.cookie ? 1 : 0}, js:{value:1}, java:{value:(plugins.java.version || "").replace(/,/g, ".") || ""}, silverlight:{value:(plugins.silverlight.version || "").replace(/,/g, ".") || ""}, acrobat_reader:{value:(plugins.adobereader.version || 
        "").replace(/,/g, ".") || ""}};
        if (hm.core.env.Browser.isIE()) {
          result.msxml = {value:cache.available.msxml.toString() || ""};
        }
        return result;
      }, getSystemInfoForTable:function(systemInfo) {
        if (!systemInfo) {
          return;
        }
        var result = [], cache = this._cache;
        if (!cache.require.browser[systemInfo.browser.name.toLowerCase()]) {
          return false;
        }
        var require = ["browser", "flash", "cookie", "js", "msxml"];
        var browserInfo = systemInfo.browser, browserName = browserInfo.name, browserCode = browserInfo.name.toLowerCase(), browserVersion = HM.create("hm.core.env.Version", {version:browserInfo.value.split(".")}), isIE = hm.core.env.Browser.isIE(), msxmlVersion, browserPassed;
        if (isIE && (systemInfo.msxml && systemInfo.msxml.value)) {
          msxmlVersion = HM.create("hm.core.env.Version", {version:systemInfo.msxml.value.split(".")});
        }
        browserPassed = this._checkBrowser(browserCode, browserVersion, msxmlVersion);
        result.push.apply(result, [{passed:browserPassed, version:browserVersion, require:cache.require.browser[browserCode].toString(), appName:browserName}, {passed:systemInfo.cookie.value, version:systemInfo.cookie.value ? HM._("включены") : HM._("выключены"), require:HM._("включены"), appName:HM._("Cookie")}, {passed:true, version:systemInfo.js.value ? HM._("включен") : 
        HM._("выключен"), require:HM._("включен"), appName:HM._("JavaScript")}, {version:systemInfo.os.value || "", appName:HM._("Операционная система")}, {version:systemInfo.screen.value || "", appName:HM._("Разрешение экрана")}]);
        var flashInfo = systemInfo.flash, flashVersion = HM.create("hm.core.env.Version", {version:flashInfo.value ? flashInfo.value.split(".") : [0, 0, 0]}), flashPassed = flashVersion.compare(cache.require.fp) >= 0, passed = browserPassed && flashPassed, iePassed = passed && isIE;
        result.push({version:flashPassed ? flashVersion.toString() : "", appName:"Adobe Flash Player", notRequired:true});
        result.push.apply(result, [{passed:systemInfo.acrobat_reader.value, version:systemInfo.acrobat_reader.value || "", appName:HM._("Adobe Acrobat Reader"), notRequired:true}, {passed:systemInfo.silverlight.value, version:systemInfo.silverlight.value || "", appName:HM._("Microsoft Silverlight"), notRequired:true}, {passed:systemInfo.java.value, version:systemInfo.java.value || "", appName:HM._("Java"), notRequired:true}]);
        if (isIE) {
          result.push({passed:msxmlVersion.compare(cache.require.msxml) >= 0, version:msxmlVersion.toString(), require:cache.require.msxml.toString(), appName:"MSXML"});
        }
        return{passed:this.ieFeedback && iePassed || !this.ieFeedback && passed, info:result, isIE:isIE};
      }, testTableCell:function(data) {
        var passed = data.passed || !data.hasOwnProperty("passed"), require = data.require ? data.require : "", needTestComment = data.hasOwnProperty("passed"), notRequired = data.notRequired;
        return['<tr class="' + (passed ? "passed" : "failed") + (notRequired ? " hm-infoblock-hwdetect-item-not-required" : "") + '">', '<td class="app-name">' + data.appName + (notRequired ? " *" : "") + "</td>", '<td class="app-version">' + (data.version == "0.0.0" ? '<span class="failed">' + HM._("не установлен") + "</span>" : data.version) + "</td>", '   <td class="app-require">' + require + "</td>", "</tr>"].join("");
      }, messageBox:function(message, level) {
        var $message = $("<div></div>"), $cont = $("<div></div>");
        $message.text(message || "");
        $.ui.errorbox.clear($message);
        $message.errorbox({level:level || "notice"});
        $cont.append($message);
        return $cont.html();
      }, _renderTable:function(result, isAdmin) {
        var feedback = "";
        if (!result) {
          return this.messageBox(HM._(isAdmin ? "В последней активной сессии пользователя нет информации по его системе" : "Ваш браузер не поддерживается"), 
          "error");
        }
        feedback = '<div class="EUDetectionCheck">';
        if (!isAdmin) {
          if (result.passed) {
            feedback += this.messageBox(HM._("Ваша система содержит все необходимые компоненты"), "success");
          } else {
            feedback += this.messageBox(HM._("Ваша система не содержит всех необходимых компонент для корректного отображения содержимого"), 
            "error");
          }
        }
        feedback += '<br /><table cellpadding="3" cellspacing="0">';
        feedback += '<tr><th class="app-name">' + HM._("Параметр") + '</th><th class="app-version">' + HM._("Фактическое значение (версия)") + '</th><th class="app-require">' + HM._("Требуемое значение (версия)") + "</th></tr>";
        var resultInfo = result.info;
        for (var i = 0;i < resultInfo.length;i++) {
          feedback += this.testTableCell(resultInfo[i]);
        }
        feedback += "</table>";
        feedback += '<br /><div class="comment"><b>' + HM._("Примечание") + ":</b> " + HM._('Компоненты, отмеченные "*", не являются обязательными для корректной работы веб-интерфейса системы, но могут понадобиться при отображении учебных модулей сторонних производителей.') + 
        "</div>";
        feedback += "</div>";
        return feedback;
      }, renderTableBySystemInfo:function(systemInfo, isAdmin) {
        return this._renderTable(this.getSystemInfoForTable(systemInfo), isAdmin);
      }, checkWithFeedback:function(passed) {
        return this.renderTableBySystemInfo(this.getSystemInfo());
      }});
      var instance = null;
      hm.core.HardwareDetect.get = function() {
        if (!instance) {
          instance = HM.create("hm.core.HardwareDetect");
        }
        return instance;
      };
    })();
    (function() {
      hm.core.HardwareDetect.pluginDetect = {version:"0.8.1", name:"PluginDetect", openTag:"<", isDefined:function(b) {
        return typeof b != "undefined";
      }, isArray:function(b) {
        return/array/i.test(Object.prototype.toString.call(b));
      }, isFunc:function(b) {
        return typeof b == "function";
      }, isString:function(b) {
        return typeof b == "string";
      }, isNum:function(b) {
        return typeof b == "number";
      }, isStrNum:function(b) {
        return typeof b == "string" && /\d/.test(b);
      }, getNumRegx:/[\d][\d\.\_,\-]*/, splitNumRegx:/[\.\_,\-]/g, getNum:function(b, c) {
        var d = this, a = d.isStrNum(b) ? (d.isDefined(c) ? new RegExp(c) : d.getNumRegx).exec(b) : null;
        return a ? a[0] : null;
      }, compareNums:function(h, f, d) {
        var e = this, c, b, a, g = parseInt;
        if (e.isStrNum(h) && e.isStrNum(f)) {
          if (e.isDefined(d) && d.compareNums) {
            return d.compareNums(h, f);
          }
          c = h.split(e.splitNumRegx);
          b = f.split(e.splitNumRegx);
          for (a = 0;a < Math.min(c.length, b.length);a++) {
            if (g(c[a], 10) > g(b[a], 10)) {
              return 1;
            }
            if (g(c[a], 10) < g(b[a], 10)) {
              return-1;
            }
          }
        }
        return 0;
      }, formatNum:function(b, c) {
        var d = this, a, e;
        if (!d.isStrNum(b)) {
          return null;
        }
        if (!d.isNum(c)) {
          c = 4;
        }
        c--;
        e = b.replace(/\s/g, "").split(d.splitNumRegx).concat(["0", "0", "0", "0"]);
        for (a = 0;a < 4;a++) {
          if (/^(0+)(.+)$/.test(e[a])) {
            e[a] = RegExp.$2;
          }
          if (a > c || !/\d/.test(e[a])) {
            e[a] = "0";
          }
        }
        return e.slice(0, 4).join(",");
      }, getPROP:function(d, b, a) {
        var c;
        try {
          if (d) {
            a = d[b];
          }
        } catch (c) {
        }
        return a;
      }, findNavPlugin:function(l, e, c) {
        var j = this, h = new RegExp(l, "i"), d = !j.isDefined(e) || e ? /\d/ : 0, k = c ? new RegExp(c, "i") : 0, a = navigator.plugins, g = "", f, b, m;
        for (f = 0;f < a.length;f++) {
          m = a[f].description || g;
          b = a[f].name || g;
          if (h.test(m) && (!d || d.test(RegExp.leftContext + RegExp.rightContext)) || h.test(b) && (!d || d.test(RegExp.leftContext + RegExp.rightContext))) {
            if (!k || !(k.test(m) || k.test(b))) {
              return a[f];
            }
          }
        }
        return null;
      }, getMimeEnabledPlugin:function(k, m, c) {
        var e = this, f, b = new RegExp(m, "i"), h = "", g = c ? new RegExp(c, "i") : 0, a, l, d, j = e.isString(k) ? [k] : k;
        for (d = 0;d < j.length;d++) {
          if ((f = e.hasMimeType(j[d])) && (f = f.enabledPlugin)) {
            l = f.description || h;
            a = f.name || h;
            if (b.test(l) || b.test(a)) {
              if (!g || !(g.test(l) || g.test(a))) {
                return f;
              }
            }
          }
        }
        return 0;
      }, getVersionDelimiter:",", findPlugin:function(d) {
        var c = this, b, d, a = {status:-3, plugin:0};
        if (!c.isString(d)) {
          return a;
        }
        if (d.length == 1) {
          c.getVersionDelimiter = d;
          return a;
        }
        d = d.toLowerCase().replace(/\s/g, "");
        b = c.Plugins[d];
        if (!b || !b.getVersion) {
          return a;
        }
        a.plugin = b;
        a.status = 1;
        return a;
      }, getPluginFileVersion:function(f, b) {
        var h = this, e, d, g, a, c = -1;
        if (h.OS > 2 || (!f || (!f.version || !(e = h.getNum(f.version))))) {
          return b;
        }
        if (!b) {
          return e;
        }
        e = h.formatNum(e);
        b = h.formatNum(b);
        d = b.split(h.splitNumRegx);
        g = e.split(h.splitNumRegx);
        for (a = 0;a < d.length;a++) {
          if (c > -1 && (a > c && d[a] != "0")) {
            return b;
          }
          if (g[a] != d[a]) {
            if (c == -1) {
              c = a;
            }
            if (d[a] != "0") {
              return b;
            }
          }
        }
        return e;
      }, AXO:window.ActiveXObject, getAXO:function(a) {
        var d = null, c, b = this;
        try {
          d = new b.AXO(a);
        } catch (c) {
        }
        return d;
      }, INIT:function() {
        this.init.library(this);
      }, init:{$:1, hasRun:0, objProperties:function(d, e, b) {
        var a, c = {};
        if (e && b) {
          if (e[b[0]] === 1 && (!d.isArray(e) && (!d.isFunc(e) && (!d.isString(e) && !d.isNum(e))))) {
            for (a = 0;a < b.length;a = a + 2) {
              e[b[a]] = b[a + 1];
              c[b[a]] = 1;
            }
          }
          for (a in e) {
            if (!c[a] && (e[a] && e[a][b[0]] === 1)) {
              this.objProperties(d, e[a], b);
            }
          }
        }
      }, publicMethods:function(c, f) {
        var g = this, b = g.$, a, d;
        if (c && f) {
          for (a in c) {
            try {
              if (b.isFunc(c[a])) {
                f[a] = c[a](f);
              }
            } catch (d) {
            }
          }
        }
      }, plugin:function(a, c) {
        var d = this, b = d.$;
        if (a) {
          d.objProperties(b, a, ["$", b, "$$", a]);
          if (!b.isDefined(a.getVersionDone)) {
            a.installed = null;
            a.version = null;
            a.version0 = null;
            a.getVersionDone = null;
            a.pluginName = c;
          }
        }
      }, detectIE:function() {
        var init = this, $ = init.$, doc = document, e, x, userAgent = navigator.userAgent || "", progid, progid1, progid2;
        $.isIE = eval("/*@cc_on!@*/!1");
        $.verIE = $.isIE ? /MSIE\s*(\d+\.?\d*)/i.test(userAgent) ? parseFloat(RegExp.$1, 10) : 7 : null;
        $.verIEfull = null;
        $.docModeIE = null;
        if ($.isIE) {
          var verFullFloat, obj = doc.createElement("div");
          try {
            obj.style.behavior = "url(#default#clientcaps)";
            $.verIEfull = obj.getComponentVersion("{89820200-ECBD-11CF-8B85-00AA005B4383}", "componentid").replace(/,/g, ".");
          } catch (e) {
          }
          verFullFloat = parseFloat($.verIEfull || "0", 10);
          $.docModeIE = doc.documentMode || ((/back/i.test(doc.compatMode || "") ? 5 : verFullFloat) || $.verIE);
          $.verIE = verFullFloat || $.docModeIE;
        }
        $.ActiveXEnabled = !1;
        $.ActiveXFilteringEnabled = !1;
        if ($.isIE) {
          try {
            $.ActiveXFilteringEnabled = window.external.msActiveXFilteringEnabled();
          } catch (e) {
          }
          progid1 = ["Msxml2.XMLHTTP", "Msxml2.DOMDocument", "Microsoft.XMLDOM", "TDCCtl.TDCCtl", "Shell.UIHelper", "HtmlDlgSafeHelper.HtmlDlgSafeHelper", "Scripting.Dictionary"];
          progid2 = ["WMPlayer.OCX", "ShockwaveFlash.ShockwaveFlash", "AgControl.AgControl"];
          progid = progid1.concat(progid2);
          for (x = 0;x < progid.length;x++) {
            if ($.getAXO(progid[x])) {
              $.ActiveXEnabled = !0;
              if (!$.dbug) {
                break;
              }
            }
          }
          if ($.ActiveXEnabled && $.ActiveXFilteringEnabled) {
            for (x = 0;x < progid2.length;x++) {
              if ($.getAXO(progid2[x])) {
                $.ActiveXFilteringEnabled = !1;
                break;
              }
            }
          }
        }
      }, detectNonIE:function() {
        var e = this, c = this.$, d = navigator, b = c.isIE ? "" : d.userAgent || "", f = d.vendor || "", a = d.product || "";
        c.isGecko = /Gecko/i.test(a) && /Gecko\s*\/\s*\d/i.test(b);
        c.verGecko = c.isGecko ? c.formatNum(/rv\s*\:\s*([\.\,\d]+)/i.test(b) ? RegExp.$1 : "0.9") : null;
        c.isChrome = /(Chrome|CriOS)\s*\/\s*(\d[\d\.]*)/i.test(b);
        c.verChrome = c.isChrome ? c.formatNum(RegExp.$2) : null;
        c.isSafari = !c.isChrome && ((/Apple/i.test(f) || !f) && /Safari\s*\/\s*(\d[\d\.]*)/i.test(b));
        c.verSafari = c.isSafari && /Version\s*\/\s*(\d[\d\.]*)/i.test(b) ? c.formatNum(RegExp.$1) : null;
        c.isOpera = /Opera\s*[\/]?\s*(\d+\.?\d*)/i.test(b);
        c.verOpera = c.isOpera && (/Version\s*\/\s*(\d+\.?\d*)/i.test(b) || 1) ? parseFloat(RegExp.$1, 10) : null;
      }, detectPlatform:function() {
        var e = this, d = e.$, b, a = navigator.platform || "";
        d.OS = 100;
        if (a) {
          var c = ["Win", 1, "Mac", 2, "Linux", 3, "FreeBSD", 4, "iPhone", 21.1, "iPod", 21.2, "iPad", 21.3, "Win.*CE", 22.1, "Win.*Mobile", 22.2, "Pocket\\s*PC", 22.3, "", 100];
          for (b = c.length - 2;b >= 0;b = b - 2) {
            if (c[b] && (new RegExp(c[b], "i")).test(a)) {
              d.OS = c[b + 1];
              break;
            }
          }
        }
      }, library:function(c) {
        var e = this, d = document, b, a;
        c.init.objProperties(c, c, ["$", c]);
        for (a in c.Plugins) {
          c.init.plugin(c.Plugins[a], a);
        }
        e.publicMethods(c.PUBLIC, c);
        c.win.init();
        c.head = d.getElementsByTagName("head")[0] || (d.getElementsByTagName("body")[0] || (d.body || null));
        e.detectPlatform();
        e.detectIE();
        e.detectNonIE();
        c.init.hasRun = 1;
      }}, handler:function(c, b, a) {
        return function() {
          c(b, a);
        };
      }, fPush:function(b, a) {
        var c = this;
        if (c.isArray(a) && (c.isFunc(b) || c.isArray(b) && (b.length > 0 && c.isFunc(b[0])))) {
          a.push(b);
        }
      }, callArray:function(b) {
        var c = this, a, d;
        if (c.isArray(b)) {
          d = [].concat(b);
          for (a = 0;a < d.length;a++) {
            c.call(d[a]);
            b.splice(0, 1);
          }
        }
      }, call:function(c) {
        var b = this, a = b.isArray(c) ? c.length : -1;
        if (a > 0 && b.isFunc(c[0])) {
          c[0](b, a > 1 ? c[1] : 0, a > 2 ? c[2] : 0, a > 3 ? c[3] : 0);
        } else {
          if (b.isFunc(c)) {
            c(b);
          }
        }
      }, PUBLIC:{isMinVersion:function(a) {
        return function(h, g, d, c) {
          var e = a.findPlugin(h), f, b = -1;
          if (e.status < 0) {
            return e.status;
          }
          f = e.plugin;
          g = a.formatNum(a.isNum(g) ? g.toString() : a.isStrNum(g) ? a.getNum(g) : "0");
          if (f.getVersionDone != 1) {
            f.getVersion(g, d, c);
            if (f.getVersionDone === null) {
              f.getVersionDone = 1;
            }
          }
          if (f.installed !== null) {
            b = f.installed <= 0.5 ? f.installed : f.installed == 0.7 ? 1 : f.version === null ? 0 : a.compareNums(f.version, g, f) >= 0 ? 1 : -0.1;
          }
          return b;
        };
      }, getVersion:function(a) {
        return function(g, d, c) {
          var e = a.findPlugin(g), f, b;
          if (e.status < 0) {
            return null;
          }
          f = e.plugin;
          if (f.getVersionDone != 1) {
            f.getVersion(null, d, c);
            if (f.getVersionDone === null) {
              f.getVersionDone = 1;
            }
          }
          b = f.version || f.version0;
          b = b ? b.replace(a.splitNumRegx, a.getVersionDelimiter) : b;
          return b;
        };
      }, getInfo:function(a) {
        return function(g, d, c) {
          var b = {}, e = a.findPlugin(g), f;
          if (e.status < 0) {
            return b;
          }
          f = e.plugin;
          if (f.getInfo) {
            if (f.getVersionDone === null) {
              a.getVersion ? a.getVersion(g, d, c) : a.isMinVersion(g, "0", d, c);
            }
            b = f.getInfo();
          }
          return b;
        };
      }, onDetectionDone:function(a) {
        return function(h, g, c, b) {
          var d = a.findPlugin(h), j, e;
          if (d.status == -3) {
            return-1;
          }
          e = d.plugin;
          if (!a.isArray(e.funcs)) {
            e.funcs = [];
          }
          if (e.getVersionDone != 1) {
            j = a.getVersion ? a.getVersion(h, c, b) : a.isMinVersion(h, "0", c, b);
          }
          if (e.installed != -0.5 && e.installed != 0.5) {
            a.call(g);
            return 1;
          }
          if (e.NOTF) {
            a.fPush(g, e.funcs);
            return 0;
          }
          return 1;
        };
      }, onWindowLoaded:function(a) {
        return function(b) {
          if (a.win.loaded) {
            a.call(b);
          } else {
            a.fPush(b, a.win.funcs);
          }
        };
      }, hasMimeType:function(a) {
        return function(c) {
          if (!a.isIE && (c && (navigator && navigator.mimeTypes))) {
            var f, e, b, d = a.isArray(c) ? c : a.isString(c) ? [c] : [];
            for (b = 0;b < d.length;b++) {
              if (a.isString(d[b]) && /[^\s]/.test(d[b])) {
                f = navigator.mimeTypes[d[b]];
                e = f ? f.enabledPlugin : 0;
                if (e && (e.name || e.description)) {
                  return f;
                }
              }
            }
          }
          return null;
        };
      }, z:0}, codebase:{$:1, isDisabled:function() {
        var a = this, b = a.$;
        return b.ActiveXEnabled && (b.isIE && b.verIE >= 7) ? 0 : 1;
      }, checkGarbage:function(d) {
        var b = this, c = b.$, a;
        if (c.isIE && (d && c.getPROP(d.firstChild, "object"))) {
          a = c.getPROP(d.firstChild, "readyState");
          if (c.isNum(a) && a != 4) {
            b.garbage = 1;
            return 1;
          }
        }
        return 0;
      }, emptyGarbage:function() {
        var a = this, b = a.$, c;
        if (b.isIE && a.garbage) {
          try {
            window.CollectGarbage();
          } catch (c) {
          }
          a.garbage = 0;
        }
      }, init:function(d) {
        if (!d.init) {
          var b = this, c = b.$, a;
          d.init = 1;
          d.min = 0;
          d.max = 0;
          d.hasRun = 0;
          d.version = null;
          d.L = 0;
          d.altHTML = "";
          d.span = document.createElement("span");
          d.tagA = '<object width="1" height="1" style="display:none;" codebase="#version=';
          d.tagB = '" ' + (/clsid\s*:/i.test(d.$$.classID) ? 'classid="' : 'type="') + d.$$.classID + '">' + d.ParamTags + d.altHTML + c.openTag + "/object>";
          for (a = 0;a < d.Lower.length;a++) {
            d.Lower[a] = c.formatNum(d.Lower[a]);
            d.Upper[a] = c.formatNum(d.Upper[a]);
          }
        }
      }, isActiveXObject:function(i, b) {
        var f = this, g = f.$, a = 0, h, d = i.$$, c = i.span;
        if (i.min && g.compareNums(b, i.min) <= 0) {
          return 1;
        }
        if (i.max && g.compareNums(b, i.max) >= 0) {
          return 0;
        }
        if (d.BIfuncs && d.BIfuncs.length) {
          g.callArray(d.BIfuncs);
        }
        c.innerHTML = i.tagA + b + i.tagB;
        if (g.getPROP(c.firstChild, "object")) {
          a = 1;
        }
        f.checkGarbage(c);
        c.innerHTML = "";
        if (a) {
          i.min = b;
        } else {
          i.max = b;
        }
        return a;
      }, convert_:function(f, a, b, e) {
        var d = f.convert[a], c = f.$;
        return d ? c.isFunc(d) ? c.formatNum(d(b.split(c.splitNumRegx), e).join(",")) : b : d;
      }, convert:function(h, c, g) {
        var e = this, f = h.$, b, a, d;
        c = f.formatNum(c);
        a = {v:c, x:-1};
        if (c) {
          for (b = 0;b < h.Lower.length;b++) {
            d = e.convert_(h, b, h.Lower[b]);
            if (d && (f.compareNums(c, g ? d : h.Lower[b]) >= 0 && (!b || f.compareNums(c, g ? e.convert_(h, b, h.Upper[b]) : h.Upper[b]) < 0))) {
              a.v = e.convert_(h, b, c, g);
              a.x = b;
              break;
            }
          }
        }
        return a;
      }, isMin:function(g, f) {
        var d = this, e = g.$, c, b, a = 0;
        d.init(g);
        if (!e.isStrNum(f) || d.isDisabled()) {
          return a;
        }
        if (!g.L) {
          g.L = {};
          for (c = 0;c < g.Lower.length;c++) {
            if (d.isActiveXObject(g, g.Lower[c])) {
              g.L = d.convert(g, g.Lower[c]);
              break;
            }
          }
        }
        if (g.L.v) {
          b = d.convert(g, f, 1);
          if (b.x >= 0) {
            a = (g.L.x == b.x ? d.isActiveXObject(g, b.v) : e.compareNums(f, g.L.v) <= 0) ? 1 : -1;
          }
        }
        return a;
      }, search:function(g) {
        var k = this, h = k.$, i = g.$$, b = 0, c;
        k.init(g);
        c = g.hasRun || k.isDisabled() ? 1 : 0;
        g.hasRun = 1;
        if (c) {
          return g.version;
        }
        var o, n, m, j = function(q, t) {
          var r = [].concat(f), s;
          r[q] = t;
          s = k.isActiveXObject(g, r.join(","));
          if (s) {
            b = 1;
            f[q] = t;
          } else {
            p[q] = t;
          }
          return s;
        }, d = g.DIGITMAX, e, a, l = 9999999, f = [0, 0, 0, 0], p = [0, 0, 0, 0];
        for (o = 0;o < p.length;o++) {
          f[o] = g.DIGITMIN[o] || 0;
          e = f.join(",");
          a = f.slice(0, o).concat([l, l, l, l]).slice(0, f.length).join(",");
          for (m = 0;m < d.length;m++) {
            if (h.isArray(d[m])) {
              d[m].push(0);
              if (d[m][o] > p[o] && (h.compareNums(a, g.Lower[m]) >= 0 && h.compareNums(e, g.Upper[m]) < 0)) {
                p[o] = d[m][o];
              }
            }
          }
          for (n = 0;n < 20;n++) {
            if (p[o] - f[o] <= 16) {
              for (m = p[o];m >= f[o] + (o ? 1 : 0);m--) {
                if (j(o, m)) {
                  break;
                }
              }
              break;
            }
            j(o, Math.round((p[o] + f[o]) / 2));
          }
          if (!b) {
            break;
          }
          p[o] = f[o];
        }
        if (b) {
          g.version = k.convert(g, f.join(",")).v;
        }
        return g.version;
      }}, win:{$:1, loaded:false, hasRun:0, init:function() {
        var b = this, a = b.$;
        if (!b.hasRun) {
          b.hasRun = 1;
          b.addEvent("load", a.handler(b.runFuncs, a));
          b.addEvent("unload", a.handler(b.cleanup, a));
        }
      }, addEvent:function(c, b) {
        var e = this, d = e.$, a = window;
        if (d.isFunc(b)) {
          if (a.addEventListener) {
            a.addEventListener(c, b, false);
          } else {
            if (a.attachEvent) {
              a.attachEvent("on" + c, b);
            } else {
              a["on" + c] = e.concatFn(b, a["on" + c]);
            }
          }
        }
      }, concatFn:function(d, c) {
        return function() {
          d();
          if (typeof c == "function") {
            c();
          }
        };
      }, funcs0:[], funcs:[], cleanup:function(b) {
        for (var a in b) {
          b[a] = 0;
        }
        b = 0;
      }, runFuncs:function(a) {
        a.win.loaded = true;
        a.callArray(a.win.funcs0);
        a.callArray(a.win.funcs);
        if (a.DOM) {
          a.DOM.onDoneEmptyDiv();
        }
      }, z:0}, DOM:{$:1, isEnabled:{$:1, objectTag:function() {
        var a = this.$;
        return a.isIE ? a.ActiveXEnabled : 1;
      }, objectProperty:function() {
        var a = this.$;
        return a.isIE && a.verIE >= 7 ? 1 : 0;
      }}, div:null, divID:"plugindetect", divWidth:50, pluginSize:1, altHTML:"&nbsp;&nbsp;&nbsp;&nbsp;", emptyNode:function(c) {
        var b = this, d = b.$, a, f;
        if (c && c.childNodes) {
          for (a = c.childNodes.length - 1;a >= 0;a--) {
            if (d.isIE) {
              b.setStyle(c.childNodes[a], ["display", "none"]);
            }
            c.removeChild(c.childNodes[a]);
          }
        }
      }, LASTfuncs:[], onDoneEmptyDiv:function() {
        var f = this, g = f.$, b, d, c, a, h;
        if (!g.win.loaded || (g.win.funcs0.length || g.win.funcs.length)) {
          return;
        }
        for (b in g.Plugins) {
          d = g.Plugins[b];
          if (d) {
            if (d.OTF == 3 || d.funcs && d.funcs.length) {
              return;
            }
          }
        }
        g.callArray(f.LASTfuncs);
        if (f.div && f.div.childNodes) {
          for (b = f.div.childNodes.length - 1;b >= 0;b--) {
            c = f.div.childNodes[b];
            f.emptyNode(c);
          }
          try {
            f.div.innerHTML = "";
          } catch (h) {
          }
        }
        if (!f.div) {
          a = document.getElementById(f.divID);
          if (a) {
            f.div = a;
          }
        }
        if (f.div && f.div.parentNode) {
          try {
            f.div.parentNode.removeChild(f.div);
          } catch (h) {
          }
          f.div = null;
        }
      }, width:function() {
        var g = this, e = g.DOM, f = e.$, d = g.span, b, c, a = -1;
        b = d && f.isNum(d.scrollWidth) ? d.scrollWidth : a;
        c = d && f.isNum(d.offsetWidth) ? d.offsetWidth : a;
        return c > 0 ? c : b > 0 ? b : Math.max(c, b);
      }, obj:function(b) {
        var g = this, d = g.DOM, c = g.span, f, a = c && c.firstChild ? c.firstChild : null;
        try {
          if (a && b) {
            d.div.focus();
          }
        } catch (f) {
        }
        return a;
      }, rs:function() {
        var b = this, a = b.DOM.$;
        return a.isIE ? a.getPROP(b.obj(), "readyState") : b.undefined;
      }, getTagStatus:function(a, m, r, p, d, g) {
        var f = /clsid\s*\:/i, o = r && f.test(r.outerHTML || "") ? r : p && f.test(p.outerHTML || "") ? p : 0, h = r && !f.test(r.outerHTML || "") ? r : p && !f.test(p.outerHTML || "") ? p : 0, l = a && f.test(a.outerHTML || "") ? o : h;
        if (!a || (!a.span || (!m || (!m.span || (!l || !l.span))))) {
          return-2;
        }
        var s = this, c = s.$, q, k = a.width(), j = l.width(), n = m.width(), b = a.readyState(), t = l.readyState();
        if (k < 0 || (j < 0 || n <= s.pluginSize)) {
          return 0;
        }
        if (s.isEnabled.objectProperty()) {
          var i = c.getPROP(a.obj(), "object");
          if (i) {
            return 1.5;
          }
          if (g && (!a.pi && (c.isDefined(i) && (c.isIE && (a.tagName == l.tagName && a.time <= l.time))))) {
            if (k === j && (b === 0 && t !== 0)) {
              a.pi = 1;
            }
          }
        }
        if (j < n) {
          return a.pi ? -0.1 : 0;
        }
        if (k >= n) {
          if (!a.winLoaded && c.win.loaded) {
            return a.pi ? -0.5 : -1;
          }
          if (c.isNum(d)) {
            if (!c.isNum(a.count2)) {
              a.count2 = d;
            }
            if (d - a.count2 > 0) {
              return a.pi ? -0.5 : -1;
            }
          }
        }
        try {
          if (k == s.pluginSize && (!c.isIE || b === 4)) {
            if (!a.winLoaded && c.win.loaded) {
              return 1;
            }
            if (a.winLoaded && c.isNum(d)) {
              if (!c.isNum(a.count)) {
                a.count = d;
              }
              if (d - a.count >= 5) {
                return 1;
              }
            }
          }
        } catch (q) {
        }
        return a.pi ? -0.1 : 0;
      }, setStyle:function(b, h) {
        var c = this, d = c.$, g = b.style, a, f;
        if (g && h) {
          for (a = 0;a < h.length;a = a + 2) {
            try {
              g[h[a]] = h[a + 1];
            } catch (f) {
            }
          }
        }
      }, insertDivInBody:function(a, h) {
        var j = this, d = j.$, g, b = "pd33993399", c = null, i = h ? window.top.document : window.document, f = i.getElementsByTagName("body")[0] || i.body;
        if (!f) {
          try {
            i.write('<div id="' + b + '">.' + d.openTag + "/div>");
            c = i.getElementById(b);
          } catch (g) {
          }
        }
        f = i.getElementsByTagName("body")[0] || i.body;
        if (f) {
          f.insertBefore(a, f.firstChild);
          if (c) {
            f.removeChild(c);
          }
        }
      }, insert:function(f, b, g, a, l, k) {
        var q = this, i = q.$, m, n = document, s, r, p = n.createElement("span"), o, h, c = ["outlineStyle", "none", "borderStyle", "none", "padding", "0px", "margin", "0px", "visibility", "visible"], j = "outline-style:none;border-style:none;padding:0px;margin:0px;visibility:" + (k ? "hidden;" : "visible;") + "display:inline;";
        if (!i.isDefined(a)) {
          a = "";
        }
        if (i.isString(f) && /[^\s]/.test(f)) {
          f = f.toLowerCase().replace(/\s/g, "");
          s = i.openTag + f + ' width="' + q.pluginSize + '" height="' + q.pluginSize + '" ';
          s += 'style="' + j + '" ';
          for (o = 0;o < b.length;o = o + 2) {
            if (/[^\s]/.test(b[o + 1])) {
              s += b[o] + '="' + b[o + 1] + '" ';
            }
          }
          s += ">";
          for (o = 0;o < g.length;o = o + 2) {
            if (/[^\s]/.test(g[o + 1])) {
              s += i.openTag + 'param name="' + g[o] + '" value="' + g[o + 1] + '" />';
            }
          }
          s += a + i.openTag + "/" + f + ">";
        } else {
          f = "";
          s = a;
        }
        if (!q.div) {
          h = n.getElementById(q.divID);
          if (h) {
            q.div = h;
          } else {
            q.div = n.createElement("div");
            q.div.id = q.divID;
          }
          q.setStyle(q.div, c.concat(["width", q.divWidth + "px", "height", q.pluginSize + 3 + "px", "fontSize", q.pluginSize + 3 + "px", "lineHeight", q.pluginSize + 3 + "px", "verticalAlign", "baseline", "display", "block"]));
          if (!h) {
            q.setStyle(q.div, ["position", "absolute", "right", "0px", "top", "0px"]);
            q.insertDivInBody(q.div);
          }
        }
        r = {span:null, winLoaded:i.win.loaded, tagName:f, outerHTML:s, DOM:q, time:(new Date).getTime(), width:q.width, obj:q.obj, readyState:q.rs};
        if (q.div && q.div.parentNode) {
          q.setStyle(p, c.concat(["fontSize", q.pluginSize + 3 + "px", "lineHeight", q.pluginSize + 3 + "px", "verticalAlign", "baseline", "display", "inline"]));
          q.div.appendChild(p);
          try {
            p.innerHTML = s;
          } catch (m) {
          }
          r.span = p;
          r.winLoaded = i.win.loaded;
        }
        return r;
      }}, file:{$:1, any:"fileStorageAny999", valid:"fileStorageValid999", save:function(d, f, c) {
        var b = this, e = b.$, a;
        if (d && e.isDefined(c)) {
          if (!d[b.any]) {
            d[b.any] = [];
          }
          if (!d[b.valid]) {
            d[b.valid] = [];
          }
          d[b.any].push(c);
          a = b.split(f, c);
          if (a) {
            d[b.valid].push(a);
          }
        }
      }, getValidLength:function(a) {
        return a && a[this.valid] ? a[this.valid].length : 0;
      }, getAnyLength:function(a) {
        return a && a[this.any] ? a[this.any].length : 0;
      }, getValid:function(c, a) {
        var b = this;
        return c && c[b.valid] ? b.get(c[b.valid], a) : null;
      }, getAny:function(c, a) {
        var b = this;
        return c && c[b.any] ? b.get(c[b.any], a) : null;
      }, get:function(d, a) {
        var c = d.length - 1, b = this.$.isNum(a) ? a : c;
        return b < 0 || b > c ? null : d[b];
      }, split:function(g, c) {
        var b = this, e = b.$, f = null, a, d;
        g = g ? g.replace(".", "\\.") : "";
        d = new RegExp("^(.*[^\\/])(" + g + "\\s*)$");
        if (e.isString(c) && d.test(c)) {
          a = RegExp.$1.split("/");
          f = {name:a[a.length - 1], ext:RegExp.$2, full:c};
          a[a.length - 1] = "";
          f.path = a.join("/");
        }
        return f;
      }, z:0}, Plugins:{quicktime:{$:1, mimeType:["video/quicktime", "application/x-quicktimeplayer", "image/x-macpaint", "image/x-quicktime"], progID:"QuickTimeCheckObject.QuickTimeCheck.1", progID0:"QuickTime.QuickTime", classID:"clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B", codebase:{$:1, isMin:function(a) {
        return this.$.codebase.isMin(this, a);
      }, search:function() {
        return this.$.codebase.search(this);
      }, ParamTags:'<param name="src" value="" /><param name="controller" value="false" />', DIGITMAX:[[12, 11, 11], [7, 60], [7, 11, 11], 0, [7, 11, 11]], DIGITMIN:[5, 0, 0, 0], Upper:["999", "7,60", "7,50", "7,6", "7,5"], Lower:["7,60", "7,50", "7,6", "7,5", "0"], convert:[1, function(b, a) {
        return a ? [b[0], b[1] + b[2], b[3], "0"] : [b[0], b[1].charAt(0), b[1].charAt(1), b[2]];
      }, 1, 0, 1]}, setPluginStatus:function(d, a, f) {
        var e = this, c = e.$, b = e.installed;
        e.installed = a ? 1 : f ? f > 0 ? 0.7 : -0.1 : d ? 0 : -1;
        if (a) {
          e.version = c.formatNum(a, 3);
        }
        e.getVersionDone = e.installed == 0.7 || e.installed == -0.1 ? 0 : 1;
        c.codebase.emptyGarbage();
      }, getVersion:function(c) {
        var h = this, d = h.$, a = null, g = null, b, f;
        if (!d.isIE) {
          if (d.hasMimeType(h.mimeType)) {
            g = d.OS != 3 ? d.findNavPlugin("QuickTime.*Plug-?in", 0) : null;
            if (g && g.name) {
              a = d.getNum(g.name);
            }
          }
        } else {
          if (d.isStrNum(c)) {
            b = c.split(d.splitNumRegx);
            if (b.length > 3 && parseInt(b[3], 10) > 0) {
              b[3] = "9999";
            }
            c = b.join(",");
          }
          b = h.codebase.isMin(c);
          if (b) {
            h.setPluginStatus(0, 0, b);
            return;
          }
          if (!a || d.dbug) {
            a = h.codebase.search();
          }
          if (!a || d.dbug) {
            g = d.getAXO(h.progID);
            b = d.getPROP(g, "QuickTimeVersion");
            if (b && b.toString) {
              a = b.toString(16);
              a = parseInt(a.charAt(0) || "0", 16) + "." + parseInt(a.charAt(1) || "0", 16) + "." + parseInt(a.charAt(2) || "0", 16);
            }
          }
        }
        h.setPluginStatus(g, a);
      }}, java:{$:1, mimeType:["application/x-java-applet", "application/x-java-vm", "application/x-java-bean"], mimeType_dummy:"application/dummymimejavaapplet", classID:"clsid:8AD9C840-044E-11D1-B3E9-00805F499D93", classID_dummy:"clsid:8AD9C840-044E-11D1-B3E9-BA9876543210", navigator:{$:1, a:function() {
        var b, a = !0;
        try {
          a = window.navigator.javaEnabled();
        } catch (b) {
        }
        return a;
      }(), javaEnabled:function() {
        return this.a;
      }, mimeObj:0, pluginObj:0}, OTF:null, info:{$:1, Plugin2Status:0, setPlugin2Status:function(a) {
        if (this.$.isNum(a)) {
          this.Plugin2Status = a;
        }
      }, getPlugin2Status:function() {
        var c = this, d = c.$, b = c.$$, i = b.navigator, f, g, k, h, j, a;
        if (c.Plugin2Status === 0) {
          if (d.isIE && (d.OS == 1 && /Sun|Oracle/i.test(c.getVendor()))) {
            f = c.isMinJre4Plugin2();
            if (f > 0) {
              c.setPlugin2Status(1);
            } else {
              if (f < 0) {
                c.setPlugin2Status(-1);
              }
            }
          } else {
            if (!d.isIE && i.pluginObj) {
              k = /Next.*Generation.*Java.*Plug-?in|Java.*Plug-?in\s*2\s/i;
              h = /Classic.*Java.*Plug-in/i;
              j = i.pluginObj.description || "";
              a = i.pluginObj.name || "";
              if (k.test(j) || k.test(a)) {
                c.setPlugin2Status(1);
              } else {
                if (h.test(j) || h.test(a)) {
                  c.setPlugin2Status(-1);
                }
              }
            }
          }
        }
        return c.Plugin2Status;
      }, isMinJre4Plugin2:function(a) {
        var f = this, e = f.$, c = f.$$, d = "", g = c.applet.codebase, b = c.applet.getResult()[0];
        if (e.OS == 1) {
          d = "1,6,0,10";
        } else {
          if (e.OS == 2) {
            d = "1,6,0,12";
          } else {
            if (e.OS == 3) {
              d = "1,6,0,10";
            } else {
              d = "1,6,0,10";
            }
          }
        }
        if (!a) {
          a = (b && !c.applet.isRange(b) ? b : 0) || (c.version || (g.min && d ? g.isMin(d) > 0 ? d : "0,0,0,0" : 0));
        }
        a = e.formatNum(e.getNum(a));
        return a ? e.compareNums(a, d) >= 0 ? 1 : -1 : 0;
      }, BrowserForbidsPlugin2:function() {
        var a = this.$;
        if (a.OS >= 20) {
          return 0;
        }
        if (a.isIE && a.verIE < 6 || (a.isGecko && a.compareNums(a.verGecko, "1,9,0,0") < 0 || a.isOpera && (a.verOpera && a.verOpera < 10.5))) {
          return 1;
        }
        return 0;
      }, BrowserRequiresPlugin2:function() {
        var a = this.$;
        if (a.OS >= 20) {
          return 0;
        }
        if (a.isGecko && a.compareNums(a.verGecko, "1,9,2,0") >= 0 || (a.isChrome || a.OS == 1 && (a.verOpera && a.verOpera >= 10.6))) {
          return 1;
        }
        return 0;
      }, VENDORS:["Sun Microsystems Inc.", "Apple Computer, Inc.", "Oracle Corporation"], OracleMin:"1,7,0,0", OracleOrSun:function(a) {
        var c = this, b = c.$;
        return c.VENDORS[b.compareNums(b.formatNum(a), c.OracleMin) < 0 ? 0 : 2];
      }, OracleOrApple:function(a) {
        var c = this, b = c.$;
        return c.VENDORS[b.compareNums(b.formatNum(a), c.OracleMin) < 0 ? 1 : 2];
      }, getVendor:function() {
        var d = this, c = d.$, b = d.$$, f = b.vendor || (b.applet.getResult()[1] || ""), e = b.applet.codebase, a;
        if (!f) {
          a = b.DTK.version || (e.version || (e.min ? e.isMin(d.OracleMin) > 0 ? d.OracleMin : "0,0,0,0" : 0));
          if (a) {
            f = d.OracleOrSun(a);
          } else {
            if (b.version) {
              if (c.OS == 2) {
                f = d.OracleOrApple(b.version);
              } else {
                if (!c.isIE && c.OS == 1 || c.OS == 3) {
                  f = d.OracleOrSun(b.version);
                }
              }
            }
          }
        }
        return f;
      }, isPlugin2InstalledEnabled:function() {
        var b = this, d = b.$, a = b.$$, i = -1, f = a.installed, g = b.getPlugin2Status(), h = b.BrowserRequiresPlugin2(), e = b.BrowserForbidsPlugin2(), c = b.isMinJre4Plugin2();
        if (f !== null && f >= -0.1) {
          if (g >= 3) {
            i = 1;
          } else {
            if (g <= -3) {
            } else {
              if (g == 2) {
                i = 1;
              } else {
                if (g == -2) {
                } else {
                  if (h && (g >= 0 && c > 0)) {
                    i = 1;
                  } else {
                    if (e && (g <= 0 && c < 0)) {
                    } else {
                      if (h) {
                        i = 1;
                      } else {
                        if (e) {
                        } else {
                          if (g > 0) {
                            i = 1;
                          } else {
                            if (g < 0) {
                            } else {
                              if (c < 0) {
                              } else {
                                i = 0;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return i;
      }}, getInfo:function() {
        var b = this, d = b.$, a = b.applet, h, j = b.installed, g = b.DTK.query(), f = a.results, k = {All_versions:[], DeployTK_versions:[].concat(d.isArray(g.VERSIONS) ? g.VERSIONS : []), DeploymentToolkitPlugin:g.status == 0 || !g.HTML ? null : g.HTML.obj(), vendor:b.info.getVendor(), isPlugin2:b.info.isPlugin2InstalledEnabled(), OTF:b.OTF < 3 ? 0 : b.OTF == 3 ? 1 : 2, PLUGIN:null, name:"", description:""};
        k.All_versions = [].concat(k.DeployTK_versions.length ? k.DeployTK_versions : d.isString(b.version) ? [b.version] : []);
        var c = k.All_versions;
        for (h = 0;h < c.length;h++) {
          c[h] = d.formatNum(d.getNum(c[h]));
        }
        for (h = 0;h < f.length;h++) {
          if (f[h][0] && (a.HTML[h] && a.HTML[h].obj())) {
            k.PLUGIN = a.HTML[h].obj();
            break;
          }
        }
        var e = [null, null, null, null];
        for (h = 0;h < f.length;h++) {
          if (f[h][0]) {
            e[h] = 1;
          } else {
            if (f[h][0] !== null) {
              if (b.NOTF) {
                b.NOTF.isAppletActive(h);
              }
              if (a.active[h] > 0) {
                e[h] = 0;
              } else {
                if (a.allowed[h] >= 1 && (b.OTF != 3 && (a.isDisabled.single(h) || (j == -0.2 || (j == -1 || (a.active[h] < 0 || h == 3 && (!d.isIE || /Microsoft/i.test(k.vendor)))))))) {
                  e[h] = -1;
                }
              }
            } else {
              if (h == 3 && f[0][0]) {
                e[h] = 0;
              } else {
                if (a.isDisabled.single(h)) {
                  e[h] = -1;
                }
              }
            }
          }
        }
        k.objectTag = e[1];
        k.appletTag = e[2];
        k.objectTagActiveX = e[3];
        var i = 0;
        if (!d.isIE) {
          if (b.navMime.query().pluginObj) {
            i = b.navMime.pluginObj;
          } else {
            if (b.navigator.pluginObj) {
              i = b.navigator.pluginObj;
            }
          }
          if (i) {
            k.name = i.name || "";
            k.description = i.description || "";
          }
        }
        return k;
      }, getVerifyTagsDefault:function() {
        return[1, this.applet.isDisabled.VerifyTagsDefault_1() ? 0 : 1, 1];
      }, getVersion:function(j, g, i) {
        var b = this, d = b.$, e, a = b.applet, h = b.verify, k = b.navigator, f = null, l = null, c = null;
        if (b.getVersionDone === null) {
          b.OTF = 0;
          k.mimeObj = d.hasMimeType(b.mimeType);
          if (k.mimeObj) {
            k.pluginObj = k.mimeObj.enabledPlugin;
          }
          if (h) {
            h.begin();
          }
        }
        a.setVerifyTagsArray(i);
        d.file.save(b, ".jar", g);
        if (b.getVersionDone === 0) {
          if (a.should_Insert_Query_Any()) {
            e = a.insert_Query_Any(j);
            b.setPluginStatus(e[0], e[1], f, j);
          }
          return;
        }
        if ((!f || d.dbug) && b.DTK.query().version) {
          f = b.DTK.version;
        }
        if ((!f || d.dbug) && b.navMime.query().version) {
          f = b.navMime.version;
        }
        if ((!f || d.dbug) && b.navPlugin.query().version) {
          f = b.navPlugin.version;
        }
        if (b.nonAppletDetectionOk(f)) {
          c = f;
        }
        if (!c || (d.dbug || (a.VerifyTagsHas(2.2) || a.VerifyTagsHas(2.5)))) {
          e = b.lang.System.getProperty();
          if (e[0]) {
            f = e[0];
            c = e[0];
            l = e[1];
          }
        }
        b.setPluginStatus(c, l, f, j);
        if (a.should_Insert_Query_Any()) {
          e = a.insert_Query_Any(j);
          if (e[0]) {
            c = e[0];
            l = e[1];
          }
        }
        b.setPluginStatus(c, l, f, j);
      }, nonAppletDetectionOk:function(b) {
        var d = this, e = d.$, a = d.navigator, c = 1;
        if (!b || (!a.javaEnabled() && !d.lang.System.getPropertyHas(b) || (!e.isIE && (!a.mimeObj && !d.lang.System.getPropertyHas(b)) || e.isIE && !e.ActiveXEnabled))) {
          c = 0;
        } else {
          if (e.OS >= 20) {
          } else {
            if (d.info && (d.info.getPlugin2Status() < 0 && d.info.BrowserRequiresPlugin2())) {
              c = 0;
            }
          }
        }
        return c;
      }, setPluginStatus:function(d, i, g, h) {
        var b = this, e = b.$, f, c = 0, a = b.applet;
        g = g || b.version0;
        if (b.OTF > 0) {
          d = d || b.lang.System.getProperty()[0];
        }
        f = a.isRange(d);
        if (f) {
          if (a.setRange(f, h) == d) {
            c = f;
          }
          d = 0;
        }
        if (b.OTF < 3) {
          b.installed = c ? c > 0 ? 0.7 : -0.1 : d ? 1 : g ? -0.2 : -1;
        }
        if (b.OTF == 2 && (b.NOTF && (!b.applet.getResult()[0] && !b.lang.System.getProperty()[0]))) {
          b.installed = g ? -0.2 : -1;
        }
        if (b.OTF == 3 && (b.installed != -0.5 && b.installed != 0.5)) {
          b.installed = b.NOTF.isJavaActive(1) == 1 || b.lang.System.getProperty()[0] ? 0.5 : -0.5;
        }
        if (b.OTF == 4 && (b.installed == -0.5 || b.installed == 0.5)) {
          if (d) {
            b.installed = 1;
          } else {
            if (c) {
              b.installed = c > 0 ? 0.7 : -0.1;
            } else {
              if (b.NOTF.isJavaActive(1) == 1) {
                if (g) {
                  b.installed = 1;
                  d = g;
                } else {
                  b.installed = 0;
                }
              } else {
                if (g) {
                  b.installed = -0.2;
                } else {
                  b.installed = -1;
                }
              }
            }
          }
        }
        if (g) {
          b.version0 = e.formatNum(e.getNum(g));
        }
        if (d && !c) {
          b.version = e.formatNum(e.getNum(d));
        }
        if (i && e.isString(i)) {
          b.vendor = i;
        }
        if (!b.vendor) {
          b.vendor = "";
        }
        if (b.verify && b.verify.isEnabled()) {
          b.getVersionDone = 0;
        } else {
          if (b.getVersionDone != 1) {
            if (b.OTF < 2) {
              b.getVersionDone = 0;
            } else {
              b.getVersionDone = b.applet.can_Insert_Query_Any() ? 0 : 1;
            }
          }
        }
        e.codebase.emptyGarbage();
      }, DTK:{$:1, hasRun:0, status:null, VERSIONS:[], version:"", HTML:null, Plugin2Status:null, classID:["clsid:CAFEEFAC-DEC7-0000-0001-ABCDEFFEDCBA", "clsid:CAFEEFAC-DEC7-0000-0000-ABCDEFFEDCBA"], mimeType:["application/java-deployment-toolkit", "application/npruntime-scriptable-plugin;DeploymentToolkit"], isDisabled:function() {
        var a = this, b = a.$;
        if (!b.DOM.isEnabled.objectTag() || (b.isIE && b.verIE < 6 || (b.isGecko && b.compareNums(b.verGecko, b.formatNum("1.6")) <= 0 || (b.isSafari && (b.OS == 1 && (!b.verSafari || b.compareNums(b.verSafari, "5,1,0,0") < 0)) || b.isChrome)))) {
          return 1;
        }
        return 0;
      }, query:function() {
        var l = this, h = l.$, f = l.$$, k, m, i, a = h.DOM.altHTML, g = {}, b, d = null, j = null, c = l.hasRun || l.isDisabled();
        l.hasRun = 1;
        if (c) {
          return l;
        }
        l.status = 0;
        if (h.isIE) {
          for (m = 0;m < l.classID.length;m++) {
            l.HTML = h.DOM.insert("object", ["classid", l.classID[m]], [], a);
            d = l.HTML.obj();
            if (h.getPROP(d, "jvms")) {
              break;
            }
          }
        } else {
          i = h.hasMimeType(l.mimeType);
          if (i && i.type) {
            l.HTML = h.DOM.insert("object", ["type", i.type], [], a);
            d = l.HTML.obj();
          }
        }
        if (d) {
          try {
            if (Math.abs(f.info.getPlugin2Status()) < 2) {
              l.Plugin2Status = d.isPlugin2();
            }
          } catch (k) {
          }
          if (l.Plugin2Status !== null) {
            if (l.Plugin2Status) {
              f.info.setPlugin2Status(2);
            } else {
              if (h.isIE || f.info.getPlugin2Status() <= 0) {
                f.info.setPlugin2Status(-2);
              }
            }
          }
          try {
            b = h.getPROP(d, "jvms");
            if (b) {
              j = b.getLength();
              if (h.isNum(j)) {
                l.status = j > 0 ? 1 : -1;
                for (m = 0;m < j;m++) {
                  i = h.getNum(b.get(j - 1 - m).version);
                  if (i) {
                    l.VERSIONS.push(i);
                    g["a" + h.formatNum(i)] = 1;
                  }
                }
              }
            }
          } catch (k) {
          }
        }
        i = 0;
        for (m in g) {
          i++;
        }
        if (i && i !== l.VERSIONS.length) {
          l.VERSIONS = [];
        }
        if (l.VERSIONS.length) {
          l.version = h.formatNum(l.VERSIONS[0]);
        }
        return l;
      }}, navMime:{$:1, hasRun:0, mimetype:"", version:"", length:0, mimeObj:0, pluginObj:0, isDisabled:function() {
        var b = this, d = b.$, c = b.$$, a = c.navigator;
        if (d.isIE || (!a.mimeObj || !a.pluginObj)) {
          return 1;
        }
        return 0;
      }, query:function() {
        var i = this, f = i.$, a = i.$$, b = i.hasRun || i.isDisabled();
        i.hasRun = 1;
        if (b) {
          return i;
        }
        var n = /^\s*application\/x-java-applet;jpi-version\s*=\s*(\d.*)$/i, g, l, j, d = "", h = "a", o, m, k = {}, c = f.formatNum("0");
        for (l = 0;l < navigator.mimeTypes.length;l++) {
          o = navigator.mimeTypes[l];
          m = o ? o.enabledPlugin : 0;
          g = o && n.test(o.type || d) ? f.formatNum(f.getNum(RegExp.$1)) : 0;
          if (g && (m && (m.description || m.name))) {
            if (!k[h + g]) {
              i.length++;
            }
            k[h + g] = o.type;
            if (f.compareNums(g, c) > 0) {
              c = g;
            }
          }
        }
        g = k[h + c];
        if (g) {
          o = f.hasMimeType(g);
          i.mimeObj = o;
          i.pluginObj = o ? o.enabledPlugin : 0;
          i.mimetype = g;
          i.version = c;
        }
        return i;
      }}, navPlugin:{$:1, hasRun:0, version:"", isDisabled:function() {
        var d = this, c = d.$, b = d.$$, a = b.navigator;
        if (c.isIE || (!a.mimeObj || !a.pluginObj)) {
          return 1;
        }
        return 0;
      }, query:function() {
        var m = this, e = m.$, c = m.$$, h = c.navigator, j, l, k, g, d, a, i, f = 0, b = m.hasRun || m.isDisabled();
        m.hasRun = 1;
        if (b) {
          return m;
        }
        a = h.pluginObj.name || "";
        i = h.pluginObj.description || "";
        if (!f || e.dbug) {
          g = /Java.*TM.*Platform[^\d]*(\d+)(?:[\.,_](\d*))?(?:\s*[Update]+\s*(\d*))?/i;
          if ((g.test(a) || g.test(i)) && parseInt(RegExp.$1, 10) >= 5) {
            f = "1," + RegExp.$1 + "," + (RegExp.$2 ? RegExp.$2 : "0") + "," + (RegExp.$3 ? RegExp.$3 : "0");
          }
        }
        if (!f || e.dbug) {
          g = /Java[^\d]*Plug-in/i;
          l = g.test(i) ? e.formatNum(e.getNum(i)) : 0;
          k = g.test(a) ? e.formatNum(e.getNum(a)) : 0;
          if (l && (e.compareNums(l, e.formatNum("1,3")) < 0 || e.compareNums(l, e.formatNum("2")) >= 0)) {
            l = 0;
          }
          if (k && (e.compareNums(k, e.formatNum("1,3")) < 0 || e.compareNums(k, e.formatNum("2")) >= 0)) {
            k = 0;
          }
          d = l && k ? e.compareNums(l, k) > 0 ? l : k : l || k;
          if (d) {
            f = d;
          }
        }
        if (!f && (e.isSafari && e.OS == 2)) {
          j = e.findNavPlugin("Java.*\\d.*Plug-in.*Cocoa", 0);
          if (j) {
            l = e.getNum(j.description);
            if (l) {
              f = l;
            }
          }
        }
        if (f) {
          m.version = e.formatNum(f);
        }
        return m;
      }}, lang:{$:1, System:{$:1, hasRun:0, result:[null, null], isDisabled:function() {
        var b = this, c = b.$, a = b.$$;
        if (!window.java || c.isIE) {
          return 1;
        }
        if (c.OS == 2 && (c.verOpera && (c.verOpera < 9.2 && c.verOpera >= 9))) {
          return 1;
        }
        return 0;
      }, getPropertyHas:function(a) {
        var b = this, d = b.$, c = b.getProperty()[0];
        return a && (c && d.compareNums(d.formatNum(a), d.formatNum(c)) === 0) ? 1 : 0;
      }, getProperty:function() {
        var f = this, g = f.$, d = f.$$, h, a = "java_qqq990", c, i = "window.java.lang.System.getProperty", b = f.hasRun || f.isDisabled();
        f.hasRun = 1;
        if (!b) {
          g[a] = 0;
          try {
            c = document.createElement("script");
            c.type = "text/javascript";
            c.appendChild(document.createTextNode("(function(){var e;try{" + g.name + "." + a + "=[" + i + "('java.version')+''," + i + "('java.vendor')+'']}catch(e){}})();"));
            g.head.insertBefore(c, g.head.firstChild);
            g.head.removeChild(c);
          } catch (h) {
          }
          if (g.isArray(g[a])) {
            f.result = [].concat(g[a]);
          }
        }
        return f.result;
      }}}, applet:{$:1, codebase:{$:1, isMin:function(a) {
        return this.$.codebase.isMin(this, a);
      }, search:function() {
        return this.$.codebase.search(this);
      }, ParamTags:'<param name="code" value="A19999.class" /><param name="codebase_lookup" value="false" />', DIGITMAX:[[16, 64], [6, 0, 512], 0, [1, 5, 2, 256], 0, [1, 4, 1, 1], [1, 4, 0, 64], [1, 3, 2, 32]], DIGITMIN:[1, 0, 0, 0], Upper:["999", "10", "5,0,20", "1,5,0,20", "1,4,1,20", "1,4,1,2", "1,4,1", "1,4"], Lower:["10", "5,0,20", "1,5,0,20", "1,4,1,20", "1,4,1,2", "1,4,1", "1,4", "0"], convert:[function(b, a) {
        return a ? [parseInt(b[0], 10) > 1 ? "99" : parseInt(b[1], 10) + 3 + "", b[3], "0", "0"] : ["1", parseInt(b[0], 10) - 3 + "", "0", b[1]];
      }, function(b, a) {
        return a ? [b[1], b[2], b[3] + "0", "0"] : ["1", b[0], b[1], b[2].substring(0, b[2].length - 1 || 1)];
      }, 0, function(b, a) {
        return a ? [b[0], b[1], b[2], b[3] + "0"] : [b[0], b[1], b[2], b[3].substring(0, b[3].length - 1 || 1)];
      }, 0, 1, function(b, a) {
        return a ? [b[0], b[1], b[2], b[3] + "0"] : [b[0], b[1], b[2], b[3].substring(0, b[3].length - 1 || 1)];
      }, 1]}, results:[[null, null], [null, null], [null, null], [null, null]], getResult:function() {
        var b = this, d = b.results, a, c = [];
        for (a = d.length - 1;a >= 0;a--) {
          c = d[a];
          if (c[0]) {
            break;
          }
        }
        c = [].concat(c);
        return c;
      }, DummySpanTagHTML:0, HTML:[0, 0, 0, 0], active:[0, 0, 0, 0], DummyObjTagHTML:0, DummyObjTagHTML2:0, allowed:[1, 1, 1, 1], VerifyTagsHas:function(c) {
        var d = this, b;
        for (b = 0;b < d.allowed.length;b++) {
          if (d.allowed[b] === c) {
            return 1;
          }
        }
        return 0;
      }, saveAsVerifyTagsArray:function(c) {
        var b = this, d = b.$, a;
        if (d.isArray(c)) {
          for (a = 1;a < b.allowed.length;a++) {
            if (c.length > a - 1 && d.isNum(c[a - 1])) {
              if (c[a - 1] < 0) {
                c[a - 1] = 0;
              }
              if (c[a - 1] > 3) {
                c[a - 1] = 3;
              }
              b.allowed[a] = c[a - 1];
            }
          }
          b.allowed[0] = b.allowed[3];
        }
      }, setVerifyTagsArray:function(d) {
        var b = this, c = b.$, a = b.$$;
        if (a.getVersionDone === null) {
          b.saveAsVerifyTagsArray(a.getVerifyTagsDefault());
        }
        if (c.dbug || a.verify && a.verify.isEnabled()) {
          b.saveAsVerifyTagsArray([3, 3, 3]);
        } else {
          if (d) {
            b.saveAsVerifyTagsArray(d);
          }
        }
      }, isDisabled:{$:1, single:function(d) {
        var a = this, c = a.$, b = a.$$;
        if (d == 0) {
          return c.codebase.isDisabled();
        }
        if (d == 3 && !c.isIE || a.all()) {
          return 1;
        }
        if (d == 1 || d == 3) {
          return!c.DOM.isEnabled.objectTag();
        }
        if (d == 2) {
          return a.AppletTag();
        }
      }, aA_:null, all:function() {
        var c = this, e = c.$, d = c.$$, b = d.navigator, a = 0;
        if (c.aA_ === null) {
          if (e.OS >= 20) {
            a = 0;
          } else {
            if (e.verOpera && (e.verOpera < 11 && (!b.javaEnabled() && !d.lang.System.getProperty()[0]))) {
              a = 1;
            } else {
              if (e.verGecko && e.compareNums(e.verGecko, e.formatNum("2")) < 0 && (!b.mimeObj && !d.lang.System.getProperty()[0])) {
                a = 1;
              } else {
                if (c.AppletTag() && !e.DOM.isEnabled.objectTag()) {
                  a = 1;
                }
              }
            }
          }
          c.aA_ = a;
        }
        return c.aA_;
      }, AppletTag:function() {
        var b = this, d = b.$, c = b.$$, a = c.navigator;
        return d.isIE ? !a.javaEnabled() : 0;
      }, VerifyTagsDefault_1:function() {
        var a = this.$;
        if (a.OS >= 20) {
          return 1;
        }
        if (a.isIE && (a.verIE < 9 || !a.ActiveXEnabled) || (a.verGecko && a.compareNums(a.verGecko, a.formatNum("2")) < 0 || (a.isSafari && (!a.verSafari || a.compareNums(a.verSafari, a.formatNum("4")) < 0) || a.verOpera && a.verOpera < 10))) {
          return 0;
        }
        return 1;
      }, z:0}, can_Insert_Query:function(d) {
        var b = this, c = b.results[0][0], a = b.getResult()[0];
        if (b.HTML[d] || (d == 0 && (c !== null && !b.isRange(c)) || d == 0 && (a && !b.isRange(a)))) {
          return 0;
        }
        return!b.isDisabled.single(d);
      }, can_Insert_Query_Any:function() {
        var b = this, a;
        for (a = 0;a < b.results.length;a++) {
          if (b.can_Insert_Query(a)) {
            return 1;
          }
        }
        return 0;
      }, should_Insert_Query:function(e) {
        var c = this, f = c.allowed, d = c.$, b = c.$$, a = c.getResult()[0];
        a = a && (e > 0 || !c.isRange(a));
        if (!c.can_Insert_Query(e) || f[e] === 0) {
          return 0;
        }
        if (f[e] == 3 || (f[e] == 2.8 && !a || (f[e] == 2.5 && !b.lang.System.getProperty()[0] || f[e] == 2.2 && (!b.lang.System.getProperty()[0] && !a)))) {
          return 1;
        }
        if (!b.nonAppletDetectionOk(b.version0)) {
          if (f[e] == 2 || f[e] == 1 && !a) {
            return 1;
          }
        }
        return 0;
      }, should_Insert_Query_Any:function() {
        var b = this, a;
        for (a = 0;a < b.allowed.length;a++) {
          if (b.should_Insert_Query(a)) {
            return 1;
          }
        }
        return 0;
      }, query:function(f) {
        var j, a = this, i = a.$, d = a.$$, k = null, l = null, b = a.results, c, h, g = a.HTML[f];
        if (!g || (!g.obj() || (b[f][0] || (d.bridgeDisabled || i.dbug && d.OTF < 3)))) {
          return;
        }
        c = g.obj(true);
        h = g.readyState();
        if (!i.isIE || h === 4) {
          try {
            k = i.getNum(c.getVersion() + "");
            l = c.getVendor() + "";
            c.statusbar(i.win.loaded ? " " : " ");
          } catch (j) {
          }
          if (k && i.isStrNum(k)) {
            b[f] = [k, l];
            a.active[f] = 2;
            if (Math.abs(d.info.getPlugin2Status()) < 3) {
              try {
                if (c.Packages.A.isPlugin2()) {
                  d.info.setPlugin2Status(3);
                }
              } catch (j) {
              }
              if (Math.abs(d.info.getPlugin2Status()) < 3) {
                d.info.setPlugin2Status(-3);
              }
            }
          }
        }
      }, isRange:function(a) {
        return/^[<>]/.test(a || "") ? a.charAt(0) == ">" ? 1 : -1 : 0;
      }, setRange:function(b, a) {
        return(b ? b > 0 ? ">" : "<" : "") + (this.$.isString(a) ? a : "");
      }, insert_Query_Any:function(n) {
        var e = this, c = e.$, k = e.$$, l = e.results, m = e.HTML, g = c.DOM.altHTML, r = "A.class", o, b = c.file.getValid(k);
        if (e.should_Insert_Query(0)) {
          if (k.OTF < 2) {
            k.OTF = 2;
          }
          l[0] = [0, 0];
          o = n ? e.codebase.isMin(n) : e.codebase.search();
          if (o) {
            l[0][0] = n ? e.setRange(o, n) : o;
          }
          e.active[0] = o ? 1.5 : -1;
        }
        if (!b) {
          return e.getResult();
        }
        var f = b.name + b.ext, q = b.path;
        var i = ["archive", f, "code", r], j = ["mayscript", "true"], p = ["scriptable", "true", "codebase_lookup", "false"].concat(j), a = k.navigator, d = !c.isIE && (a.mimeObj && a.mimeObj.type) ? a.mimeObj.type : k.mimeType[0];
        if (!e.DummySpanTagHTML) {
          e.DummySpanTagHTML = c.DOM.insert("", [], [], g);
        }
        if (e.should_Insert_Query(1)) {
          if (k.OTF < 2) {
            k.OTF = 2;
          }
          m[1] = c.isIE ? c.DOM.insert("object", ["type", d], ["codebase", q].concat(i).concat(p), g, k) : c.DOM.insert("object", ["type", d], ["codebase", q].concat(i).concat(p), g, k);
          l[1] = [0, 0];
          e.query(1);
        }
        if (e.should_Insert_Query(2)) {
          if (k.OTF < 2) {
            k.OTF = 2;
          }
          m[2] = c.isIE ? c.DOM.insert("applet", ["alt", g].concat(j).concat(i), ["codebase", q].concat(p), g, k) : c.DOM.insert("applet", ["codebase", q, "alt", g].concat(j).concat(i), [].concat(p), g, k);
          l[2] = [0, 0];
          e.query(2);
        }
        if (e.should_Insert_Query(3)) {
          if (k.OTF < 2) {
            k.OTF = 2;
          }
          m[3] = c.isIE ? c.DOM.insert("object", ["classid", k.classID], ["codebase", q].concat(i).concat(p), g, k) : c.DOM.insert();
          l[3] = [0, 0];
          e.query(3);
        }
        if (c.DOM.isEnabled.objectTag()) {
          if (!e.DummyObjTagHTML && (m[1] || m[2])) {
            e.DummyObjTagHTML = c.DOM.insert("object", ["type", k.mimeType_dummy], [], g);
          }
          if (!e.DummyObjTagHTML2 && m[3]) {
            e.DummyObjTagHTML2 = c.DOM.insert("object", ["classid", k.classID_dummy], [], g);
          }
        }
        var h = k.NOTF;
        if (k.OTF < 3 && h.shouldContinueQuery()) {
          k.OTF = 3;
          h.onIntervalQuery = c.handler(h.$$onIntervalQuery, h);
          if (!c.win.loaded) {
            c.win.funcs0.push([h.winOnLoadQuery, h]);
          }
          setTimeout(h.onIntervalQuery, h.intervalLength);
        }
        return e.getResult();
      }}, NOTF:{$:1, count:0, countMax:25, intervalLength:250, shouldContinueQuery:function() {
        var f = this, e = f.$, c = f.$$, b = c.applet, a, d = 0;
        if (e.win.loaded && f.count > f.countMax) {
          return 0;
        }
        for (a = 0;a < b.results.length;a++) {
          if (b.HTML[a]) {
            if (!e.win.loaded && (f.count > f.countMax && e.codebase.checkGarbage(b.HTML[a].span))) {
              d = 1;
              b.HTML[a].DELETE = 1;
            }
            if (!d && (!b.results[a][0] && ((b.allowed[a] >= 2 || b.allowed[a] == 1 && !b.getResult()[0]) && f.isAppletActive(a) >= 0))) {
              return 1;
            }
          }
        }
        return 0;
      }, isJavaActive:function(d) {
        var f = this, c = f.$$, a, b, e = -9;
        for (a = 0;a < c.applet.HTML.length;a++) {
          b = f.isAppletActive(a, d);
          if (b > e) {
            e = b;
          }
        }
        return e;
      }, isAppletActive:function(e, g) {
        var h = this, f = h.$, b = h.$$, l = b.navigator, a = b.applet, i = a.HTML[e], d = a.active, k, c = 0, j, m = d[e];
        if (g || (m >= 1.5 || (!i || !i.span))) {
          return m;
        }
        j = f.DOM.getTagStatus(i, a.DummySpanTagHTML, a.DummyObjTagHTML, a.DummyObjTagHTML2, h.count);
        for (k = 0;k < d.length;k++) {
          if (d[k] > 0) {
            c = 1;
          }
        }
        if (j != 1) {
          m = j;
        } else {
          if (f.isIE || (b.version0 && (l.javaEnabled() && (l.mimeObj && (i.tagName == "object" || c))) || b.lang.System.getProperty()[0])) {
            m = 1;
          } else {
            m = 0;
          }
        }
        d[e] = m;
        return m;
      }, winOnLoadQuery:function(c, d) {
        var b = d.$$, a;
        if (b.OTF == 3) {
          a = d.queryAllApplets();
          d.queryCompleted(a);
        }
      }, $$onIntervalQuery:function(d) {
        var c = d.$, b = d.$$, a;
        if (b.OTF == 3) {
          a = d.queryAllApplets();
          if (!d.shouldContinueQuery()) {
            d.queryCompleted(a);
          }
        }
        d.count++;
        if (b.OTF == 3) {
          setTimeout(d.onIntervalQuery, d.intervalLength);
        }
      }, queryAllApplets:function() {
        var f = this, e = f.$, d = f.$$, c = d.applet, b, a;
        for (b = 0;b < c.results.length;b++) {
          c.query(b);
        }
        a = c.getResult();
        return a;
      }, queryCompleted:function(c) {
        var g = this, f = g.$, e = g.$$, d = e.applet, b;
        if (e.OTF >= 4) {
          return;
        }
        e.OTF = 4;
        var a = g.isJavaActive();
        for (b = 0;b < d.HTML.length;b++) {
          if (d.HTML[b] && d.HTML[b].DELETE) {
            f.DOM.emptyNode(d.HTML[b].span);
            d.HTML[b].span = null;
          }
        }
        e.setPluginStatus(c[0], c[1], 0);
        if (e.funcs) {
          f.callArray(e.funcs);
        }
        if (f.DOM) {
          f.DOM.onDoneEmptyDiv();
        }
      }}, zz:0}, flash:{$:1, mimeType:"application/x-shockwave-flash", progID:"ShockwaveFlash.ShockwaveFlash", classID:"clsid:D27CDB6E-AE6D-11CF-96B8-444553540000", getVersion:function() {
        var b = function(i) {
          if (!i) {
            return null;
          }
          var e = /[\d][\d\,\.\s]*[rRdD]{0,1}[\d\,]*/.exec(i);
          return e ? e[0].replace(/[rRdD\.]/g, ",").replace(/\s/g, "") : null;
        };
        var j = this, g = j.$, k, h, l = null, c = null, a = null, f, m, d;
        if (!g.isIE) {
          m = g.hasMimeType(j.mimeType);
          if (m && g.DOM.isEnabled.objectTag()) {
            f = g.DOM.insert("object", ["type", j.mimeType], [], "", j).obj();
            try {
              l = g.getNum(f.GetVariable("$version"));
            } catch (k) {
            }
          }
          if (!l) {
            d = m ? m.enabledPlugin : null;
            if (d && d.description) {
              l = b(d.description);
            }
            if (l) {
              l = g.getPluginFileVersion(d, l);
            }
          }
        } else {
          for (h = 15;h > 2;h--) {
            c = g.getAXO(j.progID + "." + h);
            if (c) {
              a = h.toString();
              break;
            }
          }
          if (!c) {
            c = g.getAXO(j.progID);
          }
          if (a == "6") {
            try {
              c.AllowScriptAccess = "always";
            } catch (k) {
              return "6,0,21,0";
            }
          }
          try {
            l = b(c.GetVariable("$version"));
          } catch (k) {
          }
          if (!l && a) {
            l = a;
          }
        }
        j.installed = l ? 1 : -1;
        j.version = g.formatNum(l);
        return true;
      }}, windowsmediaplayer:{$:1, mimeType:["application/x-mplayer2", "application/asx", "application/x-ms-wmp"], navPluginObj:null, progID:"WMPlayer.OCX", classID:"clsid:6BF52A52-394A-11D3-B153-00C04F79FAA6", INSTALLED:{dfault:null, inputMime:{}}, getVersion:function(i, g) {
        var c = this, f = c.$, l, e = null, h = null, j = c.mimeType, k = "Totem|VLC", b, d, a;
        c.installed = -1;
        if (f.isString(g)) {
          g = g.replace(/\s/g, "");
          if (g) {
            j = g;
          }
        } else {
          g = null;
        }
        if (g) {
          d = c.INSTALLED.inputMime[g];
          if (f.isDefined(d)) {
            c.installed = d;
            return;
          }
        } else {
          d = c.INSTALLED.dfault;
          if (d !== null) {
            c.installed = d;
            return;
          }
        }
        if (!f.isIE) {
          if (f.OS < 20 && f.OS >= 3) {
            c.installed = -1;
            return;
          }
          a = {wmp:"Windows\\s*Media\\s*Player.*Plug-?in|Flip4Mac.*Windows\\s*Media.*Plug-?in", wmpFirefox:"Windows\\s*Media\\s*Player.*Firefox.*Plug-?in", avoidPlayers:"Totem|VLC|RealPlayer"};
          if (c.getVersionDone === null) {
            c.getVersionDone = 0;
            e = f.getMimeEnabledPlugin(c.mimeType, a.wmp, a.avoidPlayers);
            if (!g) {
              l = e;
            }
            if (!e && f.hasMimeType(c.mimeType)) {
              e = f.findNavPlugin(a.wmp, 0, a.avoidPlayers);
            }
            if (e) {
              c.navPluginObj = e;
              b = f.isGecko && f.compareNums(f.verGecko, f.formatNum("1.8")) < 0;
              b = b || f.isOpera && f.verOpera < 10;
              b = b || f.isChrome;
              if (f.DOM.isEnabled.objectTag() && (!b && f.getMimeEnabledPlugin(c.mimeType[2], a.wmpFirefox, a.avoidPlayers))) {
                h = f.getPROP(f.DOM.insert("object", ["type", c.mimeType[2], "data", ""], ["src", ""], "", c).obj(), "versionInfo") || h;
              }
            }
          } else {
            h = c.version;
          }
          if (!f.isDefined(l)) {
            l = f.getMimeEnabledPlugin(j, a.wmp, a.avoidPlayers);
          }
          c.installed = l && h ? 1 : l ? 0 : c.navPluginObj ? -0.2 : -1;
        } else {
          e = f.getAXO(c.progID);
          h = f.getPROP(e, "versionInfo") || h;
          c.installed = e && h ? 1 : e ? 0 : -1;
        }
        if (!c.version) {
          c.version = f.formatNum(h);
        }
        if (g) {
          c.INSTALLED.inputMime[g] = c.installed;
        } else {
          c.INSTALLED.dfault = c.installed;
        }
      }}, silverlight:{$:1, mimeType:"application/x-silverlight", progID:"AgControl.AgControl", digits:[20, 20, 9, 12, 31], getVersion:function() {
        var e = this, c = e.$, k = document, i = null, b = null, f = null, h = true, a = [1, 0, 1, 1, 1], r = [1, 0, 1, 1, 1], j = function(d) {
          return(d < 10 ? "0" : "") + d.toString();
        }, n = function(s, d, u, v, t) {
          return s + "." + d + "." + u + j(v) + j(t) + ".0";
        }, o = function(s, d, t) {
          return q(s, d == 0 ? t : r[0], d == 1 ? t : r[1], d == 2 ? t : r[2], d == 3 ? t : r[3], d == 4 ? t : r[4]);
        }, q = function(v, t, s, x, w, u) {
          var u;
          try {
            return v.IsVersionSupported(n(t, s, x, w, u));
          } catch (u) {
          }
          return false;
        };
        if (!c.isIE) {
          var g;
          if (c.hasMimeType(e.mimeType)) {
            g = c.isGecko && c.compareNums(c.verGecko, c.formatNum("1.6")) <= 0;
            if (c.isGecko && g) {
              h = false;
            }
            f = c.findNavPlugin("Silverlight.*Plug-?in", 0);
            if (f && f.description) {
              i = c.formatNum(f.description);
            }
            if (i) {
              r = i.split(c.splitNumRegx);
              if (parseInt(r[2], 10) >= 30226 && parseInt(r[0], 10) < 2) {
                r[0] = "2";
              }
              i = r.join(",");
            }
          }
          e.installed = f && (h && i) ? 1 : f && h ? 0 : f ? -0.2 : -1;
        } else {
          b = c.getAXO(e.progID);
          var m, l, p;
          if (b && q(b, a[0], a[1], a[2], a[3], a[4])) {
            for (m = 0;m < e.digits.length;m++) {
              p = r[m];
              for (l = p + (m == 0 ? 0 : 1);l <= e.digits[m];l++) {
                if (o(b, m, l)) {
                  h = true;
                  r[m] = l;
                } else {
                  break;
                }
              }
              if (!h) {
                break;
              }
            }
            if (h) {
              i = n(r[0], r[1], r[2], r[3], r[4]);
            }
          }
          e.installed = b && (h && i) ? 1 : b && h ? 0 : b ? -0.2 : -1;
        }
        e.version = c.formatNum(i);
      }}, adobereader:{$:1, setPluginStatus:function() {
        var d = this, b = d.$, a = d.navPlugin.detected, e = d.navPlugin.version, g = d.axo.detected, c = d.axo.version, i = d.doc.detected, h = d.doc.version, f = e || (c || (h || null));
        d.installed = f ? 1 : a > 0 || (g > 0 || i > 0) ? 0 : i == -0.5 ? -0.15 : b.isIE && (!b.ActiveXEnabled || b.ActiveXFilteringEnabled) ? -1.5 : -1;
        d.version = b.formatNum(f);
      }, getVersion:function(c, e) {
        var a = this, d = a.$, b = 0;
        if ((!b || d.dbug) && a.navPlugin.query().detected > 0) {
          b = 1;
        }
        if ((!b || d.dbug) && a.axo.query().detected > 0) {
          b = 1;
        }
        if ((!b || d.dbug) && (a.doc.query().detected > 0 || a.doc.detected == -0.5)) {
          b = 1;
        }
        a.setPluginStatus();
      }, navPlugin:{$:1, detected:0, version:null, mimeType:"application/pdf", isDisabled:function() {
        var c = this, b = c.$, a = c.$$;
        return b.isIE || (c.detected || !b.hasMimeType(c.mimeType)) ? 1 : 0;
      }, attempt3:function() {
        var c = this, b = c.$, a = null;
        if (b.OS == 1) {
          if (b.hasMimeType("application/vnd.adobe.pdfxml")) {
            a = "9";
          } else {
            if (b.hasMimeType("application/vnd.adobe.x-mars")) {
              a = "8";
            } else {
              if (b.hasMimeType("application/vnd.adobe.xfdf")) {
                a = "6";
              }
            }
          }
        }
        return a;
      }, query:function() {
        var d = this, c = d.$, a = d.$$, f, e, b = null;
        if (d.isDisabled()) {
          return d;
        }
        f = "Adobe.*PDF.*Plug-?in|Adobe.*Acrobat.*Plug-?in|Adobe.*Reader.*Plug-?in";
        e = c.findNavPlugin(f, 0);
        d.detected = e ? 1 : -1;
        if (e) {
          b = c.getNum(e.description) || c.getNum(e.name);
          b = c.getPluginFileVersion(e, b);
          if (!b) {
            b = d.attempt3();
          }
        }
        if (b) {
          d.version = b;
        }
        return d;
      }}, pluginQuery:function(j) {
        var f = this, d = f.$, b = "", h = null, g, a, i, c;
        try {
          if (j) {
            b = j.GetVersions();
          }
        } catch (g) {
        }
        if (b && d.isString(b)) {
          a = /=\s*([\d\.]+)/g;
          for (i = 0;i < 30;i++) {
            if (a.test(b)) {
              c = d.formatNum(RegExp.$1);
              if (!h || d.compareNums(c > h) > 0) {
                h = c;
              }
            } else {
              break;
            }
          }
        }
        return h;
      }, axo:{$:1, detected:0, version:null, progID:["AcroPDF.PDF", "AcroPDF.PDF.1", "PDF.PdfCtrl", "PDF.PdfCtrl.5", "PDF.PdfCtrl.1"], isDisabled:function() {
        var b = this, c = b.$, a = b.$$;
        return c.isIE && !b.detected ? 0 : 1;
      }, query:function() {
        var d = this, e = d.$, b = d.$$, f = 0, c = null, a;
        if (d.isDisabled()) {
          return d;
        }
        for (a = 0;a < d.progID.length;a++) {
          f = e.getAXO(d.progID[a]);
          if (f) {
            d.detected = 1;
            c = b.pluginQuery(f);
            if (!e.dbug && c) {
              break;
            }
          }
        }
        d.version = c ? c : null;
        if (d.detected === 0) {
          d.detected = -1;
        }
        return d;
      }}, doc:{$:1, detected:0, version:null, classID:"clsid:CA8A9780-280D-11CF-A24D-444553540000", classID_dummy:"clsid:CA8A9780-280D-11CF-A24D-BA9876543210", DummySpanTagHTML:0, HTML:0, DummyObjTagHTML1:0, DummyObjTagHTML2:0, isDisabled:function() {
        var c = this, b = c.$, a = 0;
        if (c.detected) {
          a = 1;
        } else {
          if (b.dbug) {
          } else {
            if (!b.isIE || !b.DOM.isEnabled.objectTag()) {
              a = 1;
            }
          }
        }
        return a;
      }, query:function() {
        var i = this, d = i.$, f = i.$$, h = null, a = d.DOM.altHTML, g = null, c = 1, e = 1, b;
        if (i.isDisabled()) {
          return i;
        }
        if (!i.DummySpanTagHTML) {
          i.DummySpanTagHTML = d.DOM.insert("", [], [], a, f, e);
        }
        if (!i.HTML) {
          i.HTML = d.DOM.insert("object", ["classid", i.classID], [], a, f, e);
        }
        if (!i.DummyObjTagHTML2) {
          i.DummyObjTagHTML2 = d.DOM.insert("object", ["classid", i.classID_dummy], [], a, f, e);
        }
        b = d.DOM.getTagStatus(i.HTML, i.DummySpanTagHTML, i.DummyObjTagHTML1, i.DummyObjTagHTML2, g, c);
        h = f.pluginQuery(i.HTML.obj());
        i.detected = b > 0 || h ? 1 : b == -0.1 || b == -0.5 ? -0.5 : -1;
        i.version = h ? h : null;
        return i;
      }}}, realplayer:{$:1, mimeType:["audio/x-pn-realaudio-plugin"], progID:["rmocx.RealPlayer G2 Control", "rmocx.RealPlayer G2 Control.1", "RealPlayer.RealPlayer(tm) ActiveX Control (32-bit)", "RealVideo.RealVideo(tm) ActiveX Control (32-bit)", "RealPlayer"], classID:"clsid:CFCDAA03-8BE4-11cf-B84B-0020AFBBCCFA", INSTALLED:{}, q1:[[11, 0, 0], [999], [663], [663], [663], [660], [468], [468], [468], [468], [468], [468], [431], [431], [431], [372], [180], [180], [172], [172], [167], [114], [0]], q3:[[6, 
      0], [12, 99], [12, 69], [12, 69], [12, 69], [12, 69], [12, 69], [12, 69], [12, 69], [12, 69], [12, 69], [12, 69], [12, 46], [12, 46], [12, 46], [11, 3006], [11, 2806], [11, 2806], [11, 2804], [11, 2804], [11, 2799], [11, 2749], [11, 2700]], compare:function(g, f) {
        var e, d = g.length, i = f.length, c, h;
        for (e = 0;e < Math.max(d, i);e++) {
          c = e < d ? g[e] : 0;
          h = e < i ? f[e] : 0;
          if (c > h) {
            return 1;
          }
          if (c < h) {
            return-1;
          }
        }
        return 0;
      }, convertNum:function(a, f, e) {
        var g = this, c = g.$, d, b, h, i = null;
        if (!a || !(d = c.formatNum(a))) {
          return i;
        }
        d = d.split(c.splitNumRegx);
        for (h = 0;h < d.length;h++) {
          d[h] = parseInt(d[h], 10);
        }
        if (g.compare(d.slice(0, Math.min(f[0].length, d.length)), f[0]) != 0) {
          return i;
        }
        b = d.length > f[0].length ? d.slice(f[0].length) : [];
        if (g.compare(b, f[1]) > 0 || g.compare(b, f[f.length - 1]) < 0) {
          return i;
        }
        for (h = f.length - 1;h >= 1;h--) {
          if (h == 1) {
            break;
          }
          if (g.compare(f[h], b) == 0 && g.compare(f[h], f[h - 1]) == 0) {
            break;
          }
          if (g.compare(b, f[h]) >= 0 && g.compare(b, f[h - 1]) < 0) {
            break;
          }
        }
        return e[0].join(".") + "." + e[h].join(".");
      }, getVersion:function(m, n) {
        var j = this, k = null, c = 0, g = 0, d = j.$, q, i, s, a = j.mimeType[0];
        if (d.isString(n)) {
          n = n.replace(/\s/g, "");
          if (n) {
            a = n;
          }
        } else {
          n = null;
        }
        if (d.isDefined(j.INSTALLED[a])) {
          j.installed = j.INSTALLED[a];
          return;
        }
        if (!d.isIE) {
          var l = "RealPlayer.*Plug-?in", h = d.hasMimeType(j.mimeType), o = d.findNavPlugin(l, 0);
          if (h && o) {
            c = 1;
            if (n) {
              if (d.getMimeEnabledPlugin(n, l)) {
                g = 1;
              } else {
                g = 0;
              }
            } else {
              g = 1;
            }
          }
          if (j.getVersionDone !== 0) {
            j.getVersionDone = 0;
            if (h) {
              var p = 1, b = null, r = null;
              s = d.hasMimeType("application/vnd.rn-realplayer-javascript");
              if (s) {
                b = d.formatNum(d.getNum(s.enabledPlugin.description));
              }
              if (d.OS == 1 && b) {
                var f = b.split(d.splitNumRegx);
                r = true;
                if (j.compare(f, [6, 0, 12, 200]) < 0) {
                  r = false;
                } else {
                  if (j.compare(f, [6, 0, 12, 1739]) <= 0 && j.compare(f, [6, 0, 12, 857]) >= 0) {
                    r = false;
                  }
                }
              }
              if (r === false) {
                p = 0;
              }
              if (d.OS <= 2) {
                if (d.isGecko && d.compareNums(d.verGecko, d.formatNum("1,8")) < 0) {
                  p = 0;
                }
                if (d.isChrome) {
                  p = 0;
                }
                if (d.isOpera && d.verOpera < 10) {
                  p = 0;
                }
              } else {
                p = 0;
              }
              if (p && d.DOM.isEnabled.objectTag()) {
                s = d.DOM.insert("object", ["type", j.mimeType[0]], ["src", "", "autostart", "false", "imagestatus", "false", "controls", "stopbutton"], "", j).obj();
                try {
                  k = d.getNum(s.GetVersionInfo());
                } catch (q) {
                }
                d.DOM.setStyle(s, ["display", "none"]);
              }
              if (!k && (b && r === false)) {
                s = j.convertNum(b, j.q3, j.q1);
                k = s ? s : b;
              }
            }
          } else {
            k = j.version;
          }
          j.installed = c && (g && k) ? 1 : c && g ? 0 : c ? -0.2 : -1;
        } else {
          s = null;
          for (i = 0;i < j.progID.length;i++) {
            s = d.getAXO(j.progID[i]);
            if (s) {
              try {
                k = d.getNum(s.GetVersionInfo());
                break;
              } catch (q) {
              }
            }
          }
          j.installed = k ? 1 : -1;
        }
        if (!j.version) {
          j.version = d.formatNum(k);
        }
        j.INSTALLED[a] = j.installed;
      }}, zz:0}};
    })();
    self = hm.core.HardwareDetect;
  })();
  (function() {
    var self;
    (function() {
      var dateFormat = {}, dateParse = Date.parse;
      dateFormat.parsers = [function(date) {
        var found = date.match(/^(\d{4})-(\d{2})-(\d{2})(?:[\sT](\d{1,2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?)?$/);
        if (found !== null) {
          return new Date(found[1], found[2] - 1, found[3], found[4] || 0, found[5] || 0, found[6] || 0, found[7] || 0);
        }
        return null;
      }, function(date) {
        var found = date.match(/^(\d{4})\/(\d{2})\/(\d{2})(?: (\d{1,2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?)?$/);
        if (found !== null) {
          return new Date(found[1], found[2] - 1, found[3], found[4] || 0, found[5] || 0, found[6] || 0, found[7] || 0);
        }
        return null;
      }, function(date) {
        var found = date.match(/^(\d{2})\.(\d{2})\.(\d{4})(?: (\d{1,2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?)?$/);
        if (found !== null) {
          return new Date(found[3], found[2] - 1, found[1], found[4] || 0, found[5] || 0, found[6] || 0, found[7] || 0);
        }
        return null;
      }, function(date) {
        var found = date.match(/^(\d{1,2}):(\d{2})(?::(\d{2}))? (\d{2})\.(\d{2})\.(\d{4})$/);
        if (found !== null) {
          return new Date(found[6], found[5] - 1, found[4], found[1], found[2], found[3] || 0);
        }
        return null;
      }];
      var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g, timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g, timezoneClip = /[^-+\dA-Z]/g, pad = function(val, len) {
        val = String(val);
        len = len || 2;
        while (val.length < len) {
          val = "0" + val;
        }
        return val;
      };
      HM.define("hm.core.Date", {});
      hm.core.Date.getServerTime = function(dt) {
        return new Date(dt - HM.clientInitTime + HM.serverInitTime);
      };
      hm.core.Date.parse = function(date) {
        if (date instanceof Date) {
          return date;
        }
        if (typeof date === "number") {
          return new Date(date * 1E3);
        }
        if (date instanceof String) {
          date = date.toString();
        }
        if (typeof date !== "string") {
          return NaN;
        }
        var parsers = dateFormat.parsers, dtTest = null;
        for (var i = 0, ln = parsers.length;i < ln;i++) {
          dtTest = parsers[i](date);
          if (dtTest !== null) {
            break;
          }
        }
        if (!dtTest) {
          return new Date(dateParse.call(Date, date));
        }
        return dtTest || NaN;
      };
      hm.core.Date.format = function(date, mask, utc) {
        var dF = dateFormat;
        if (arguments.length == 1 && (date instanceof String && !/\d/.test(date))) {
          mask = date;
          date = undefined;
        }
        date = date ? new Date(date) : new Date;
        if (isNaN(date)) {
          return "Invalid Date";
        }
        mask = String(dF.masks[mask] || (mask || dF.masks["default"]));
        if (mask.slice(0, 4) == "UTC:") {
          mask = mask.slice(4);
          utc = true;
        }
        var _ = utc ? "getUTC" : "get", d = date[_ + "Date"](), D = date[_ + "Day"](), m = date[_ + "Month"](), y = date[_ + "FullYear"](), H = date[_ + "Hours"](), M = date[_ + "Minutes"](), s = date[_ + "Seconds"](), L = date[_ + "Milliseconds"](), o = utc ? 0 : date.getTimezoneOffset(), flags = {d:d, dd:pad(d), ddd:dF.i18n.dayNames[D], dddd:dF.i18n.dayNames[D + 7], m:m + 1, mm:pad(m + 1), mmm:dF.i18n.monthNames[m], mmmm:dF.i18n.monthNames[m + 12], yy:String(y).slice(2), yyyy:y, h:H % 12 || 12, 
        hh:pad(H % 12 || 12), H:H, HH:pad(H), M:M, MM:pad(M), s:s, ss:pad(s), l:pad(L, 3), L:pad(L > 99 ? Math.round(L / 10) : L), t:H < 12 ? "a" : "p", tt:H < 12 ? "am" : "pm", T:H < 12 ? "A" : "P", TT:H < 12 ? "AM" : "PM", Z:utc ? "UTC" : (dateFormat.toString.call(date).match(timezone) || [""]).pop().replace(timezoneClip, ""), o:(o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4), S:["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]};
        return mask.replace(token, function($0) {
          return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
        });
      };
      hm.core.Date.getToday = function() {
        var today = new Date;
        today.setHours(0, 0, 0, 0);
        return today;
      };
      hm.core.Date.getTomorrow = function() {
        var tomorrow = this.getToday();
        tomorrow.setDate(tomorrow.getDate() + 1);
        return tomorrow;
      };
      hm.core.Date.addMonth = function(date, monthOffset) {
        var newDate = new Date(date.getTime());
        newDate.setMonth(newDate.getMonth() + monthOffset);
        if (newDate.getDate() < date.getDate()) {
          newDate.setDate(0);
        }
        return newDate;
      };
      dateFormat.masks = {"default":"yyyy-mm-dd HH:MM:ss.l", shortDate:"m/d/yy", mediumDate:"mmm d, yyyy", longDate:"mmmm d, yyyy", fullDate:"dddd, mmmm d, yyyy", shortTime:"h:MM TT", mediumTime:"h:MM:ss TT", longTime:"h:MM:ss TT Z", isoDate:"yyyy-mm-dd", isoTime:"HH:MM:ss", isoDateTime:"yyyy-mm-dd'T'HH:MM:ss", isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"};
      dateFormat.i18n = {dayNames:[HM._("Вс"), HM._("Пн"), HM._("Вт"), HM._("Ср"), HM._("Чт"), HM._("Пт"), HM._("Сб"), HM._("Воскресенье"), HM._("Понедельник"), HM._("Вторник"), HM._("Среда"), HM._("Четверг"), HM._("Пятница"), 
      HM._("Суббота")], monthNames:[HM._("Янв"), HM._("Фев"), HM._("Мар"), HM._("Апр"), HM._("Май"), HM._("Июн"), HM._("Июл"), HM._("Авг"), HM._("Сен"), HM._("Окт"), HM._("Ноя"), HM._("Дек"), HM._("Январь"), HM._("Февраль"), 
      HM._("Март"), HM._("Апрель"), HM._("Май"), HM._("Июнь"), HM._("Июль"), HM._("Август"), HM._("Сентябрь"), HM._("Октябрь"), HM._("Ноябрь"), HM._("Декабрь")]};
      hm.core.Date.getMonthNames = function() {
        var rusMonthNames = dateFormat.i18n.monthNames.slice(12, 24), result = [];
        for (var i = 0, ln = rusMonthNames.length;i < ln;i++) {
          result.push(HM._(rusMonthNames[i]));
        }
        return result;
      };
      if (!Date.now) {
        hm.core.Date.now = function() {
          return(new Date).getTime();
        };
      } else {
        hm.core.Date.now = Date.now.bind(Date);
      }
    })();
    self = hm.core.Date;
  })();
  (function() {
    var self;
    function Url(cfg) {
      if (!cfg.module) {
        throw Error("Для url не указан модуль");
      }
      if (!cfg.controller) {
        cfg.controller = "index";
      }
      if (!cfg.action) {
        cfg.action = "index";
      }
      var module = cfg.module, controller = cfg.controller, action = cfg.action, app = cfg.app;
      var url = "", additionalParams = "";
      for (var i in cfg) {
        if (!cfg.hasOwnProperty(i) || (i == "app" || (i == "module" || (i == "controller" || i == "action")))) {
          continue;
        }
        additionalParams += "/" + encodeURI(i) + "/" + encodeURI(cfg[i]);
      }
      if (app) {
        url += "/" + app;
      }
      if (controller === "index" && (action === "index" && (module && additionalParams === ""))) {
        url += "/" + encodeURI(module);
      } else {
        url += "/" + encodeURI(module) + "/" + encodeURI(controller) + "/" + encodeURI(action);
      }
      url += additionalParams;
      return url;
    }
    Url.getSearchParams = function(url) {
      var urlInfo = hm.core.Url.getInfo(url), result = {};
      if (urlInfo.search === undefined) {
        return result;
      }
      var params = decodeURIComponent(urlInfo.search.substr(1)).split("&");
      for (var i = 0, ln = params.length;i < ln;i++) {
        var param = params[i].split("=");
        result[param[0]] = param[1];
      }
      return result;
    };
    Url.getInfo = function(url) {
      if (this._urlInfo === undefined) {
        this._urlInfo = [];
      }
      if (this._urlInfo[url] !== undefined) {
        return this._urlInfo[url];
      }
      if (this._urlInfoRegexp === undefined) {
        this._urlInfoRegexp = new RegExp(["^(https?:)//", "(([^:/?#]*)(?::([0-9]+))?)", "(/[^?#]*)", "(\\?[^#]*|)?", "(#.*|)?$"].join(""));
        this._urlInfoRegexpSimple = new RegExp(["(/[^?#]*)", "(\\?[^#]*|)?", "(#.*|)?$"].join(""));
      }
      var result;
      if (url[0] === "/") {
        result = url.match(this._urlInfoRegexpSimple);
        result = [url, location.protocol, location.host, location.hostname, location.port, result[1], result[2], result[3]];
      } else {
        result = url.match(this._urlInfoRegexp);
      }
      result = {url:result[0], protocol:result[1], host:result[2], hostname:result[3], port:result[4], pathname:result[5], search:result[6], hash:result[7]};
      this._urlInfo[url] = result;
      return result;
    };
    Url.getInstance = function() {
      return Url;
    };
    Url.url = Url;
    hm.core.ClassManager.classAlias("hm.core.Url", Url);
    self = hm.core.Url;
  })();
  (function() {
    var self;
    HM.define("hm.core.BaseService", {});
    (function() {
      var serviceList = {}, services = {};
      hm.core.BaseService.get = function(serviceName) {
        if (!serviceList.hasOwnProperty(serviceName)) {
          serviceList[serviceName] = "hm.module." + serviceName.toLowerCase() + ".service." + serviceName + "Service";
        }
        if (!services.hasOwnProperty(serviceName)) {
          services[serviceName] = HM.create(serviceList[serviceName]);
        }
        return services[serviceName];
      };
      hm.core.BaseService.registerServices = function(services) {
        for (var serviceCode in services) {
          if (!services.hasOwnProperty(serviceCode)) {
            continue;
          }
          serviceList[serviceCode] = services[serviceCode];
        }
      };
    })();
    self = hm.core.BaseService;
  })();
  (function() {
    var self;
    HM.define("hm.core.Application", {extend:"hm.core.ObservableClass", CORE_DISABLE_AJAX_SPINNER:false, CORE_DISABLE_DEBUG_PANEL:false, CORE_DISABLE_NEW_GRID:false, ES_DISABLE_EVENT_TOOLBAR:false, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      this._registerServices();
      this._initNow();
      $(this._initOnReady.bind(this));
    }, _registerServices:function() {
      hm.core.BaseService.registerServices({CourseLesson:"hm.module.course.service.lesson.LessonService", CourseMaterialService:"hm.module.course.service.material.MaterialService"});
    }, _initNow:function() {
      this._initAjaxSpinner();
    }, _initOnReady:function() {
      this._initDebugPanel();
      this._initEventToolbar();
      this.fireEvent("ready", this);
    }, _initAjaxSpinner:function() {
      if (this.CORE_DISABLE_AJAX_SPINNER) {
        return;
      }
      hm.module.base.ui.ajax.AjaxSpinner.getInstance();
    }, _initDebugPanel:function() {
      if (this.CORE_DISABLE_DEBUG_PANEL) {
        return;
      }
      if (!hm.debugAllowed) {
        return;
      }
      HM.$document().on("keydown", function(e) {
        if (!(e.altKey && (e.ctrlKey && (e.shiftKey && e.keyCode === 68)))) {
          return;
        }
        HM.require("hm.module.develop.ui.panel.DevPanel").getInstance().show();
      });
    }, _initEventToolbar:function() {
      if (this.ES_DISABLE_EVENT_TOOLBAR) {
        return;
      }
      if (!HM.moduleExists("es")) {
        return;
      }
      if (HM.getService("User").isGuest()) {
        return;
      }
      HM.create("hm.module.es.ui.event.toolbar.EventToolbar");
    }});
    self = hm.core.Application;
  })();
  (function() {
    var self;
    HM.define("hm.core.Cookie", {statics:{get:function(name) {
      var matches = document.cookie.match(new RegExp("(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, "\\$1") + "=([^;]*)"));
      return matches ? decodeURIComponent(matches[1]) : undefined;
    }, set:function(name, value, options) {
      options = options || {};
      if (!options.hasOwnProperty("path")) {
        options.path = "/";
      }
      var expires = options.expires;
      if (typeof expires == "number" && expires) {
        var d = new Date;
        d.setTime(d.getTime() + expires * 1E3);
        expires = options.expires = d;
      }
      if (expires && expires.toUTCString) {
        options.expires = expires.toUTCString();
      }
      value = encodeURIComponent(value);
      var updatedCookie = name + "=" + value;
      for (var propName in options) {
        updatedCookie += "; " + propName;
        var propValue = options[propName];
        if (propValue !== true) {
          updatedCookie += "=" + propValue;
        }
      }
      document.cookie = updatedCookie;
    }, "delete":function(name) {
      this.set(name, "", {expires:-1});
    }}});
    self = hm.core.Cookie;
  })();
  (function() {
    var self;
    HM.define("hm.core.Event", {config:{target:null, name:"", listeners:{}, args:[]}, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      this._prevented = false;
    }, fire:function() {
      var listeners = this.config.listeners, args = this.config.args, lastIndex = args.length;
      args.unshift(this);
      for (var i = 0, len = listeners.length;i < len;i++) {
        var listener = listeners[i];
        args[lastIndex + 1] = listener.cfg;
        listener.fn.apply(listener.scope, args);
      }
      return this;
    }, preventDefault:function() {
      this._prevented = true;
    }, isPrevented:function() {
      return this._prevented;
    }, getTarget:function() {
      return this.config.target;
    }});
    self = hm.core.Event;
  })();
  (function() {
    var self;
    HM.define("hm.core.Info", {statics:{getSimpleInfo:function() {
      var compilationInfo = hm.compilationInfo, buildConfig = compilationInfo.config, info = ["============= Фронтэнд ============", "    Проект: " + buildConfig.project, "    Версия: " + HM.build, "    Дата:   " + hm.core.Date.format(compilationInfo.time, "yyyy-mm-dd HH:MM:ss"), "==================================="];
      return info.join("\n");
    }, getBuildInfo:function() {
      var parts = hm.compilationInfo.config.parts, partNames = ["base", "modules", "projects"], result = [];
      for (var i = 0;i < partNames.length;i++) {
        var part = parts[partNames[i]];
        result.push("============= " + partNames[i] + " =============");
        for (var j = 0;j < part.length;j++) {
          var module = part[j];
          if (!module.enabled) {
            continue;
          }
          result.push(module.name + ": " + module.version);
        }
      }
      return result.join("\n");
    }}});
    self = hm.core.Info;
  })();
  (function() {
    var self;
    HM.define("hm.core.Collection", {extend:"hm.core.ObservableClass", config:{data:null}, __construct:function() {
      this.models = [];
      if (this.config.data) {
        var data = this.config.data;
        for (var i = 0, ln = data.length;i < ln;i++) {
          this.add(data[i]);
        }
      }
    }, add:function(data) {
      this.models.push(HM.create("hm.core.data.Model", {data:data}));
    }, length:function() {
      return this.models.length;
    }, find:function(fieldName, value) {
      var models = this.models, ln = models.length;
      for (var i = 0;i < ln;i++) {
        if (models[i].get(fieldName) === value) {
          return models[i];
        }
      }
      return null;
    }});
    self = hm.core.Collection;
  })();
  (function() {
    var self;
    var filters = {};
    HM.define("hm.core.data.filter.AbstractFilter", {extend:"hm.core.ObservableClass", config:{type:"", field:"", clean:false}, statics:{register:function(constructor) {
      filters[constructor.prototype.config.type] = constructor;
    }, factory:function(cfg) {
      var type = cfg.type;
      if (!filters.hasOwnProperty(type)) {
        throw new Error("Фильтр с типом " + type + " не зарегистрирован");
      }
      return new filters[type](cfg);
    }}, _filter:function(data) {
      return true;
    }, filter:function(data) {
      if (this.config.clean) {
        return true;
      }
      if (this.config.field) {
        if (data instanceof hm.core.data.Model) {
          data = data.get(this.config.field);
        } else {
          data = data[this.config.field];
        }
      }
      return this._filter(data);
    }, clear:function() {
      this.config.clean = true;
      this.fireEvent("change", this);
    }});
    self = hm.core.data.filter.AbstractFilter;
  })();
  (function() {
    var self;
    HM.define("hm.core.data.filter.CallbackFilter", {extend:"hm.core.data.filter.AbstractFilter", config:{type:"callback", fn:function(data) {
      return true;
    }}, _filter:function(data) {
      return this.config.fn(data);
    }});
    hm.core.data.filter.AbstractFilter.register(hm.core.data.filter.CallbackFilter);
    self = hm.core.data.filter.CallbackFilter;
  })();
  (function() {
    var self;
    HM.define("hm.core.data.filter.EqualFilter", {extend:"hm.core.data.filter.AbstractFilter", config:{type:"equal", value:""}, _filter:function(data) {
      return data == this.config.value;
    }, setValue:function(value) {
      if (!this.config.clean && value === this.config.value) {
        return;
      }
      this.config.clean = false;
      this.config.value = value;
      this.fireEvent("change", this, value);
    }});
    hm.core.data.filter.AbstractFilter.register(hm.core.data.filter.EqualFilter);
    self = hm.core.data.filter.EqualFilter;
  })();
  (function() {
    var self;
    HM.define("hm.core.data.filter.LikeFilter", {extend:"hm.core.data.filter.AbstractFilter", config:{type:"like", value:""}, _filter:function(data) {
      if (typeof data !== "string") {
        data = data + "";
      }
      var value = this.config.value;
      if (!value) {
        return true;
      }
      return data.toLowerCase().search(value.toLowerCase()) !== -1;
    }, setValue:function(value) {
      if (!this.config.clean && value === this.config.value) {
        return;
      }
      this.config.clean = false;
      this.config.value = value;
      this.fireEvent("change", this, value);
    }});
    hm.core.data.filter.AbstractFilter.register(hm.core.data.filter.LikeFilter);
    self = hm.core.data.filter.LikeFilter;
  })();
  (function() {
    var self;
    HM.define("hm.core.data.filter.MultiFilter", {extend:"hm.core.data.filter.AbstractFilter", config:{type:"multi", filters:null}, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      var filters = this.config.filters, newFilters = [];
      for (var i = 0, ln = filters.length;i < ln;i++) {
        var filter = filters[i];
        if (!(filter instanceof hm.core.data.filter.AbstractFilter)) {
          filter = hm.core.data.filter.AbstractFilter.factory(filter);
        }
        newFilters.push(filter);
      }
      this._filters = newFilters;
    }, filter:function(data) {
      var filters = this._filters;
      for (var i = 0, ln = filters.length;i < ln;i++) {
        if (!filters[i].filter(data)) {
          return false;
        }
      }
      return true;
    }});
    hm.core.data.filter.AbstractFilter.register(hm.core.data.filter.MultiFilter);
    self = hm.core.data.filter.MultiFilter;
  })();
  (function() {
    var self;
    HM.define("hm.core.String", {statics:{printf:function(string, obj) {
      var useArguments = false;
      var _arguments = Array.prototype.slice.call(arguments, 1);
      var i = -1;
      if (typeof _arguments[0] == "string") {
        useArguments = true;
      }
      if (obj instanceof Array || useArguments) {
        return string.replace(/\%s/g, function(a, b) {
          i++;
          if (useArguments) {
            if (typeof _arguments[i] == "string") {
              return _arguments[i];
            } else {
              throw new Error("Arguments element is an invalid type");
            }
          }
          return obj[i];
        });
      } else {
        return string.replace(/{([^{}]*)}/g, function(a, b) {
          var r = obj[b];
          return typeof r === "string" || typeof r === "number" ? r : a;
        });
      }
    }, dayString:function(digit) {
      var lastFigure = digit % 10;
      if (digit > 11 && digit < 15) {
        return HM._("дней");
      } else {
        if (lastFigure == 1) {
          return HM._("день");
        }
        if (lastFigure > 1 && lastFigure < 5 || lastFigure > 0 && lastFigure < 1) {
          return HM._("дня");
        }
        if (lastFigure == 0 || lastFigure >= 5) {
          return HM._("дней");
        }
      }
    }}});
    self = hm.core.String;
  })();
  (function() {
    var self;
    HM.define("hm.core.ZIndexManager", {singleton:true, getMaxZIndexOfTheChildren:function(el) {
      var children = el.children, ln = children.length, hmDOM = hm.core.DOM, result = 0, child, style, position, testIndex;
      for (var i = 0;i < ln;i++) {
        child = children[i];
        style = hmDOM.getComputedStyle(child);
        if (style.display === "none") {
          continue;
        }
        if (style.visibility === "hidden") {
          continue;
        }
        position = style.position;
        if (position === "absolute" || position === "fixed") {
          testIndex = style.zIndex;
          if (testIndex !== "auto") {
            testIndex = testIndex - 0;
            if (result < testIndex) {
              result = testIndex;
            }
            continue;
          }
        }
        if (style.hasOwnProperty) {
          if (style.hasOwnProperty("opacity")) {
            if (style.opacity < 1) {
              continue;
            }
          }
        }
        try {
          testIndex = this.getMaxZIndexOfTheChildren(child);
        } catch (e) {
          testIndex = 1E4;
        }
        if (result < testIndex) {
          result = testIndex;
        }
      }
      return result;
    }, getMaxZIndex:function() {
      try {
        return this.getMaxZIndexOfTheChildren(document.body);
      } catch (e) {
        return 1E4;
      }
    }});
    self = hm.core.ZIndexManager;
  })();
  (function() {
    var self;
    HM.define("hm.core.data.reader.AbstractReader", {config:{dataProperty:"data", totalProperty:"total", successProperty:"success", messageProperty:"message", type:"json"}, read:function(data) {
    }});
    hm.core.data.reader.AbstractReader.factory = hm.core.ClassManager.createFactory("type", {json:"hm.core.data.reader.JsonReader", simple_json:"hm.core.data.reader.SimpleJsonReader"});
    self = hm.core.data.reader.AbstractReader;
  })();
  (function() {
    var self;
    HM.define("hm.core.data.proxy.AbstractProxy", {extend:"hm.core.ObservableClass", requires:["hm.core.data.reader.AbstractReader"], config:{reader:"json", model:"hm.core.data.Model", async:true, type:"xhr", data:null}, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      var reader = this.config.reader;
      if (typeof reader === "string") {
        reader = {type:reader};
      } else {
        reader = reader || {type:"json"};
      }
      this._reader = hm.core.data.reader.AbstractReader.factory(reader);
    }, filter:function(filter) {
    }, createItems:function(data) {
      var items = [], modelClass = this.config.model;
      if (!data || !data.length) {
        return items;
      }
      for (var i = 0;i < data.length;i++) {
        var item;
        if (data[i] instanceof eval(modelClass)) {
          item = data[i];
        } else {
          item = HM.create(modelClass, {data:data[i]});
        }
        items.push(item);
      }
      return items;
    }, read:function(offset, limit, params) {
    }, readMore:function(offset, limit, params) {
    }});
    hm.core.data.proxy.AbstractProxy.factory = hm.core.ClassManager.createFactory("type", {xhr:"hm.core.data.proxy.XhrProxy", memory:"hm.core.data.proxy.MemoryProxy"});
    self = hm.core.data.proxy.AbstractProxy;
  })();
  (function() {
    var self;
    HM.define("hm.core.data.proxy.MemoryProxy", {extend:"hm.core.data.proxy.AbstractProxy", config:{}, setData:function(data) {
      this.config.data = data;
      if (this._lastReadingParams) {
      }
    }, read:function(offset, limit, params, method) {
      var data = this.config.data;
      if (offset !== null && limit !== null) {
        data = data.splice(offset, limit);
      }
      if (this.config.async) {
        setTimeout(this._onTimeout.bind(this, data, method), 0);
      } else {
        this._onTimeout(data, method);
      }
      this._lastReadingParams = arguments;
    }, _onTimeout:function(data, method) {
      data = this._reader.read(data);
      data.items = this.createItems(data.items);
      data.total = data.length;
      this.fireEvent("data_loaded", data, method);
    }});
    self = hm.core.data.proxy.MemoryProxy;
  })();
  (function() {
    var self;
    HM.define("hm.core.data.proxy.XhrProxy", {extend:"hm.core.data.proxy.AbstractProxy", config:{url:"", method:"get", cache:false, async:true, params:null, offsetProperty:"offset", limitProperty:"limit"}, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
    }, read:function(offset, limit, additionalParams, returnData) {
      var params = this.config.params || {};
      additionalParams = additionalParams || {};
      params = $.extend({}, params, additionalParams);
      if (offset !== null && limit !== null) {
        params[this.config.offsetProperty] = offset;
        params[this.config.limitProperty] = limit;
      }
      $.ajax({url:this.config.url, type:this.config.method, data:params, cache:this.config.cache, async:this.config.async, success:this._onXhrRequestSuccess.bind(this, returnData)});
    }, _onXhrRequestSuccess:function(returnData, data, textStatus, jqXHR) {
      var readData = this._reader.read(data);
      readData.items = this.createItems(readData.items);
      this.fireEvent("data_loaded", readData, returnData);
    }});
    self = hm.core.data.proxy.XhrProxy;
  })();
  (function() {
    var self;
    HM.define("hm.core.data.reader.JsonReader", {extend:"hm.core.data.reader.AbstractReader", read:function(data) {
      var Obj = hm.core.Object;
      return{items:Obj.getProperty(this.config.dataProperty, data), total:Obj.getProperty(this.config.totalProperty, data), success:Obj.getProperty(this.config.successProperty, data), message:Obj.getProperty(this.config.messageProperty, data), source:data};
    }});
    self = hm.core.data.reader.JsonReader;
  })();
  (function() {
    var self;
    HM.define("hm.core.data.reader.SimpleJsonReader", {extend:"hm.core.data.reader.AbstractReader", read:function(data) {
      return{items:data, total:data.length, success:true, message:"ok", source:data};
    }});
    self = hm.core.data.reader.SimpleJsonReader;
  })();
  (function() {
    var self;
    HM.define("hm.core.env.Browser", {statics:{isIE:function(majorVersion) {
      return this.is("explorer", majorVersion);
    }, isChrome:function(majorVersion) {
      return this.is("chrome", majorVersion);
    }, isOpera:function(majorVersion) {
      return this.is("opera", majorVersion);
    }, isSafari:function(majorVersion) {
      return this.is("safari", majorVersion);
    }, isFirefox:function(majorVersion) {
      return this.is("firefox", majorVersion);
    }, isWebKit:function() {
      return this.isChrome() || (this.isSafari() || (this.isOpera() || this.is("webkit")));
    }, is:function(name, majorVersion) {
      var info = this.detect(), result = info.name === name;
      if (!result || majorVersion === undefined) {
        return result;
      }
      return info.version.major == majorVersion;
    }, detect:function() {
      var browser = this._searchString(this._dataBrowser) || "EU_UNKNOWN_BROWSER", ver = this._searchVersion(navigator.userAgent) || this._searchVersion(navigator.appVersion);
      if (!ver) {
        ver = HM.create("hm.core.env.Version", {version:[0, 0, 0]});
      }
      var result = {name:browser.toLowerCase(), appName:browser, version:ver};
      this.detect = function() {
        return result;
      };
      return result;
    }, _searchString:function(data) {
      for (var i = 0;i < data.length;i++) {
        var dataItem = data[i], dataString = dataItem.string, dataProp = dataItem.prop;
        this.versionSearchString = dataItem.versionSearch || dataItem.identity;
        if (dataString) {
          if (dataString.indexOf(dataItem.subString) != -1) {
            return dataItem.identity;
          }
        } else {
          if (dataProp) {
            return dataItem.identity;
          }
        }
      }
    }, _searchVersion:function(dataString) {
      var index = dataString.indexOf(this.versionSearchString);
      if (index == -1) {
        return HM.create("hm.core.env.Version", {version:[0, 0, 0]});
      }
      return HM.create("hm.core.env.Version", {version:dataString.substring(index + this.versionSearchString.length + 1).split(".")});
    }, _dataBrowser:[{string:navigator.vendor, subString:"Apple", identity:"Safari"}, {string:navigator.userAgent, subString:"Chrome", identity:"Chrome"}, {prop:window.opera, identity:"Opera"}, {string:navigator.vendor, subString:"Konqueror", identity:"Konqueror"}, {string:navigator.userAgent, subString:"Firefox", identity:"Firefox"}, {string:navigator.userAgent, subString:"SeaMonkey", identity:"SeaMonkey"}, {string:navigator.vendor, subString:"Camino", identity:"Camino"}, {string:navigator.userAgent, 
    subString:"Netscape", identity:"Netscape"}, {string:navigator.userAgent, subString:"MSIE", identity:"Explorer", versionSearch:"MSIE"}, {string:navigator.userAgent, subString:"Trident", identity:"Explorer", versionSearch:"rv"}, {string:navigator.userAgent, subString:"Gecko", identity:"Mozilla", versionSearch:"rv"}, {string:navigator.userAgent, subString:"AppleWebKit", identity:"Webkit", versionSearch:"AppleWebKit"}]}});
    self = hm.core.env.Browser;
  })();
  (function() {
    var self;
    HM.define("hm.core.env.MsXml", {statics:{_progIDs:[{ID:"Msxml2.DOMDocument.6.0", version:[6, 0, 0]}, {ID:"Msxml2.DOMDocument.3.0", version:[3, 0, 0]}, {ID:"Msxml2.DOMDocument.4.0", version:[4, 0, 0]}, {ID:"Msxml2.DOMDocument.5.0", version:[5, 0, 0]}], detect:function() {
      var progIDs = this._progIDs, version = [0, 0, 0];
      for (var i = 0;i < progIDs.length;++i) {
        var progID = progIDs[i];
        try {
          new ActiveXObject(progID.ID);
          version = progID.version;
          break;
        } catch (e) {
        }
      }
      var result = HM.create("hm.core.env.Version", {version:version});
      this.detect = function() {
        return result;
      };
      return result;
    }}});
    self = hm.core.env.MsXml;
  })();
  (function() {
    var self;
    HM.define("hm.core.env.OS", {statics:{_osPatterns:{"Windows 2000":/Windows NT 5\.0/, "Windows XP":/Windows NT 5\.1/, "Windows Server 2003":/Windows NT 5\.2/, "Windows Vista":/Windows NT 6\.0/, "Windows 7":/Windows NT 6\.1/, "Windows 8":/Windows NT 6\.2/, "Windows 8.1":/Windows NT 6\.3/, "Windows":/Windows/}, detect:function() {
      var userAgent = navigator.userAgent, result = "Unknown", patterns = this._osPatterns;
      for (var osName in patterns) {
        if (!patterns.hasOwnProperty(osName)) {
          continue;
        }
        var pattern = patterns[osName];
        if (pattern.test(userAgent)) {
          result = osName;
          break;
        }
      }
      this.detect = function() {
        return result;
      };
      return result;
    }}});
    self = hm.core.env.OS;
  })();
  (function() {
    var self;
    HM.define("hm.core.env.Version", {config:{version:null}, major:-1, minor:-1, rev:-1, __construct:function() {
      var versionArray = this.config.version;
      this.major = versionArray[0] != null ? parseInt(versionArray[0], 10) : 0;
      this.minor = versionArray[1] != null ? parseInt(versionArray[1], 10) : 0;
      this.rev = versionArray[2] != null ? parseInt(versionArray[2], 10) : 0;
    }, compare:function(flashVersion) {
      if (this.major < flashVersion.major) {
        return-1;
      }
      if (this.major > flashVersion.major) {
        return 1;
      }
      if (this.minor < flashVersion.minor) {
        return-1;
      }
      if (this.minor > flashVersion.minor) {
        return 1;
      }
      if (this.rev < flashVersion.rev) {
        return-1;
      }
      if (this.rev > flashVersion.rev) {
        return 1;
      }
      return 0;
    }, toString:function() {
      return[this.major, this.minor, this.rev].join(".");
    }});
    self = hm.core.env.Version;
  })();
  (function() {
    var self;
    HM.define("hm.core.jQuery", {singleton:true, __construct:function() {
      var jQueryFn = jQuery.fn, methods = ["andSelf", "die", "error", "live", "load", "size", "toggle", "unload"], comments = {andSelf:"Используйте .addBack().", live:'Используйте $(document).on("eventName", "selector", "handler").', error:'Используйте .on("error", handler).', load:'Используйте .on("load", handler)', 
      unload:'Используйте .on("unload", handler)'};
      this._initAddBack(jQueryFn);
      if (!HM.isDebug) {
        return;
      }
      this._initCurCSS();
      for (var i = 0, ln = methods.length;i < ln;i++) {
        var methodName = methods[i], method = jQueryFn[methodName];
        if (!method) {
          continue;
        }
        (function(methodName, method) {
          var message = "Метод jQuery." + methodName + "() устарел!";
          if (comments.hasOwnProperty(methodName)) {
            message += " " + comments[methodName];
          }
          jQueryFn[methodName] = function() {
            console.warn(message);
            return method.apply(this, arguments);
          };
        })(methodName, method);
      }
    }, _initAddBack:function(jQueryFn) {
      if (jQueryFn.hasOwnProperty("addBack")) {
        return;
      }
      jQueryFn.addBack = jQueryFn.andSelf;
    }, _initCurCSS:function() {
      jQuery.curCSS = function() {
        console.warn("Вызов устаревшего метода jQuery.curCSS(). Используйте jQuery.css()");
        return jQuery.css.apply(this, arguments);
      };
    }, _errorStack:function() {
      var e = new Error;
    }, uiVersionIsGreaterThan:function(major, minor) {
      var version = $.ui.version.split(".");
      return major == version[0] && version[1] >= minor || version[0] > major;
    }});
    self = hm.core.jQuery;
  })();
  (function() {
    var self;
    HM.define("hm.core.template.Template", {statics:{_templates:{}, _clear:function(tpl) {
      var tplLines = tpl.split("\n");
      for (var i = 0;i < tplLines.length;i++) {
        tplLines[i] = tplLines[i].trim();
      }
      return tplLines.join("");
    }, _compile:function(fileName) {
      var templates = this._templates, tpl = templates[fileName];
      if (typeof tpl === "string") {
        tpl = templates[fileName] = Handlebars.compile(tpl);
      }
      return tpl;
    }, register:function(fileName, tpl) {
      if (typeof tpl === "function") {
        tpl = Handlebars.template(tpl);
      }
      this._templates[fileName] = tpl;
    }, registered:function(fileName) {
      return this._templates.hasOwnProperty(fileName);
    }, get:function(fileName) {
      if (!this.registered(fileName)) {
        throw new Error('Шаблон "' + fileName + '" не найден');
      }
      return this._compile(fileName);
    }, render:function(tplCode, viewData) {
      var tpl = this.get(tplCode + ".hbs");
      return tpl(viewData, {data:{tpl:tplCode}});
    }, resolveTemplateName:function(parentTplPath, path) {
      var currentPlace = parentTplPath.split("/"), parentTplName = currentPlace.pop(), pathParts = path.split("/");
      for (var i = 0, ln = pathParts.length;i < ln;i++) {
        var pathPart = pathParts[i];
        switch(pathPart) {
          case ".":
            currentPlace.push(parentTplName);
            break;
          case "..":
            currentPlace.pop();
            break;
          default:
            currentPlace.push(pathPart);
        }
      }
      return currentPlace.join("/");
    }}});
    self = hm.core.template.Template;
  })();
  (function(Template) {
    var registerTemplate = Template.register.bind(Template);
    registerTemplate("hm/core/ui/autocomplete/Autocomplete.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, functionType = "function", escapeExpression = this.escapeExpression, self = this;
      function program1(depth0, data) {
        var buffer = "", stack1;
        buffer += escapeExpression((stack1 = data == null || data === false ? data : data.key, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '="' + escapeExpression(typeof depth0 === functionType ? depth0.apply(depth0) : depth0) + '"';
        return buffer;
      }
      buffer += '<div class="hm-autocomplete"><input type="text" placeholder="' + escapeExpression((stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.placeholder), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '" value="' + escapeExpression((stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.value), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '" ';
      stack1 = helpers.each.call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.inputAttr), {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += " /></div>";
      return buffer;
    });
    registerTemplate("hm/core/ui/autocomplete/search/Search.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, functionType = "function", escapeExpression = this.escapeExpression;
      buffer += '<div class="hm-autocomplete hm-autocomplete-search"><input type="text" placeholder="' + escapeExpression((stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.placeholder), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '" value="' + escapeExpression((stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.value), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + 
      '" /><div class="hm-autocomplete-button"></div></div>';
      return buffer;
    });
    registerTemplate("hm/core/ui/badges/SubjectBadges.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, functionType = "function", escapeExpression = this.escapeExpression, self = this, helperMissing = helpers.helperMissing;
      function program1(depth0, data) {
        var buffer = "", stack1, helper, options;
        buffer += '<div class="hm-subject-badges-icons">';
        stack1 = helpers.each.call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.data), {hash:{}, inverse:self.noop, fn:self.program(2, program2, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '<a class="hm-subject-badges-next" href="#next"></a></div><a class="hm-subject-badges-add" href="#add">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Добавить&nbsp;в Портфолио", options) : helperMissing.call(depth0, "_", "Добавить&nbsp;в Портфолио", 
        options))) + '</a><div class="hm-subject-badges-actions"></div>';
        return buffer;
      }
      function program2(depth0, data) {
        var buffer = "", stack1;
        buffer += '<img src="' + escapeExpression((stack1 = depth0 && depth0.icon, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '" alt="' + escapeExpression((stack1 = depth0 && depth0.name, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '" title="' + escapeExpression((stack1 = depth0 && depth0.name, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '" />';
        return buffer;
      }
      function program4(depth0, data) {
        return'<div class="hm-subject-badges-empty"></div>';
      }
      buffer += '<div class="hm-subject-badges">';
      stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.data), {hash:{}, inverse:self.program(4, program4, data), fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += "</div>";
      return buffer;
    });
    registerTemplate("hm/core/ui/badges/rating/Infoblock.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression;
      buffer += '<div class="hm-badges-rating"><div class="hm-badges-rating-users-container"></div><div class="hm-badges-rating-load hm-badges-rating-user">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Загрузить еще", options) : helperMissing.call(depth0, "_", "Загрузить еще", options))) + "</div></div>";
      return buffer;
    });
    registerTemplate("hm/core/ui/badges/rating/InfoblockItem.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, functionType = "function", escapeExpression = this.escapeExpression, self = this;
      function program1(depth0, data) {
        var buffer = "", stack1;
        buffer += '<td><div class="hm-badges-rating-user-badge" title="' + escapeExpression((stack1 = depth0 && depth0.subject_name, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '" data-badge-id="' + escapeExpression((stack1 = depth0 && depth0.badge_id, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '"><img src="' + escapeExpression((stack1 = depth0 && depth0.icon, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '" alt="' + escapeExpression((stack1 = 
        depth0 && depth0.name, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '" /><span>' + escapeExpression((stack1 = depth0 && depth0.name, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</span></div></td>";
        return buffer;
      }
      buffer += '<div class="hm-badges-rating-user"><div class="hm-badges-rating-user-photo"><img src="' + escapeExpression((stack1 = (stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.data), stack1 == null || stack1 === false ? stack1 : stack1.photo), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '" /><div class="hm-badges-rating-user-rate">' + escapeExpression((stack1 = (stack1 = (stack1 = depth0 && depth0.config, stack1 == null || 
      stack1 === false ? stack1 : stack1.data), stack1 == null || stack1 === false ? stack1 : stack1.badges_count), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '</div></div><div class="hm-badges-rating-user-name"><a href="' + escapeExpression((stack1 = (stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.data), stack1 == null || stack1 === false ? stack1 : stack1.url), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + 
      '">' + escapeExpression((stack1 = (stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.data), stack1 == null || stack1 === false ? stack1 : stack1.name), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '</a></div><div class="hm-badges-rating-user-badges"><table><tr>';
      stack1 = helpers.each.call(depth0, (stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.data), stack1 == null || stack1 === false ? stack1 : stack1.badges), {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '</tr></table><div class="hm-badges-rating-scroll-right"></div><div class="hm-badges-rating-scroll-left"></div></div></div>';
      return buffer;
    });
    registerTemplate("hm/core/ui/calendar/DateRangeSwitcher.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = "function", self = this;
      function program1(depth0, data) {
        var buffer = "", stack1, helper, options;
        buffer += '<span class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "from", options) : helperMissing.call(depth0, "ns", "from", options))) + '">' + escapeExpression((helper = helpers.getFrom || depth0 && depth0.getFrom, options = {hash:{}, data:data}, helper ? helper.call(depth0, (stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.from), stack1 == null || stack1 === 
        false ? stack1 : stack1.mask), options) : helperMissing.call(depth0, "getFrom", (stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.from), stack1 == null || stack1 === false ? stack1 : stack1.mask), options))) + "</span>";
        return buffer;
      }
      function program3(depth0, data) {
        var buffer = "", stack1, helper, options;
        buffer += ' - <span class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "to", options) : helperMissing.call(depth0, "ns", "to", options))) + '">' + escapeExpression((helper = helpers.getTo || depth0 && depth0.getTo, options = {hash:{}, data:data}, helper ? helper.call(depth0, (stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.to), stack1 == null || stack1 === false ? 
        stack1 : stack1.mask), options) : helperMissing.call(depth0, "getTo", (stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.to), stack1 == null || stack1 === false ? stack1 : stack1.mask), options))) + "</span>";
        return buffer;
      }
      buffer += '<div class="';
      if (helper = helpers.ns) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.ns;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "switch", options) : helperMissing.call(depth0, "ns", "switch", options))) + '"><a class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "prev", options) : helperMissing.call(depth0, "ns", "prev", options))) + '" href="#prev"></a><a class="' + 
      escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "next", options) : helperMissing.call(depth0, "ns", "next", options))) + '" href="#next"></a></div><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "info", options) : helperMissing.call(depth0, "ns", "info", options))) + '"><div class="' + escapeExpression((helper = helpers.ns || depth0 && 
      depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "name", options) : helperMissing.call(depth0, "ns", "name", options))) + '">';
      if (helper = helpers.getRangeName) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getRangeName;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '</div><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "range", options) : helperMissing.call(depth0, "ns", "range", options))) + '">';
      stack1 = helpers["if"].call(depth0, (stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.from), stack1 == null || stack1 === false ? stack1 : stack1.visible), {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      stack1 = helpers["if"].call(depth0, (stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.to), stack1 == null || stack1 === false ? stack1 : stack1.visible), {hash:{}, inverse:self.noop, fn:self.program(3, program3, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += "</div></div></div>";
      return buffer;
    });
    registerTemplate("hm/core/ui/container/layout/TabLayout.button.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, functionType = "function", escapeExpression = this.escapeExpression;
      buffer += '<div class="hm-layout-tab-button">';
      if (helper = helpers.title) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.title;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '<span class="hm-layout-tab-button-close"></span></div>';
      return buffer;
    });
    registerTemplate("hm/core/ui/container/layout/TabLayout.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      return'<div class="hm-layout-tab"><div class="hm-layout-tab-header"></div><div class="hm-layout-tab-container"></div></div>';
    });
    registerTemplate("hm/core/ui/contextmenu/ContextMenu.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      return'<ul class="hm-context-menu"></ul>';
    });
    registerTemplate("hm/core/ui/contextmenu/ContextMenuItem.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, functionType = "function", escapeExpression = this.escapeExpression;
      buffer += "<li>";
      if (helper = helpers.getTitle) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getTitle;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + "</li>";
      return buffer;
    });
    registerTemplate("hm/core/ui/form/element/AbstractElement.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, functionType = "function", escapeExpression = this.escapeExpression;
      buffer += '<div class="hm-form-element"><div class="hm-form-element-label">';
      if (helper = helpers.getLabel) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getLabel;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '</div><div class="hm-form-element-container"></div><div class="hm-clear"></div></div>';
      return buffer;
    });
    registerTemplate("hm/core/ui/form/element/select/AbstractSelect.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, self = this, functionType = "function", escapeExpression = this.escapeExpression;
      function program1(depth0, data) {
        return "hm-form-select-button_inline";
      }
      buffer += '<div class="hm-form-select-button ';
      stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.inline), {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '"><div class="hm-form-select-button-trigger">▼</div><div class="hm-form-select-button-title">' + escapeExpression((stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.title), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</div></div>";
      return buffer;
    });
    registerTemplate("hm/core/ui/form/element/select/list/AbstractSelectList.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, self = this;
      function program1(depth0, data) {
        return'<div class="hm-form-select-list-filter-wrapper"><div class="hm-form-select-list-filter"><div><input type="text"></div></div></div>';
      }
      buffer += '<div class="hm-pm-list hm-form-select-list hm-form-select-list-withFilter">';
      stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.showFilter), {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '<div class="hm-form-select-list-container-wrapper"><div class="hm-form-select-list-container"></div></div></div>';
      return buffer;
    });
    registerTemplate("hm/core/ui/form/element/select/list/item/DateSelectItem.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, functionType = "function", escapeExpression = this.escapeExpression;
      buffer += '<div class="hm-form-select-list-item hm-pm-list-dateSelect-item"><span class="hm-form-select-list-dateSelect-item-input" data-name="' + escapeExpression((stack1 = (stack1 = (stack1 = depth0 && depth0.inputs, stack1 == null || stack1 === false ? stack1 : stack1.from), stack1 == null || stack1 === false ? stack1 : stack1.name), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '"><span class="hm-form-select-list-dateSelect-item-input-caption">' + escapeExpression((stack1 = 
      (stack1 = (stack1 = depth0 && depth0.inputs, stack1 == null || stack1 === false ? stack1 : stack1.from), stack1 == null || stack1 === false ? stack1 : stack1.caption), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '</span><input type="text" name="' + escapeExpression((stack1 = (stack1 = (stack1 = depth0 && depth0.inputs, stack1 == null || stack1 === false ? stack1 : stack1.from), stack1 == null || stack1 === false ? stack1 : stack1.name), typeof stack1 === functionType ? 
      stack1.apply(depth0) : stack1)) + '" readonly="readonly"><image src="/images/application/calendar/calendar.gif"></span><span class="hm-form-select-list-dateSelect-item-dash">—</span><span class="hm-form-select-list-dateSelect-item-input" data-name="' + escapeExpression((stack1 = (stack1 = (stack1 = depth0 && depth0.inputs, stack1 == null || stack1 === false ? stack1 : stack1.to), stack1 == null || stack1 === false ? stack1 : stack1.name), typeof stack1 === functionType ? stack1.apply(depth0) : 
      stack1)) + '"><span class="hm-form-select-list-dateSelect-item-input-caption">' + escapeExpression((stack1 = (stack1 = (stack1 = depth0 && depth0.inputs, stack1 == null || stack1 === false ? stack1 : stack1.to), stack1 == null || stack1 === false ? stack1 : stack1.caption), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '</span><input type="text" name="' + escapeExpression((stack1 = (stack1 = (stack1 = depth0 && depth0.inputs, stack1 == null || stack1 === false ? stack1 : 
      stack1.to), stack1 == null || stack1 === false ? stack1 : stack1.name), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '" readonly="readonly"><image src="/images/application/calendar/calendar.gif"></span></div>';
      return buffer;
    });
    registerTemplate("hm/core/ui/form/element/select/list/item/MultiSelectItem.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, self = this, functionType = "function", escapeExpression = this.escapeExpression;
      function program1(depth0, data) {
        return "hm-form-select-list-item-withCheckbox-checked";
      }
      buffer += '<div class="hm-form-select-list-item hm-form-select-list-item-withCheckbox ';
      stack1 = helpers["if"].call(depth0, depth0 && depth0.checked, {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '" data-id="';
      if (helper = helpers.recordId) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.recordId;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"><span class="hm-form-select-list-item-checkbox"></span><a href="#">';
      if (helper = helpers.title) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.title;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + "</a></div>";
      return buffer;
    });
    registerTemplate("hm/core/ui/form/element/select/list/item/SimpleSelectItem.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, functionType = "function", escapeExpression = this.escapeExpression, self = this;
      function program1(depth0, data) {
        var stack1, helper;
        if (helper = helpers.title) {
          stack1 = helper.call(depth0, {hash:{}, data:data});
        } else {
          helper = depth0 && depth0.title;
          stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
        }
        return escapeExpression(stack1);
      }
      function program3(depth0, data) {
        var stack1, helper;
        if (helper = helpers.title) {
          stack1 = helper.call(depth0, {hash:{}, data:data});
        } else {
          helper = depth0 && depth0.title;
          stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
        }
        if (stack1 || stack1 === 0) {
          return stack1;
        } else {
          return "";
        }
      }
      buffer += '<div class="hm-form-select-list-item" data-id="';
      if (helper = helpers.recordId) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.recordId;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"><a href="#">';
      stack1 = helpers["if"].call(depth0, depth0 && depth0.needEscape, {hash:{}, inverse:self.program(3, program3, data), fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += "</a></div>";
      return buffer;
    });
    registerTemplate("hm/core/ui/form/helper/imageMap/ImageMapAnswer.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var stack1, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = "function", self = this;
      function program1(depth0, data) {
        var buffer = "", stack1, helper, options;
        buffer += '<tr class="';
        if (helper = helpers.ns) {
          stack1 = helper.call(depth0, {hash:{}, data:data});
        } else {
          helper = depth0 && depth0.ns;
          stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
        }
        buffer += escapeExpression(stack1) + '"><td class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "isRight", options) : helperMissing.call(depth0, "ns", "isRight", options))) + '">';
        stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.editMode), {hash:{}, inverse:self.noop, fn:self.program(2, program2, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '<input type="checkbox"></td><td class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "caption", options) : helperMissing.call(depth0, "ns", "caption", options))) + '"><input type="text">';
        stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.editMode), {hash:{}, inverse:self.noop, fn:self.program(4, program4, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += "</td>";
        stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.editMode), {hash:{}, inverse:self.noop, fn:self.program(6, program6, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += "</tr>";
        return buffer;
      }
      function program2(depth0, data) {
        return'<input type="hidden" name="is_correct" value="0">';
      }
      function program4(depth0, data) {
        return'<input type="hidden">';
      }
      function program6(depth0, data) {
        var buffer = "", helper, options;
        buffer += '<td class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "actions", options) : helperMissing.call(depth0, "ns", "actions", options))) + '"><a href="#" class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "action", options) : helperMissing.call(depth0, "ns", "action", options))) + " " + escapeExpression((helper = helpers.ns || 
        depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "action_delete", options) : helperMissing.call(depth0, "ns", "action_delete", options))) + '"><img src="/images/icons/delete.gif"></a></td>';
        return buffer;
      }
      function program8(depth0, data) {
        var buffer = "", helper, options;
        buffer += '<div><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "isRight", options) : helperMissing.call(depth0, "ns", "isRight", options))) + '" style="height: 0; visibility: hidden;"><input type="checkbox"></div></div>';
        return buffer;
      }
      stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.visible), {hash:{}, inverse:self.program(8, program8, data), fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        return stack1;
      } else {
        return "";
      }
    });
    registerTemplate("hm/core/ui/form/helper/imageMap/ImageMapEditor.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing, self = this;
      function program1(depth0, data) {
        var buffer = "", stack1, helper;
        if (helper = helpers.ns) {
          stack1 = helper.call(depth0, {hash:{}, data:data});
        } else {
          helper = depth0 && depth0.ns;
          stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
        }
        buffer += escapeExpression(stack1) + "_readOnly";
        return buffer;
      }
      function program3(depth0, data) {
        var buffer = "", stack1, helper, options;
        buffer += '<table class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "answerList", options) : helperMissing.call(depth0, "ns", "answerList", options))) + '"><col style="';
        stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.editMode), {hash:{}, inverse:self.program(6, program6, data), fn:self.program(4, program4, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '"><col style="width: auto;">';
        stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.editMode), {hash:{}, inverse:self.noop, fn:self.program(8, program8, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.editMode), {hash:{}, inverse:self.noop, fn:self.program(10, program10, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '<tbody class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "answerList-body", options) : helperMissing.call(depth0, "ns", "answerList-body", options))) + '"></tbody></table>';
        return buffer;
      }
      function program4(depth0, data) {
        return "width: 100px;";
      }
      function program6(depth0, data) {
        return "width: 65px;";
      }
      function program8(depth0, data) {
        return'<col style="width: 100px;">';
      }
      function program10(depth0, data) {
        var buffer = "", stack1, helper, options;
        buffer += '<thead><tr class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "answer", options) : helperMissing.call(depth0, "ns", "answer", options))) + '"><th class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "isTrue", options) : helperMissing.call(depth0, "ns", "isTrue", options))) + '">' + escapeExpression((helper = helpers._ || 
        depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Правильный вариант", options) : helperMissing.call(depth0, "_", "Правильный вариант", options))) + '</th><th class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, 
        "caption", options) : helperMissing.call(depth0, "ns", "caption", options))) + '">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Вариант ответа", options) : helperMissing.call(depth0, "_", "Вариант ответа", options))) + "</th>";
        stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.editMode), {hash:{}, inverse:self.noop, fn:self.program(11, program11, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += "</tr></thead>";
        return buffer;
      }
      function program11(depth0, data) {
        return "<th></th>";
      }
      function program13(depth0, data) {
        var buffer = "", helper, options;
        buffer += '<div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "answerList-body", options) : helperMissing.call(depth0, "ns", "answerList-body", options))) + '"></div>';
        return buffer;
      }
      buffer += '<div class="';
      if (helper = helpers.ns) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.ns;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + " ";
      stack1 = helpers.unless.call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.editMode), {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '"><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "content", options) : helperMissing.call(depth0, "ns", "content", options))) + '" style="display: none"><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "image", options) : helperMissing.call(depth0, "ns", "image", options))) + '"></div>';
      stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.showVariants), {hash:{}, inverse:self.program(13, program13, data), fn:self.program(3, program3, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '</div><input type="file" name="image_map_input"></div>';
      return buffer;
    });
    registerTemplate("hm/core/ui/graph/amcharts/Chart.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing;
      buffer += '<div id="';
      if (helper = helpers.chartContainerId) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.chartContainerId;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"><p>' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Загрузка Flash Player...", options) : helperMissing.call(depth0, "_", "Загрузка Flash Player...", options))) + "</p></div>";
      return buffer;
    });
    registerTemplate("hm/core/ui/imageMapEditor/ImageMapEditor.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, self = this, helperMissing = helpers.helperMissing;
      function program1(depth0, data) {
        var buffer = "", stack1, helper;
        if (helper = helpers.ns) {
          stack1 = helper.call(depth0, {hash:{}, data:data});
        } else {
          helper = depth0 && depth0.ns;
          stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
        }
        buffer += escapeExpression(stack1) + "_readOnly";
        return buffer;
      }
      buffer += '<div class="';
      if (helper = helpers.ns) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.ns;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + " ";
      stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.readOnly), {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '"><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "toolbar", options) : helperMissing.call(depth0, "ns", "toolbar", options))) + '"><button class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "button-create", options) : helperMissing.call(depth0, "ns", "button-create", options))) + '" data-type="circle">' + escapeExpression((helper = 
      helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Круг", options) : helperMissing.call(depth0, "_", "Круг", options))) + '</button><button class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "button-create", options) : helperMissing.call(depth0, "ns", "button-create", options))) + '" data-type="ellipse">' + escapeExpression((helper = 
      helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Эллипс", options) : helperMissing.call(depth0, "_", "Эллипс", options))) + '</button><button class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "button-create", options) : helperMissing.call(depth0, "ns", "button-create", options))) + '" data-type="square">' + 
      escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Квадрат", options) : helperMissing.call(depth0, "_", "Квадрат", options))) + '</button><button class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "button-create", options) : helperMissing.call(depth0, "ns", "button-create", 
      options))) + '" data-type="rect">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Прямоугольник", options) : helperMissing.call(depth0, "_", "Прямоугольник", options))) + '</button><button class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, 
      helper ? helper.call(depth0, "button-create", options) : helperMissing.call(depth0, "ns", "button-create", options))) + '" data-type="polygon">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Многоугольник", options) : helperMissing.call(depth0, "_", "Многоугольник", options))) + '</button></div><div class="' + 
      escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "help", options) : helperMissing.call(depth0, "ns", "help", options))) + '"></div><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "imageContainer", options) : helperMissing.call(depth0, "ns", "imageContainer", options))) + '"><image src=""></image></div></div>';
      return buffer;
    });
    registerTemplate("hm/core/ui/progressbar/Progressbar.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      return'<div class="hm-progressbar-wrap"><div class="ui-progressbar"><div class="gradient-me"></div></div></div>';
    });
    registerTemplate("hm/core/ui/search/SphinxSearch.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression;
      buffer += '<div class="hm-sphinx-search"><input name="all" value="" /><input type="submit" value="' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Найти", options) : helperMissing.call(depth0, "_", "Найти", options))) + '" /><div class="hm-search-result"></div></div>';
      return buffer;
    });
    registerTemplate("hm/core/ui/select/Option.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, functionType = "function", escapeExpression = this.escapeExpression;
      buffer += '<li class="hm-select-option" title="' + escapeExpression((stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.text), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '"><span>' + escapeExpression((stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.text), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</span></li>";
      return buffer;
    });
    registerTemplate("hm/core/ui/select/OptionsContainer.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      return'<div class="hm-select-options"><div class="hm-select-options-wrap"><ul></ul></div></div>';
    });
    registerTemplate("hm/core/ui/select/Select.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      return'<div class="hm-select"><div class="hm-select-selected"><span></span></div></div>';
    });
    registerTemplate("hm/core/ui/select/SelectNative.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, functionType = "function", escapeExpression = this.escapeExpression, self = this;
      function program1(depth0, data) {
        var buffer = "", stack1, helper;
        buffer += '<option value="' + escapeExpression((stack1 = data == null || data === false ? data : data.key, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '" ';
        stack1 = helpers["if"].call(depth0, depth0 && depth0.selected, {hash:{}, inverse:self.noop, fn:self.program(2, program2, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += ">";
        if (helper = helpers.text) {
          stack1 = helper.call(depth0, {hash:{}, data:data});
        } else {
          helper = depth0 && depth0.text;
          stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
        }
        buffer += escapeExpression(stack1) + "</option>";
        return buffer;
      }
      function program2(depth0, data) {
        return'selected="selected"';
      }
      buffer += '<select name="';
      if (helper = helpers.name) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.name;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '">';
      stack1 = helpers.each.call(depth0, depth0 && depth0.options, {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += "</select>";
      return buffer;
    });
    registerTemplate("hm/core/ui/select/custom/HeadSwitcher.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      return'<div class="hm-select hm-select-headSwitcher"></div>';
    });
    registerTemplate("hm/core/ui/storeList/List.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing;
      buffer += '<div class="';
      if (helper = helpers.ns) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.ns;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "items-container", options) : helperMissing.call(depth0, "ns", "items-container", options))) + '"></div></div>';
      return buffer;
    });
    registerTemplate("hm/core/ui/storeList/ListItem.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, functionType = "function", escapeExpression = this.escapeExpression;
      buffer += '<div class="';
      if (helper = helpers.ns) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.ns;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"></div>';
      return buffer;
    });
    registerTemplate("hm/core/ui/tooltip/Tooltip.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      return'<div class="hm-tooltip"><div class="hm-tooltip-shadow"><div class="hm-tooltip-shadow-arrow"></div></div><div class="hm-tooltip-content"></div><div class="hm-tooltip-arrow"></div></div>';
    });
    registerTemplate("hm/core/ui/tree/DragManager.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      return'<li class="hm-tree-draggable-helper"></li>';
    });
    registerTemplate("hm/core/ui/tree/Tree.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      return'<div class="hm-tree"></div>';
    });
    registerTemplate("hm/core/ui/tree/node/Node.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, functionType = "function", escapeExpression = this.escapeExpression;
      buffer += '<li class="hm-tree-node"><span class="hm-tree-node-item"><span class="hm-tree-node-connector"></span><span class="hm-tree-node-icon ';
      if (helper = helpers.getIconClass) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getIconClass;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"></span><span class="hm-tree-node-title">';
      if (helper = helpers.getTitle) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getTitle;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '</span></span><ul class="hm-tree-node-children"></ul></li>';
      return buffer;
    });
    registerTemplate("hm/core/ui/tree/node/Root.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      return'<ul class="hm-tree-root hm-tree-node-children"></ul>';
    });
    registerTemplate("hm/core/ui/window/card/Card.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression;
      buffer += '<div class="hm-dialog-card">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Загрузка", options) : helperMissing.call(depth0, "_", "Загрузка", options))) + "...</div>";
      return buffer;
    });
    registerTemplate("hm/core/ui/window/dialog/Dialog.loading.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression;
      buffer += '<div class="hm-dialog-loading">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Подождите, идет загрузка", options) : helperMissing.call(depth0, "_", "Подождите, идет загрузка", options))) + "...</div>";
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/EventList.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, self = this;
      function program1(depth0, data) {
        var buffer = "", stack1, helper, options;
        buffer += '<div class="hm-es-event-list-header">';
        stack1 = helpers.unless.call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.fullMode), {hash:{}, inverse:self.noop, fn:self.program(2, program2, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '<h2 class="hm-es-event-list-title">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Сообщения", options) : helperMissing.call(depth0, "_", "Сообщения", options))) + "</h2></div>";
        return buffer;
      }
      function program2(depth0, data) {
        var buffer = "", helper, options;
        buffer += '<a href="#" class="hm-es-event-list-url">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Просмотреть всё", options) : helperMissing.call(depth0, "_", "Просмотреть всё", options))) + "</a>";
        return buffer;
      }
      buffer += '<div class="hm-es-event-list">';
      stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.showHeader), {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '<div class="hm-es-event-list-body"></div><div class="hm-es-event-list-body-empty">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Список активностей пуст", options) : helperMissing.call(depth0, "_", "Список активностей пуст", 
      options))) + "</div></div>";
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/group/DefaultEventGroup.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, self = this, blockHelperMissing = helpers.blockHelperMissing;
      function program1(depth0, data) {
        return'\x3c!--span class="hm-es-event-list-group-icon-more"></span--\x3e';
      }
      buffer += '<div class="hm-es-event-list-group"><h3><span class="hm-es-event-list-group-type">';
      if (helper = helpers.getTypeTitle) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getTypeTitle;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '</span><span class="hm-es-event-list-group-title">' + escapeExpression((stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.groupTitle), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</span>";
      options = {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data};
      if (helper = helpers.needShowMoreIcon) {
        stack1 = helper.call(depth0, options);
      } else {
        helper = depth0 && depth0.needShowMoreIcon;
        stack1 = typeof helper === functionType ? helper.call(depth0, options) : helper;
      }
      if (!helpers.needShowMoreIcon) {
        stack1 = blockHelperMissing.call(depth0, stack1, {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      }
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '<span class="hm-es-event-list-group-name">';
      if (helper = helpers.getGroupName) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getGroupName;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '</span><div class="hm-clear"></div></h3><div class="hm-es-event-list-group-events"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/group/message/MessageEventGroup.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing;
      buffer += '<div class="hm-es-event-list-group hm-es-event-list-group-messages hm-es-event-list-group-with-avatar"><h3><div class="hm-es-event-list-group-avatar-wrapper"><div class="hm-es-event-list-group-avatar"></div></div><a class="hm-es-event-list-group-name" target="_blank" href="';
      if (helper = helpers.getAuthorUrl) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getAuthorUrl;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '">';
      if (helper = helpers.getAuthorName) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getAuthorName;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '</a><span class="hm-es-event-list-group-action"> ' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Вам написал(а)", options) : helperMissing.call(depth0, "_", "Вам написал(а)", options))) + '</span><div class="hm-clear"></div></h3><div class="hm-es-event-list-group-events"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/group/notification/DefaultNotificationEventGroup.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = "function";
      buffer += '<div class="hm-es-event-list-group"><h3><span class="hm-es-event-list-group-title">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Курс", options) : helperMissing.call(depth0, "_", "Курс", options))) + '</span><span class="hm-es-event-list-group-icon-more"></span><span class="hm-es-event-list-group-name">';
      if (helper = helpers.getCourseName) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getCourseName;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '</span><div class="hm-clear"></div></h3><div class="hm-es-event-list-group-events"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/item/EventAbstract.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing;
      buffer += '<div class="hm-es-event-list-item hm-es-event-list-item-forum" title="' + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.title), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '"><div class="hm-es-event-list-item-avatar-wrapper"><div class="hm-es-event-list-item-avatar"></div></div><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + escapeExpression((helper = 
      helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "dd mmm", options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, "datetime", depth0 && 
      depth0.creationDate, "HH:MM", options))) + '</div><span class="hm-es-event-list-item-author">' + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.user_name), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</span> " + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "написал", options) : helperMissing.call(depth0, 
      "_", "написал", options))) + '<div class="hm-es-event-list-item-desc" title="' + escapeExpression((helper = helpers.cropText || depth0 && depth0.cropText, options = {hash:{}, data:data}, helper ? helper.call(depth0, (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.text), options) : helperMissing.call(depth0, "cropText", (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.text), 
      options))) + '">' + escapeExpression((helper = helpers.cropText || depth0 && depth0.cropText, options = {hash:{}, data:data}, helper ? helper.call(depth0, (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.text), 100, options) : helperMissing.call(depth0, "cropText", (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.text), 100, options))) + '</div><div class="hm-clear"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/item/blog/BlogAddMessage.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = "function";
      buffer += '<div class="hm-es-event-list-item"><div class="hm-es-event-list-item-avatar-wrapper"><div class="hm-es-event-list-item-avatar"></div></div><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, 
      "dd mmm", options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "HH:MM", options))) + '</div><div><span class="hm-es-event-list-item-author">' + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.user_name), 
      typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</span> " + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "добавил(а) запись", options) : helperMissing.call(depth0, "_", "добавил(а) запись", options))) + ' "' + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, 
      stack1 == null || stack1 === false ? stack1 : stack1.title), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '"</div><div class="hm-es-event-list-item-desc">' + escapeExpression((helper = helpers.cropText || depth0 && depth0.cropText, options = {hash:{}, data:data}, helper ? helper.call(depth0, (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.body), 100, options) : helperMissing.call(depth0, "cropText", (stack1 = depth0 && depth0.description, 
      stack1 == null || stack1 === false ? stack1 : stack1.body), 100, options))) + "</div></div>";
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/item/course/CourseAddMaterial.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = "function", self = this;
      function program1(depth0, data) {
        var buffer = "", helper, options;
        buffer += '<div class="hm-es-event-list-item-portfolio-add"><a href="#add">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Добавить в портфолио", options) : helperMissing.call(depth0, "_", "Добавить в портфолио", options))) + "</a></div>";
        return buffer;
      }
      buffer += '<div class="hm-es-event-list-item hm-es-event-list-item-forum" title="';
      if (helper = helpers.getTitle) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getTitle;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"><div class="hm-es-event-list-item-avatar-wrapper"><div class="hm-es-event-list-item-avatar"></div></div><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "dd mmm", 
      options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "HH:MM", options))) + "</div>";
      stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.showPortfolioAction), {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '<span class="hm-es-event-list-item-author">';
      if (helper = helpers.getAuthor) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getAuthor;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + "</span> " + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "добавил(а) новый материал", options) : helperMissing.call(depth0, "_", "добавил(а) новый материал", options))) + 
      " <q>" + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.title), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '</q><div class="hm-clear"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/item/course/CourseAttachLesson.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = "function", self = this;
      function program1(depth0, data) {
        var buffer = "", helper, options;
        buffer += '<div class="hm-es-event-list-item-portfolio-add"><a href="#add">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Добавить в портфолио", options) : helperMissing.call(depth0, "_", "Добавить в портфолио", options))) + "</a></div>";
        return buffer;
      }
      buffer += '<div class="hm-es-event-list-item hm-es-event-list-item-forum" title="';
      if (helper = helpers.getTitle) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getTitle;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "dd mmm", options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = 
      {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "HH:MM", options))) + "</div>";
      stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.showPortfolioAction), {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Вам назначено новое занятие", options) : helperMissing.call(depth0, "_", "Вам назначено новое занятие", options))) + " <q>" + 
      escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.title), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '</q><div class="hm-clear"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/item/course/CourseScoreTriggered.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = "function", self = this;
      function program1(depth0, data) {
        var buffer = "", helper, options;
        buffer += '<div class="hm-es-event-list-item-portfolio-add"><a href="#add">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Добавить в портфолио", options) : helperMissing.call(depth0, "_", "Добавить в портфолио", options))) + "</a></div>";
        return buffer;
      }
      buffer += '<div class="hm-es-event-list-item hm-es-event-list-item-forum" title="' + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.title), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '"><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, 
      depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "dd mmm", options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "HH:MM", options))) + "</div>";
      stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.showPortfolioAction), {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Вам выставлена итоговая оценка", options) : helperMissing.call(depth0, "_", "Вам выставлена итоговая оценка", 
      options))) + " &laquo;" + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.mark), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "&raquo; " + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "за курс", options) : helperMissing.call(depth0, "_", "за курс", options))) + " &laquo;" + 
      escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.course_name), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '&raquo;<div class="hm-clear"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/item/course/CourseTaskAction.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, self = this, functionType = "function";
      function program1(depth0, data) {
        var buffer = "", helper, options;
        buffer += '<div class="hm-es-event-list-item-portfolio-add"><a href="#add">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Добавить в портфолио", options) : helperMissing.call(depth0, "_", "Добавить в портфолио", options))) + "</a></div>";
        return buffer;
      }
      buffer += '<div class="hm-es-event-list-item hm-es-event-list-item-forum"><div class="hm-es-event-list-item-avatar-wrapper"><div class="hm-es-event-list-item-avatar"></div></div><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 && 
      depth0.creationDate, "dd mmm", options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "HH:MM", options))) + "</div>";
      stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.showPortfolioAction), {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '<span class="hm-es-event-list-item-author">' + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.user_name), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</span> " + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "выполнил(-а) новое действие в задании", 
      options) : helperMissing.call(depth0, "_", "выполнил(-а) новое действие в задании", options))) + " <q>" + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.lesson_name), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '</q><div class="hm-es-event-list-item-desc">';
      stack1 = (stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.message), typeof stack1 === functionType ? stack1.apply(depth0) : stack1);
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '</div><div class="hm-clear"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/item/course/courseTaskTeacherAnswered.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, self = this, functionType = "function";
      function program1(depth0, data) {
        var buffer = "", helper, options;
        buffer += '<div class="hm-es-event-list-item-portfolio-add"><a href="#add">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Добавить в портфолио", options) : helperMissing.call(depth0, "_", "Добавить в портфолио", options))) + "</a></div>";
        return buffer;
      }
      buffer += '<div class="hm-es-event-list-item hm-es-event-list-item-forum"><div class="hm-es-event-list-item-avatar-wrapper"><div class="hm-es-event-list-item-avatar"></div></div><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 &&
      depth0.creationDate, "dd mmm", options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "HH:MM", options))) + "</div>";
      stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.showPortfolioAction), {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '<span class="hm-es-event-list-item-author">' + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.user_name), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</span> " + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "ответил(-а) в задании",
      options) : helperMissing.call(depth0, "_", "ответил(-а) в задании", options))) + " <q>" + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.lesson_name), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '</q><div class="hm-es-event-list-item-desc">';
      stack1 = (stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.message), typeof stack1 === functionType ? stack1.apply(depth0) : stack1);
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '</div><div class="hm-clear"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/item/course/courseTaskTeacherReworkRequired.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, self = this, functionType = "function";
      function program1(depth0, data) {
        var buffer = "", helper, options;
        buffer += '<div class="hm-es-event-list-item-portfolio-add"><a href="#add">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Добавить в портфолио", options) : helperMissing.call(depth0, "_", "Добавить в портфолио", options))) + "</a></div>";
        return buffer;
      }
      buffer += '<div class="hm-es-event-list-item hm-es-event-list-item-forum"><div class="hm-es-event-list-item-avatar-wrapper"><div class="hm-es-event-list-item-avatar"></div></div><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 &&
      depth0.creationDate, "dd mmm", options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "HH:MM", options))) + "</div>";
      stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.showPortfolioAction), {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '<span class="hm-es-event-list-item-author">' + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.user_name), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</span> " + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "запросил(-а) доработку в задании",
      options) : helperMissing.call(depth0, "_", "запросил(-а) доработку в задании", options))) + " <q>" + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.lesson_name), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '</q><div class="hm-es-event-list-item-desc">';
      stack1 = (stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.message), typeof stack1 === functionType ? stack1.apply(depth0) : stack1);
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '</div><div class="hm-clear"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/item/course/CourseTaskComplete.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, self = this, functionType = "function";
      function program1(depth0, data) {
        var buffer = "", helper, options;
        buffer += '<div class="hm-es-event-list-item-portfolio-add"><a href="#add">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Добавить в портфолио", options) : helperMissing.call(depth0, "_", "Добавить в портфолио", options))) + "</a></div>";
        return buffer;
      }
      buffer += '<div class="hm-es-event-list-item hm-es-event-list-item-forum"><div class="hm-es-event-list-item-avatar-wrapper"><div class="hm-es-event-list-item-avatar"></div></div><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 && 
      depth0.creationDate, "dd mmm", options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "HH:MM", options))) + "</div>";
      stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.showPortfolioAction), {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '<span class="hm-es-event-list-item-author">' + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.user_name), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</span> " + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "выполнил(а) задание", options) : 
      helperMissing.call(depth0, "_", "выполнил(а) задание", options))) + " <q>" + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.lesson_name), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '</q><div class="hm-es-event-list-item-desc">';
      stack1 = (stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.message), typeof stack1 === functionType ? stack1.apply(depth0) : stack1);
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '</div><div class="hm-clear"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/item/course/CourseTaskScoreTriggered.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = "function", self = this;
      function program1(depth0, data) {
        var buffer = "", helper, options;
        buffer += '<div class="hm-es-event-list-item-portfolio-add"><a href="#add">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Добавить в портфолио", options) : helperMissing.call(depth0, "_", "Добавить в портфолио", options))) + "</a></div>";
        return buffer;
      }
      buffer += '<div class="hm-es-event-list-item hm-es-event-list-item-forum" title="';
      if (helper = helpers.getTitle) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getTitle;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "dd mmm", options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = 
      {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "HH:MM", options))) + "</div>";
      stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.showPortfolioAction), {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "В занятии", options) : helperMissing.call(depth0, "_", "В занятии", options))) + " <q>" + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.lesson_title), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + 
      "</q> " + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Вам была поставлена оценка", options) : helperMissing.call(depth0, "_", "Вам была поставлена оценка", options))) + '<div class="hm-clear"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/item/forum/ForumAddMessage.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = "function";
      buffer += '<div class="hm-es-event-list-item"><div class="hm-es-event-list-item-avatar-wrapper"><div class="hm-es-event-list-item-avatar"></div></div><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, 
      "dd mmm", options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "HH:MM", options))) + '</div><div><span class="hm-es-event-list-item-author">' + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.user_name), 
      typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</span> " + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "добавил(а) сообщение", options) : helperMissing.call(depth0, "_", "добавил(а) сообщение", options))) + ' "' + escapeExpression((stack1 = 
      (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.title), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '"</div><div class="hm-es-event-list-item-desc">' + escapeExpression((helper = helpers.cropText || depth0 && depth0.cropText, options = {hash:{}, data:data}, helper ? helper.call(depth0, (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.text), 100, options) : helperMissing.call(depth0, 
      "cropText", (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.text), 100, options))) + "</div></div>";
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/item/personalMessage/PersonalMessage.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, self = this;
      function program1(depth0, data) {
        var buffer = "", helper, options;
        buffer += '<div class="hm-es-event-list-item-portfolio-add"><a href="#add">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Добавить в портфолио", options) : helperMissing.call(depth0, "_", "Добавить в портфолио", options))) + "</a></div>";
        return buffer;
      }
      buffer += '<div class="hm-es-event-list-item hm-es-event-list-item-message" title="' + escapeExpression((helper = helpers.cropText || depth0 && depth0.cropText, options = {hash:{}, data:data}, helper ? helper.call(depth0, (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.message), options) : helperMissing.call(depth0, "cropText", (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.message), options))) + '"><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + 
      escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "dd mmm", options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, 
      "datetime", depth0 && depth0.creationDate, "HH:MM", options))) + "</div>";
      stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.showPortfolioAction), {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '<div class="hm-es-event-list-item-desc">' + escapeExpression((helper = helpers.cropText || depth0 && depth0.cropText, options = {hash:{}, data:data}, helper ? helper.call(depth0, (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.message), 100, options) : helperMissing.call(depth0, "cropText", (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.message), 100, options))) + '</div><div class="hm-clear"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/list/item/wiki/WikiPage.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = "function";
      buffer += '<div class="hm-es-event-list-item hm-es-event-list-item-wiki"><div class="hm-es-event-list-item-avatar-wrapper"><div class="hm-es-event-list-item-avatar"></div></div><div class="hm-es-event-list-item-datetime"><div class="hm-es-event-list-item-date">' + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "dd mmm", options) : helperMissing.call(depth0, "datetime", depth0 && 
      depth0.creationDate, "dd mmm", options))) + "</div>" + escapeExpression((helper = helpers.datetime || depth0 && depth0.datetime, options = {hash:{}, data:data}, helper ? helper.call(depth0, depth0 && depth0.creationDate, "HH:MM", options) : helperMissing.call(depth0, "datetime", depth0 && depth0.creationDate, "HH:MM", options))) + '</div><span class="hm-es-event-list-item-author">';
      if (helper = helpers.getAuthor) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getAuthor;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + "</span> ";
      if (helper = helpers.actionTitle) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.actionTitle;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + " " + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "страницу", options) : helperMissing.call(depth0, "_", "страницу", options))) + " <q>" + escapeExpression((stack1 = (stack1 = depth0 && depth0.description, stack1 == null || stack1 === false ? stack1 : stack1.title), typeof stack1 === functionType ? stack1.apply(depth0) : 
      stack1)) + '</q><div class="hm-clear"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/panel/EventListPanel.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression;
      buffer += '<div class="hm-es-event-panel"><div class="hm-es-event-list-container"></div><div class="hm-es-event-panel-trigger">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Просмотреть предыдущие", options) : helperMissing.call(depth0, "_", "Просмотреть предыдущие", 
      options))) + "</div></div>";
      return buffer;
    });
    registerTemplate("hm/module/es/ui/event/toolbar/EventToolbar.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      return'<div class="hm-es-event-toolbar"></div>';
    });
    registerTemplate("hm/module/es/ui/event/toolbar/button/EventToolbarButton.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, functionType = "function", escapeExpression = this.escapeExpression;
      buffer += '<div class="hm-es-event-toolbar-button"><span class="hm-es-event-toolbar-button-caption hm-es-event-toolbar-button-caption__' + escapeExpression((stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.groupType), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '">' + escapeExpression((stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.caption), typeof stack1 === functionType ? 
      stack1.apply(depth0) : stack1)) + '</span><span class="hm-es-event-toolbar-button-icon-tab"><span class="hm-es-event-toolbar-button-icon">' + escapeExpression((stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.count), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</span></span></div>";
      return buffer;
    });
    registerTemplate("hm/module/messenger/ui/Messenger.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing;
      buffer += '<div class="';
      if (helper = helpers.ns) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.ns;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "messages-list-wrap", options) : helperMissing.call(depth0, "ns", "messages-list-wrap", options))) + '"><table class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "messages-placeholder", options) : helperMissing.call(depth0, "ns", "messages-placeholder", 
      options))) + '"><tr><td><ul><li>' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Для просмотра переписки и отправки сообщений выберите контакт справа.", 
      options) : helperMissing.call(depth0, "_", "Для просмотра переписки и отправки сообщений выберите контакт справа.", options))) + "</li><li>" + escapeExpression((helper = helpers._ || depth0 && depth0._, 
      options = {hash:{}, data:data}, helper ? helper.call(depth0, "Для начала новой переписки выполните поиск пользователей в поле «Кому».", options) : helperMissing.call(depth0, "_", "Для начала новой переписки выполните поиск пользователей в поле «Кому».", 
      options))) + "</li><li>" + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Для поиска введите любое сочетание букв из фамилии, имени и отчества.", 
      options) : helperMissing.call(depth0, "_", "Для поиска введите любое сочетание букв из фамилии, имени и отчества.", options))) + "</li><li>" + escapeExpression((helper = helpers._ || depth0 && depth0._, options = 
      {hash:{}, data:data}, helper ? helper.call(depth0, "Можно отправлять сообщения сразу нескольким пользователям.", options) : helperMissing.call(depth0, "_", "Можно отправлять сообщения сразу нескольким пользователям.", 
      options))) + "</li><li>" + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Для быстрого добавления пользователей в поле «Кому» нажмите на имеющиеся контакты справа, зажав Ctrl.", 
      options) : helperMissing.call(depth0, "_", "Для быстрого добавления пользователей в поле «Кому» нажмите на имеющиеся контакты справа, зажав Ctrl.", 
      options))) + '</li></ul></td></tr></table></div><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "contacts-list-wrap", options) : helperMissing.call(depth0, "ns", "contacts-list-wrap", options))) + '"></div><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "input-wrap", options) : helperMissing.call(depth0, "ns", "input-wrap", 
      options))) + '"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/messenger/ui/contact/Contact.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing, self = this;
      function program1(depth0, data) {
        var buffer = "", stack1, helper;
        buffer += "/";
        if (helper = helpers.getIcon) {
          stack1 = helper.call(depth0, {hash:{}, data:data});
        } else {
          helper = depth0 && depth0.getIcon;
          stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
        }
        buffer += escapeExpression(stack1);
        return buffer;
      }
      function program3(depth0, data) {
        return "/images/content-modules/nophoto.gif";
      }
      buffer += '<div class="';
      if (helper = helpers.ns) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.ns;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"><table><tr><td><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "icon", options) : helperMissing.call(depth0, "ns", "icon", options))) + '" style="background-image: url(\'';
      stack1 = helpers["if"].call(depth0, depth0 && depth0.getIcon, {hash:{}, inverse:self.program(3, program3, data), fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '\');"></div></td><td><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "name", options) : helperMissing.call(depth0, "ns", "name", options))) + '">';
      if (helper = helpers.getName) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getName;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '&nbsp;<span class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "new-count", options) : helperMissing.call(depth0, "ns", "new-count", options))) + '">0</span></div></td></tr></table></div>';
      return buffer;
    });
    registerTemplate("hm/module/messenger/ui/contact/ContactsList.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing;
      buffer += '<div class="';
      if (helper = helpers.ns) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.ns;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "items-container", options) : helperMissing.call(depth0, "ns", "items-container", options))) + '"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/messenger/ui/input/Input.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, functionType = "function", escapeExpression = this.escapeExpression;
      buffer += '<div class="';
      if (helper = helpers.ns) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.ns;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"></div>';
      return buffer;
    });
    registerTemplate("hm/module/messenger/ui/message/Message.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing;
      buffer += '<div class="';
      if (helper = helpers.ns) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.ns;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + " ";
      if (helper = helpers.isMyClass) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.isMyClass;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + " ";
      if (helper = helpers.isNewClass) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.isNewClass;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "date", options) : helperMissing.call(depth0, "ns", "date", options))) + '">' + escapeExpression((helper = helpers.getDate || depth0 && depth0.getDate, options = {hash:{}, data:data}, helper ? helper.call(depth0, "dd.mm.yyyy HH:MM:ss", options) : helperMissing.call(depth0, "getDate", "dd.mm.yyyy HH:MM:ss", options))) + 
      '</div><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "delimiter", options) : helperMissing.call(depth0, "ns", "delimiter", options))) + '">,&nbsp;</div><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "author", options) : helperMissing.call(depth0, "ns", "author", options))) + '">';
      if (helper = helpers.getAuthorName) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getAuthorName;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '</div><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "message", options) : helperMissing.call(depth0, "ns", "message", options))) + '">';
      if (helper = helpers.getMessage) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getMessage;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '<div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "indicator", options) : helperMissing.call(depth0, "ns", "indicator", options))) + '"></div></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/messenger/ui/message/MessagesList.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing;
      buffer += '<div class="';
      if (helper = helpers.ns) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.ns;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "items-container", options) : helperMissing.call(depth0, "ns", "items-container", options))) + '"></div></div>';
      return buffer;
    });
    registerTemplate("hm/core/ui/trainingModulesConstructor/Constructor.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      return'<div><div class="hm-constructor-tree" style="width: 49%; float: left;"></div><div class="hm-constructor-search" style="width: 49%; float: right;"></div></div>';
    });
    registerTemplate("hm/core/ui/trainingModulesConstructor/ResourceItem.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing;
      buffer += '<div class="hm-search-resource-item"><a class="material-icon-small ';
      if (helper = helpers.getIconClass) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getIconClass;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '" title="' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Открыть карточку", options) : helperMissing.call(depth0, "_", "Открыть карточку", options))) + '" href="#"></a><a class="hm-search-resource-item-title" title="' + escapeExpression((helper = 
      helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Открыть в новом окне", options) : helperMissing.call(depth0, "_", "Открыть в новом окне", options))) + '"  href="';
      if (helper = helpers.getViewUrl) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getViewUrl;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '">';
      if (helper = helpers.getTitle) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getTitle;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + "</a></div>";
      return buffer;
    });
    registerTemplate("hm/core/ui/trainingModulesConstructor/ResourcesSearch.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, self = this, helperMissing = helpers.helperMissing;
      function program1(depth0, data) {
        return'<div class="hm-sphinx-search-run-indexer"><a href="#">Запустить индексацию данных</a></div>';
      }
      function program3(depth0, data) {
        var stack1;
        stack1 = helpers.unless.call(depth0, depth0 && depth0.hidden, {hash:{}, inverse:self.noop, fn:self.program(4, program4, data), data:data});
        if (stack1 || stack1 === 0) {
          return stack1;
        } else {
          return "";
        }
      }
      function program4(depth0, data) {
        var buffer = "", stack1, helper;
        buffer += '<tr><td class="hm-sphinx-search-label">';
        if (helper = helpers.label) {
          stack1 = helper.call(depth0, {hash:{}, data:data});
        } else {
          helper = depth0 && depth0.label;
          stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
        }
        buffer += escapeExpression(stack1) + ": </td>";
        stack1 = helpers["if"].call(depth0, depth0 && depth0.options, {hash:{}, inverse:self.program(8, program8, data), fn:self.program(5, program5, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += "</tr>";
        return buffer;
      }
      function program5(depth0, data) {
        var buffer = "", stack1;
        buffer += '<td><select name="' + escapeExpression((stack1 = data == null || data === false ? data : data.key, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '"><option value=""></option>';
        stack1 = helpers.each.call(depth0, depth0 && depth0.options, {hash:{}, inverse:self.noop, fn:self.program(6, program6, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += "</select></td>";
        return buffer;
      }
      function program6(depth0, data) {
        var buffer = "", stack1;
        buffer += '<option value="' + escapeExpression((stack1 = data == null || data === false ? data : data.key, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '">' + escapeExpression(typeof depth0 === functionType ? depth0.apply(depth0) : depth0) + "</option>";
        return buffer;
      }
      function program8(depth0, data) {
        var buffer = "", stack1;
        buffer += '<td><input name="' + escapeExpression((stack1 = data == null || data === false ? data : data.key, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '" value="" /></td>';
        return buffer;
      }
      buffer += '<div class="hm-sphinx-search-trainingModulesConstructor"><form><div class="hm-sphinx-search-form"><div><div class="hm-sphinx-search-title">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Поиск ресурсов", options) : helperMissing.call(depth0, "_", "Поиск ресурсов", options))) + 
      "</div>";
      stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.indexerUrl), {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '</div><table><tbody><tr><td class="hm-sphinx-search-label">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Поиск по всем данным", options) : helperMissing.call(depth0, "_", "Поиск по всем данным", options))) + ': </td><td><input name="all" value="" /></td></tr><tr><td colspan="2" class="hm-sphinx-search-toggle-extended"><a class="hm-switcher" href="#">' + 
      escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Расширенный поиск", options) : helperMissing.call(depth0, "_", "Расширенный поиск", options))) + '</a></td></tr></tbody><tbody class="hm-sphinx-search-extended">';
      stack1 = helpers.each.call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.items), {hash:{}, inverse:self.noop, fn:self.program(3, program3, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '</tbody><tbody><tr><td></td><td><input type="submit" value="' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Найти", options) : helperMissing.call(depth0, "_", "Найти", options))) + '" /><input class="ui-button hm-sphinx-search-all" type="reset" value="' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? 
      helper.call(depth0, "Показать все", options) : helperMissing.call(depth0, "_", "Показать все", options))) + '" /></td></tr></tbody></table></div></form><div class="hm-search-result"></div></div>';
      return buffer;
    });
    registerTemplate("hm/core/ui/trainingModulesConstructor/Tree.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing;
      buffer += '<div class="hm-tree hm-tree-trainingModulesConstructor"><div class="hm-tree-title">' + escapeExpression((stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.title), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '</div><div class="hm-tree-container"></div><div class="hm-tree-footer"><a href="#" class="hm-tree-add-section">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, 
      helper ? helper.call(depth0, "Создать раздел", options) : helperMissing.call(depth0, "_", "Создать раздел", options))) + '</a><div class="hm-tree-legend"><span class="hm-tree-legend-notFound"><span></span> ' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Ресурс удалён", 
      options) : helperMissing.call(depth0, "_", "Ресурс удалён", options))) + '</span><span class="hm-tree-legend-inDevelop"><span></span> ' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "В разработке", options) : helperMissing.call(depth0, "_", "В разработке", 
      options))) + "</span></div></div></div>";
      return buffer;
    });
    registerTemplate("hm/core/ui/trainingModulesConstructor/node/ResourceNode.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, functionType = "function", escapeExpression = this.escapeExpression;
      buffer += '<li class="hm-tree-node"><span class="hm-tree-node-item"><span class="hm-tree-node-connector"></span><span class="hm-tree-node-icon ';
      if (helper = helpers.getIconClass) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getIconClass;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"></span><span class="hm-tree-node-status"></span><span class="hm-tree-node-title">';
      if (helper = helpers.getTitle) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getTitle;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '</span></span><ul class="hm-tree-node-children"></ul></li>';
      return buffer;
    });
    registerTemplate("hm/core/ui/trainingModulesViewer/Bookmarks.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, functionType = "function", escapeExpression = this.escapeExpression;
      buffer += '<div class="hm-tree ';
      if (helper = helpers.ns) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.ns;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"></div>';
      return buffer;
    });
    registerTemplate("hm/core/ui/trainingModulesViewer/BookmarksList.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      return'<ul class="hm-lesson-bookmarks-list"></ul>';
    });
    registerTemplate("hm/core/ui/trainingModulesViewer/BookmarksListItem.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, functionType = "function", escapeExpression = this.escapeExpression;
      buffer += '<li><a href="';
      if (helper = helpers.getUrl) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getUrl;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"><span class="hm-lesson-bookmarks-icon"></span>' + escapeExpression((stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.title), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</a></li>";
      return buffer;
    });
    registerTemplate("hm/core/ui/trainingModulesViewer/ContentSearch.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression;
      buffer += '<div class="hm-content-search"><input type="text" /><input type="button" value="' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Найти", options) : helperMissing.call(depth0, "_", "Найти", options))) + '" /></div>';
      return buffer;
    });
    registerTemplate("hm/core/ui/trainingModulesViewer/ExtraNavigation.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, functionType = "function", escapeExpression = this.escapeExpression, self = this;
      function program1(depth0, data) {
        var buffer = "", stack1, helper;
        buffer += '<a class="hm-extra-nav-icon hm-extra-nav-button-custom ';
        if (helper = helpers["class"]) {
          stack1 = helper.call(depth0, {hash:{}, data:data});
        } else {
          helper = depth0 && depth0["class"];
          stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
        }
        buffer += escapeExpression(stack1) + " ";
        stack1 = helpers["if"].call(depth0, depth0 && depth0.openInViewer, {hash:{}, inverse:self.noop, fn:self.program(2, program2, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '" href="';
        if (helper = helpers.url) {
          stack1 = helper.call(depth0, {hash:{}, data:data});
        } else {
          helper = depth0 && depth0.url;
          stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
        }
        buffer += escapeExpression(stack1) + '" title="';
        if (helper = helpers.title) {
          stack1 = helper.call(depth0, {hash:{}, data:data});
        } else {
          helper = depth0 && depth0.title;
          stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
        }
        buffer += escapeExpression(stack1) + '" ';
        stack1 = helpers.each.call(depth0, depth0 && depth0.attributes, {hash:{}, inverse:self.noop, fn:self.program(4, program4, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += "></a>";
        return buffer;
      }
      function program2(depth0, data) {
        return "hm-extra-nav-open-in-viewer";
      }
      function program4(depth0, data) {
        var buffer = "", stack1;
        buffer += escapeExpression((stack1 = data == null || data === false ? data : data.key, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '="' + escapeExpression(typeof depth0 === functionType ? depth0.apply(depth0) : depth0) + '"';
        return buffer;
      }
      function program6(depth0, data) {
        return'<a class="hm-extra-nav-icon hm-extra-nav-button-bookmark" href="#bookmark"></a>';
      }
      buffer += '<div class="hm-extra-navigation"><div class="hm-extra-navigation-cell hm-extra-navigation-left"><a class="hm-extra-nav-icon hm-extra-nav-button-prev" href="#prev"></a><span class="hm-extra-nav-counter"></span><a class="hm-extra-nav-icon hm-extra-nav-button-next" href="#next"></a></div><div class="hm-extra-navigation-cell hm-extra-navigation-right"><div class="hm-content-search-wrap"></div>';
      stack1 = helpers.each.call(depth0, depth0 && depth0.getCustomButtons, {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      stack1 = helpers["if"].call(depth0, depth0 && depth0.getBookmarking, {hash:{}, inverse:self.noop, fn:self.program(6, program6, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += "</div></div>";
      return buffer;
    });
    registerTemplate("hm/core/ui/trainingModulesViewer/Viewer.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = "function", self = this;
      function program1(depth0, data) {
        var buffer = "", helper, options;
        buffer += '<span class="hm-tmw-navigation-button">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Оглавление", options) : helperMissing.call(depth0, "_", "Оглавление", options))) + "</span>";
        return buffer;
      }
      function program3(depth0, data) {
        var buffer = "", helper, options;
        buffer += '<a class="hm-tmw-content-edit" href="#" target="_blank" title="' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Редактировать", options) : helperMissing.call(depth0, "_", "Редактировать", options))) + '"></a>';
        return buffer;
      }
      buffer += '<table class="';
      if (helper = helpers.ns) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.ns;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"><tr class="hm-tmw-row hm-tmw-row-header"><td><div class="hm-tmw-header">';
      stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.treeData), {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '<span class="hm-tmw-content-title-wrap"><span class="hm-tmw-content-title"></span>';
      stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.showEditButton), {hash:{}, inverse:self.noop, fn:self.program(3, program3, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '</span></div></td></tr><tr class="hm-tmw-row hm-tmw-row-content"><td><div class="hm-tmw-content"><iframe frameBorder="0"></iframe><div class="hm-tmw-overlay"></div><div class="hm-tmw-loading">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Загрузка", options) : helperMissing.call(depth0, "_", "Загрузка", options))) + '...</div><div class="hm-tmw-tree"></div></div></td></tr><tr class="hm-tmw-row hm-tmw-row-footer"><td><div class="hm-tmw-footer"></div></td></tr></table>';
      return buffer;
    });
    registerTemplate("hm/core/ui/trainingModulesViewer/node/Node.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, functionType = "function", escapeExpression = this.escapeExpression;
      buffer += '<li class="hm-tree-node"><span class="hm-tree-node-item"><span class="hm-tree-node-connector"></span><span class="hm-tree-node-icon ';
      if (helper = helpers.getIconClass) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getIconClass;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"></span><span class="hm-tree-node-title">';
      if (helper = helpers.getTitle) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getTitle;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '</span><span class="hm-tree-node-viewed"></span></span><ul class="hm-tree-node-children"></ul></li>';
      return buffer;
    });
    registerTemplate("hm/core/ui/webinarViewer/TeacherViewer.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing, self = this;
      function program1(depth0, data) {
        var stack1;
        return escapeExpression((stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.title), typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
      }
      function program3(depth0, data) {
        var helper, options;
        return escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Материалы", options) : helperMissing.call(depth0, "_", "Материалы", options)));
      }
      buffer += '<table class="';
      if (helper = helpers.ns) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.ns;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + " " + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "teacher", options) : helperMissing.call(depth0, "ns", "teacher", options))) + '"><tr class="hm-tmw-row hm-tmw-row-header"><td><div class="hm-tmw-header"><span class="hm-tmw-navigation-button">';
      stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.title), {hash:{}, inverse:self.program(3, program3, data), fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '</span><span class="hm-tmw-content-title-wrap"></span></div></td></tr><tr class="hm-tmw-row hm-tmw-row-content"><td><div class="hm-tmw-content"><iframe frameBorder="0"></iframe><div class="hm-tmw-overlay"></div><div class="hm-tmw-loading">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Загрузка", options) : helperMissing.call(depth0, "_", "Загрузка", 
      options))) + '...</div><div class="hm-tmw-tree"></div></div></td></tr><tr class="hm-tmw-row hm-tmw-row-footer"><td><div class="hm-tmw-footer"></div></td></tr></table>';
      return buffer;
    });
    registerTemplate("hm/core/ui/webinarViewer/file/File.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing;
      buffer += '<div class="';
      if (helper = helpers.ns) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.ns;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + " " + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "drop-area", options) : helperMissing.call(depth0, "ns", "drop-area", options))) + '"><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "content-wrap", options) : helperMissing.call(depth0, "ns", "content-wrap", options))) + '"><table><tr><td><div class="' + 
      escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "link-input-tip", options) : helperMissing.call(depth0, "ns", "link-input-tip", options))) + '"><span>Введите ссылку</span> и нажмите Enter;</div><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, 
      "link-input-wrap", options) : helperMissing.call(depth0, "ns", "link-input-wrap", options))) + '"><input class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "link-input", options) : helperMissing.call(depth0, "ns", "link-input", options))) + '" name="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "link-input", options) : helperMissing.call(depth0, 
      "ns", "link-input", options))) + '" type="text" value="" /><span class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "link-input-enter", options) : helperMissing.call(depth0, "ns", "link-input-enter", options))) + '"></span></div></td><td style="width: 100%;"><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "file-input-tip", 
      options) : helperMissing.call(depth0, "ns", "file-input-tip", options))) + '"><label class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "file-input-label", options) : helperMissing.call(depth0, "ns", "file-input-label", options))) + '" for="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "file-input", options) : helperMissing.call(depth0, 
      "ns", "file-input", options))) + '">Выберите файл</label> или перетащите сюда.<input id="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "file-input", options) : helperMissing.call(depth0, "ns", "file-input", options))) + '" class="' + escapeExpression((helper = helpers.ns || 
      depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "file-input", options) : helperMissing.call(depth0, "ns", "file-input", options))) + '" type="file" name="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "file-input", options) : helperMissing.call(depth0, "ns", "file-input", options))) + '" /></div></td></tr></table></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/mainPageWidgets/Row.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      return'<div class="hm-widgets-row"><div class="hm-widgets-row-content"></div><div class="hm-clear-left"></div></div>';
    });
    registerTemplate("hm/module/mainPageWidgets/button/CreateWidgetButton.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, self = this, helperMissing = helpers.helperMissing;
      function program1(depth0, data) {
        var buffer = "", stack1;
        buffer += '<optgroup label="' + escapeExpression((stack1 = depth0 && depth0.title, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '">';
        stack1 = helpers.each.call(depth0, depth0 && depth0.widgets, {hash:{}, inverse:self.noop, fn:self.program(2, program2, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += "</optgroup>";
        return buffer;
      }
      function program2(depth0, data) {
        var buffer = "", stack1;
        buffer += '<option value="' + escapeExpression((stack1 = depth0 && depth0.id, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '">' + escapeExpression((stack1 = depth0 && depth0.title, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</option>";
        return buffer;
      }
      buffer += '<div class="hm-widgets-row-createWidgetButton hm-widgets-widget"><div class="hm-widgets-widget-content"><div class="hm-widgets-row-createWidgetButton-widgetsSelect"><select>';
      stack1 = helpers.each.call(depth0, depth0 && depth0.groups, {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '</select><button class="hm-widgets-row-createWidgetButton-widgetsSelect-submit">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Добавить", options) : helperMissing.call(depth0, "_", "Добавить", options))) + "</button></div></div></div>";
      return buffer;
    });
    registerTemplate("hm/module/mainPageWidgets/toolbar/RoleToolbar.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = "function", self = this;
      function program1(depth0, data) {
        var buffer = "", helper, options;
        buffer += '<button class="hm-widgets-roleToolbar-button hm-widgets-roleToolbar-button_reset"><span><span class="hm-widgets-roleToolbar-button-icon">&nbsp;</span><span class="hm-widgets-roleToolbar-button-caption">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Сбросить", options) : helperMissing.call(depth0, "_", "Сбросить", options))) + 
        "</span></span></button>";
        return buffer;
      }
      function program3(depth0, data) {
        var buffer = "", stack1, helper, options;
        buffer += escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Выберите роль", options) : helperMissing.call(depth0, "_", "Выберите роль", options))) + ":&nbsp;<select>";
        stack1 = helpers.each.call(depth0, depth0 && depth0.roles, {hash:{}, inverse:self.noop, fn:self.program(4, program4, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += "</select>";
        return buffer;
      }
      function program4(depth0, data) {
        var buffer = "", stack1;
        buffer += '<option value="' + escapeExpression((stack1 = depth0 && depth0.role, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '" ';
        stack1 = helpers["if"].call(depth0, depth0 && depth0.selected, {hash:{}, inverse:self.noop, fn:self.program(5, program5, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += ">" + escapeExpression((stack1 = depth0 && depth0.title, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</option>";
        return buffer;
      }
      function program5(depth0, data) {
        return "selected";
      }
      buffer += '<div class="hm-widgets-toolbar-roleToolbar"><button class="hm-widgets-roleToolbar-button hm-widgets-roleToolbar-button_confirm"><span><span class="hm-widgets-roleToolbar-button-icon">&nbsp;</span><span class="hm-widgets-roleToolbar-button-caption">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Сохранить", options) : helperMissing.call(depth0, "_", "Сохранить", 
      options))) + "</span></span></button>";
      stack1 = helpers.unless.call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.adminMode), {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.adminMode), {hash:{}, inverse:self.noop, fn:self.program(3, program3, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '<div class="hm-clear"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/mainPageWidgets/toolbar/Toolbar.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression;
      buffer += '<div class="hm-widgets-toolbar"><button class="hm-widgets-toolbar-editButton" title="' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Режим компоновки информационных блоков", options) : helperMissing.call(depth0, "_", "Режим компоновки информационных блоков", 
      options))) + '"><span></span></button></div>';
      return buffer;
    });
    registerTemplate("hm/module/mainPageWidgets/widget/Widget.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      return'<div class="hm-widgets-widget"><div class="hm-widgets-widget-content"></div></div>';
    });
    registerTemplate("hm/module/mainPageWidgets/widget/Widget.overlay.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      return'<div class="hm-widgets-widget-overlay" unselectable="on"><div class="hm-widgets-widget-button hm-widgets-widget-button-delete"></div><div class="hm-widgets-widget-splitter"></div></div>';
    });
    registerTemplate("hm/module/mainPageWidgets/widget/Widget.settings.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression;
      buffer += '<div class="hm-widgets-widget-settings"><div>' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Стиль инфоблока", options) : helperMissing.call(depth0, "_", "Стиль инфоблока", options))) + ':<select name="style_id"><option value="0">' + escapeExpression((helper = helpers._ || 
      depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Обычный", options) : helperMissing.call(depth0, "_", "Обычный", options))) + "</option></select></div></div>";
      return buffer;
    });
    registerTemplate("hm/module/base/ui/ajax/AjaxSpinner.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression;
      buffer += '<div class="ajax-spinner ajax-spinner-global" style="display: none;"><div class="ajax-spinner-wrapper">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "загрузка", options) : helperMissing.call(depth0, "_", "загрузка", options))) + "...</div></div>";
      return buffer;
    });
    registerTemplate("hm/module/base/ui/like/Like.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, functionType = "function", escapeExpression = this.escapeExpression, self = this;
      function program1(depth0, data) {
        var buffer = "", stack1;
        buffer += '<a class="hm-like-button-dislike"><div class="hm-like-button-dislike-image"></div><span>' + escapeExpression((stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.dislikeCount), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</span></a>";
        return buffer;
      }
      buffer += '<span class="hm-like-liked hm-like"><a class="hm-like-button-like"><div class="hm-like-button-like-image"></div><span class="hm-like-button-like-counter">' + escapeExpression((stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.likeCount), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</span></a>";
      stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.showDislikeButton), {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += "</span>";
      return buffer;
    });
    registerTemplate("hm/module/course/ui/list/CourseDescriptionTabs.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = "function";
      buffer += '<div class="hm-subject-list-item-description"><ul><li style="display: ' + escapeExpression((helper = helpers.tabDisplay || depth0 && depth0.tabDisplay, options = {hash:{}, data:data}, helper ? helper.call(depth0, "lessons", options) : helperMissing.call(depth0, "tabDisplay", "lessons", options))) + ';"><a href="#';
      if (helper = helpers.tab_id) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.tab_id;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '-lessons">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Занятия", options) : helperMissing.call(depth0, "_", "Занятия", options))) + '</a></li><li style="display: ' + escapeExpression((helper = helpers.tabDisplay || depth0 && depth0.tabDisplay, options = {hash:{}, data:data}, helper ? helper.call(depth0, "progress", 
      options) : helperMissing.call(depth0, "tabDisplay", "progress", options))) + ';"><a href="#';
      if (helper = helpers.tab_id) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.tab_id;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '-progress">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Прогресс", options) : helperMissing.call(depth0, "_", "Прогресс", options))) + '</a></li><li style="display: ' + escapeExpression((helper = helpers.tabDisplay || depth0 && depth0.tabDisplay, options = {hash:{}, data:data}, helper ? helper.call(depth0, 
      "events", options) : helperMissing.call(depth0, "tabDisplay", "events", options))) + ';"><a href="#';
      if (helper = helpers.tab_id) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.tab_id;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '-events">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Оповещения", options) : helperMissing.call(depth0, "_", "Оповещения", options))) + "</a></li></ul>" + escapeExpression((helper = helpers.include || depth0 && depth0.include, options = {hash:{}, data:data}, helper ? helper.call(depth0, 
      "hm/module/course/ui/list/CourseDescriptionTabs.lessons", options) : helperMissing.call(depth0, "include", "hm/module/course/ui/list/CourseDescriptionTabs.lessons", options))) + '<div id="';
      if (helper = helpers.tab_id) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.tab_id;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '-progress" class="hm-subject-list-item-description-progress"></div><div id="';
      if (helper = helpers.tab_id) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.tab_id;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '-events" class="hm-subject-list-item-description-events"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/course/ui/list/CourseDescriptionTabs.lessons.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, functionType = "function", escapeExpression = this.escapeExpression, self = this, helperMissing = helpers.helperMissing;
      function program1(depth0, data) {
        var buffer = "", stack1;
        buffer += "<ul>";
        stack1 = helpers.each.call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.lessons), {hash:{}, inverse:self.noop, fn:self.program(2, program2, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += "</ul>";
        return buffer;
      }
      function program2(depth0, data) {
        var buffer = "", stack1;
        buffer += '<li class="hm-subject-list-item-description-lesson ';
        stack1 = helpers["if"].call(depth0, depth0 && depth0.isFree, {hash:{}, inverse:self.noop, fn:self.program(3, program3, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += " ";
        stack1 = helpers["if"].call(depth0, depth0 && depth0.isExpired, {hash:{}, inverse:self.noop, fn:self.program(5, program5, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '">';
        stack1 = helpers.unless.call(depth0, depth0 && depth0.isTeacher, {hash:{}, inverse:self.noop, fn:self.program(7, program7, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '<div class="hm-subject-list-item-description-lesson-title" title="' + escapeExpression((stack1 = depth0 && depth0.title, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '"><a '+(depth0.newWindow ? 'target=_blank' : '')+' href="' + escapeExpression((stack1 = depth0 && depth0.url, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '">' + escapeExpression((stack1 = depth0 && depth0.title, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</a></div></li>";
        return buffer;
      }
      function program3(depth0, data) {
        return "hm-subject-list-item-description-lesson-free";
      }
      function program5(depth0, data) {
        return "hm-subject-list-item-description-lesson-expired";
      }
      function program7(depth0, data) {
        var buffer = "", stack1;
        buffer += '<div class="hm-subject-list-item-description-lesson-date">';
        stack1 = helpers["if"].call(depth0, depth0 && depth0.isFree, {hash:{}, inverse:self.noop, fn:self.program(8, program8, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        stack1 = helpers.unless.call(depth0, depth0 && depth0.isFree, {hash:{}, inverse:self.noop, fn:self.program(10, program10, data), data:data});
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += "</div>";
        return buffer;
      }
      function program8(depth0, data) {
        return "∞";
      }
      function program10(depth0, data) {
        var stack1;
        return escapeExpression((stack1 = depth0 && depth0.end, typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
      }
      function program12(depth0, data) {
        var buffer = "", helper, options;
        buffer += '<div class="hm-subject-list-item-description-panel-empty"><div>' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Занятий нет", options) : helperMissing.call(depth0, "_", "Занятий нет", options))) + "</div></div>";
        return buffer;
      }
      buffer += '<div id="';
      if (helper = helpers.tab_id) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.tab_id;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '-lessons" class="hm-subject-list-item-description-lessons">';
      stack1 = helpers["if"].call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.lessons), {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      stack1 = helpers.unless.call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.lessons), {hash:{}, inverse:self.noop, fn:self.program(12, program12, data), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += "</div>";
      return buffer;
    });
    registerTemplate("hm/module/course/ui/list/CourseDescriptionTabs.progress.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = "function";
      buffer += '<div class="hm-subject-list-item-description-progress-chart"><div class="hm-subject-list-item-description-progress-bar hm-subject-list-item-description-progress-bar-best"><div class="hm-subject-list-item-description-progress-bar-caption">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "лучший результат", options) : helperMissing.call(depth0, 
      "_", "лучший результат", options))) + '</div><div class="hm-subject-list-item-description-progress-bar-rect"><div class="hm-subject-list-item-description-progress-bar-rect-value" style="' + escapeExpression((stack1 = (stack1 = depth0 && depth0.styles, stack1 == null || stack1 === false ? stack1 : stack1.best), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '"></div></div></div><div class="hm-subject-list-item-description-progress-bar hm-subject-list-item-description-progress-bar-my"><div class="hm-subject-list-item-description-progress-bar-caption">' + 
      escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "ваш результат", options) : helperMissing.call(depth0, "_", "ваш результат", options))) + '</div><div class="hm-subject-list-item-description-progress-bar-rect"><div class="hm-subject-list-item-description-progress-bar-rect-value" style="' + escapeExpression((stack1 = 
      (stack1 = depth0 && depth0.styles, stack1 == null || stack1 === false ? stack1 : stack1.my), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '"></div></div></div><div class="hm-subject-list-item-description-progress-bar hm-subject-list-item-description-progress-bar-axis"><div class="hm-subject-list-item-description-progress-bar-rect"></div></div><div class="hm-subject-list-item-description-progress-bar hm-subject-list-item-description-progress-bar-3"><div class="hm-subject-list-item-description-progress-bar-rect"><div class="hm-subject-list-item-description-progress-bar-rect-value" style="' + 
      escapeExpression((stack1 = (stack1 = depth0 && depth0.styles, stack1 == null || stack1 === false ? stack1 : stack1[3]), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '"></div></div></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/course/ui/marksheet/ScrollBar.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing;
      buffer += '<div class="';
      if (helper = helpers.ns) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.ns;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '" unselectable="on"><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "scroller", options) : helperMissing.call(depth0, "ns", "scroller", options))) + '"></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/develop/ui/panel/DevPanel.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, self = this, functionType = "function", blockHelperMissing = helpers.blockHelperMissing;
      function program1(depth0, data) {
        return " hm-dev-button-debug-switcher-enabled";
      }
      buffer += '<div class="hm-dev-panel"><div class="hm-dev-panel-header">Панель разработчика</div><div class="hm-dev-panel-body"><div class="hm-dev-button-debug-switcher';
      options = {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data};
      if (helper = helpers.debugEnabled) {
        stack1 = helper.call(depth0, options);
      } else {
        helper = depth0 && depth0.debugEnabled;
        stack1 = typeof helper === functionType ? helper.call(depth0, options) : helper;
      }
      if (!helpers.debugEnabled) {
        stack1 = blockHelperMissing.call(depth0, stack1, {hash:{}, inverse:self.noop, fn:self.program(1, program1, data), data:data});
      }
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '">Режим отладки фронтэнда</div></div></div>';
      return buffer;
    });
    registerTemplate("hm/module/quest/ui/samplingOfQuestionsEditor/ClusterEditor.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, self = this, helperMissing = helpers.helperMissing, functionType = "function", escapeExpression = this.escapeExpression;
      function program1(depth0, data, depth1) {
        var buffer = "", stack1, helper, options;
        buffer += '<tr class="';
        stack1 = (helper = helpers.if_even || depth0 && depth0.if_even, options = {hash:{}, inverse:self.program(4, program4, data), fn:self.program(2, program2, data), data:data}, helper ? helper.call(depth0, data == null || data === false ? data : data.index, options) : helperMissing.call(depth0, "if_even", data == null || data === false ? data : data.index, options));
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '"><td class="checkboxes"><input type="checkbox" name="' + escapeExpression((stack1 = depth1 && depth1.getFormNamePrefix, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "[questions][" + escapeExpression((stack1 = depth0 && depth0.id, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + ']" value="1" data-id="' + escapeExpression((stack1 = depth0 && depth0.id, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '" class="' + escapeExpression((helper = 
        helpers.ns || depth1 && depth1.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "question", depth1, options) : helperMissing.call(depth0, "ns", "question", depth1, options))) + '"></td><td>' + escapeExpression((stack1 = depth0 && depth0.title, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</td><td>" + escapeExpression((stack1 = depth0 && depth0.category, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + "</td></tr>";
        return buffer;
      }
      function program2(depth0, data) {
        return "odd";
      }
      function program4(depth0, data) {
        return "even";
      }
      buffer += '<tbody class="';
      if (helper = helpers.ns) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.ns;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"><tr class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "header", options) : helperMissing.call(depth0, "ns", "header", options))) + ' filters_tr"><td colspan="4" class="filters_td first-cell last-cell"><span class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "info", options) : helperMissing.call(depth0, 
      "ns", "info", options))) + '">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Включено:", options) : helperMissing.call(depth0, "_", "Включено:", options))) + '<span class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "info-count", options) : helperMissing.call(depth0, 
      "ns", "info-count", options))) + '">0</span><span class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "info-count-description", options) : helperMissing.call(depth0, "ns", "info-count-description", options))) + '" title="' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Количество обязательных вопросов / Количество случайно выбранных вопросов", 
      options) : helperMissing.call(depth0, "_", "Количество обязательных вопросов / Количество случайно выбранных вопросов", options))) + '">(0/0)</span>' + escapeExpression((helper = 
      helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "из", options) : helperMissing.call(depth0, "_", "из", options))) + '<span class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "info-fullCount", options) : helperMissing.call(depth0, "ns", "info-fullCount", options))) + '">';
      if (helper = helpers.getQuestionsCount) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getQuestionsCount;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '</span></span><span class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "title", options) : helperMissing.call(depth0, "ns", "title", options))) + '">' + escapeExpression((stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.title), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '</span><input type="number" min="0" max="';
      if (helper = helpers.getQuestionsCount) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getQuestionsCount;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '" name="';
      if (helper = helpers.getFormNamePrefix) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.getFormNamePrefix;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '[count]" value="0" class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "count", options) : helperMissing.call(depth0, "ns", "count", options))) + '"></td></tr></tbody><tbody class="';
      if (helper = helpers.ns) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.ns;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"><tr class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "body", options) : helperMissing.call(depth0, "ns", "body", options))) + '"><td colspan="4" class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "questions", options) : helperMissing.call(depth0, "ns", "questions", options))) + ' first-cell last-cell"><div class="' + 
      escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "questions-wrapper", options) : helperMissing.call(depth0, "ns", "questions-wrapper", options))) + '"><table>' + escapeExpression((helper = helpers.include || depth0 && depth0.include, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Editor.colgroup", options) : helperMissing.call(depth0, "include", "Editor.colgroup", options)));
      stack1 = helpers.each.call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.questions), {hash:{}, inverse:self.noop, fn:self.programWithDepth(1, program1, data, depth0), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += "</table></div></td></tr></tbody>";
      return buffer;
    });
    registerTemplate("hm/module/quest/ui/samplingOfQuestionsEditor/Editor.colgroup.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      return'<colgroup><col style="width: 50px;"><col style="width: auto"><col style="width: 200px;"></colgroup>';
    });
    registerTemplate("hm/module/quest/ui/samplingOfQuestionsEditor/Editor.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = "function", self = this;
      function program1(depth0, data, depth1) {
        var buffer = "", stack1, helper, options;
        buffer += '<div class="' + escapeExpression((helper = helpers.ns || depth1 && depth1.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "category", depth1, options) : helperMissing.call(depth0, "ns", "category", depth1, options))) + '"><label>' + escapeExpression((stack1 = depth0 && depth0.title, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '<br><input type="number" min="0" name="' + escapeExpression((stack1 = depth1 && depth1.getFormNamePrefix, typeof stack1 === 
        functionType ? stack1.apply(depth0) : stack1)) + "[category][" + escapeExpression((stack1 = depth0 && depth0.id, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + ']" value="0"></label></div>';
        return buffer;
      }
      buffer += '<div class="';
      if (helper = helpers.ns) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.ns;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"><fieldset><legend>' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Количество вопросов по категориям", options) : helperMissing.call(depth0, "_", "Количество вопросов по категориям", 
      options))) + '</legend><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "categoryLimitSwitcher-wrapper", options) : helperMissing.call(depth0, "ns", "categoryLimitSwitcher-wrapper", options))) + '"><label><input type="checkbox" class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "categoryLimitSwitcher", options) : helperMissing.call(depth0, 
      "ns", "categoryLimitSwitcher", options))) + '">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Задать определённое количество вопросов из каждой категории", 
      options) : helperMissing.call(depth0, "_", "Задать определённое количество вопросов из каждой категории", options))) + '</label></div><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, 
      data:data}, helper ? helper.call(depth0, "categories", options) : helperMissing.call(depth0, "ns", "categories", options))) + '">';
      stack1 = helpers.each.call(depth0, (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.categories), {hash:{}, inverse:self.noop, fn:self.programWithDepth(1, program1, data, depth0), data:data});
      if (stack1 || stack1 === 0) {
        buffer += stack1;
      }
      buffer += '<div class="hm-clear-left"></div></div></fieldset><div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "content", options) : helperMissing.call(depth0, "ns", "content", options))) + ' els-grid"><table class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "clusters", options) : helperMissing.call(depth0, "ns", "clusters", 
      options))) + '">' + escapeExpression((helper = helpers.include || depth0 && depth0.include, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Editor.colgroup", options) : helperMissing.call(depth0, "include", "Editor.colgroup", options))) + '<col style="width: ' + escapeExpression((stack1 = depth0 && depth0.getScrollBarWidth, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + 'px;"><thead><tr><th class="first-cell"></th><th>' + escapeExpression((helper = helpers._ || 
      depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Краткий текст вопроса", options) : helperMissing.call(depth0, "_", "Краткий текст вопроса", options))) + "</th><th>" + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, 
      "Сложность", options) : helperMissing.call(depth0, "_", "Сложность", options))) + '</th><th class="last-cell"></th></tr></thead><tfoot class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "footer", options) : helperMissing.call(depth0, "ns", "footer", options))) + '"><tr class="filters_tr"><td colspan="4" class="bottom-grid first-cell last-cell"><span  class="' + 
      escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "total", options) : helperMissing.call(depth0, "ns", "total", options))) + '">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Всего", options) : helperMissing.call(depth0, "_", "Всего", options))) + ' <span class="' + escapeExpression((helper = 
      helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "total-count", options) : helperMissing.call(depth0, "ns", "total-count", options))) + '">0</span> ' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "вопросов", options) : helperMissing.call(depth0, "_", "вопросов", options))) + '</span><button class="' + 
      escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "save", options) : helperMissing.call(depth0, "ns", "save", options))) + '">' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Сохранить", options) : helperMissing.call(depth0, "_", "Сохранить", options))) + 
      '</button><button class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "back", options) : helperMissing.call(depth0, "ns", "back", options))) + '">' + escapeExpression((stack1 = (stack1 = (stack1 = depth0 && depth0.config, stack1 == null || stack1 === false ? stack1 : stack1.callBackUrl), stack1 == null || stack1 === false ? stack1 : stack1.title), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + 
      "</button></td></tr></tfoot></table></div></div>";
      return buffer;
    });
    registerTemplate("hm/module/user/ui/role/switcher/RoleSwitcher.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", stack1, helper, options, functionType = "function", escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing;
      buffer += '<span class="';
      if (helper = helpers.ns) {
        stack1 = helper.call(depth0, {hash:{}, data:data});
      } else {
        helper = depth0 && depth0.ns;
        stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{}, data:data}) : helper;
      }
      buffer += escapeExpression(stack1) + '"><span class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "left", options) : helperMissing.call(depth0, "ns", "left", options))) + '"></span><span class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "center", options) : helperMissing.call(depth0, "ns", "center", options))) + '" unselectable="on"></span><span class="' + 
      escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "right", options) : helperMissing.call(depth0, "ns", "right", options))) + '"><span class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "trigger", options) : helperMissing.call(depth0, "ns", "trigger", options))) + '"></span></span></span>';
      return buffer;
    });
    registerTemplate("hm/module/user/ui/role/switcher/item/EndUserItem.hbs", function(Handlebars, depth0, helpers, partials, data) {
      this.compilerInfo = [4, ">= 1.0.0"];
      helpers = this.merge(helpers, Handlebars.helpers);
      data = data || {};
      var buffer = "", helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression;
      buffer += '<div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "menu-item_enduser-separator", options) : helperMissing.call(depth0, "ns", "menu-item_enduser-separator", options))) + '"></div>' + escapeExpression((helper = helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "Выключить режим управления", 
      options) : helperMissing.call(depth0, "_", "Выключить режим управления", options))) + '<div class="' + escapeExpression((helper = helpers.ns || depth0 && depth0.ns, options = {hash:{}, data:data}, helper ? helper.call(depth0, "menu-item_enduser-bottomtext", options) : helperMissing.call(depth0, "ns", "menu-item_enduser-bottomtext", options))) + '">(' + escapeExpression((helper = 
      helpers._ || depth0 && depth0._, options = {hash:{}, data:data}, helper ? helper.call(depth0, "войти как обычный пользователь", options) : helperMissing.call(depth0, "_", "войти как обычный пользователь", options))) + ")</div>";
      return buffer;
    });
  })(hm.core.template.Template);
  (function() {
    var self;
    var N = 0, components = {};
    HM.define("hm.core.ui.Component", {extend:"hm.core.ObservableClass", requires:["hm.core.template.Template"], config:{renderTo:"", replaceRenderTo:false, elTag:"div", el:null, tpl:false, tplByClass:false, hidden:false, autoRender:true, className:"", classNameSpace:""}, statics:{getComponent:function(componentId) {
      if (hm.core.Object.isObject(componentId)) {
        if (!hm.core.DOM.isNode(componentId)) {
          componentId = $(componentId);
        }
        componentId = componentId.attr("hm-id");
      }
      if (!components.hasOwnProperty(componentId)) {
        return false;
      }
      return components[componentId];
    }}, __construct:function() {
      this._componentId = ++N;
      components[N] = this;
      this._rendered = false;
      var config = this.config;
      if (config.autoRender) {
        this.render();
      }
      return this;
    }, render:function() {
      if (this._rendered) {
        return;
      }
      this._rendered = true;
      this._init();
      this._initEvents();
      if (this.config.renderTo) {
        if (document.body) {
          this._renderTo();
        } else {
          $(this._renderTo.bind(this));
        }
      }
    }, __destruct:function() {
      var __destruct = arguments.callee;
      delete components[this._componentId];
      if (this._$el) {
        this._$el.remove();
      }
      if (this._ns) {
        this._ns.destroy();
      }
      this.callParent(__destruct, arguments);
    }, _renderTo:function() {
      var config = this.config, renderTo = config.renderTo, $renderTo;
      if (renderTo instanceof jQuery) {
        $renderTo = renderTo;
      } else {
        $renderTo = $(renderTo);
      }
      if (config.replaceRenderTo) {
        $renderTo.replaceWith(this._$el);
      } else {
        $renderTo.append(this._$el);
      }
      this._$elRenderTo = $renderTo;
      this._fireInsertedToDomEvent();
    }, _fireInsertedToDomEvent:function() {
      this.fireEvent("inserted_to_target", this, this._$elRenderTo);
    }, _init:function() {
      var config = this.config, className = config.className, classNameSpace = config.classNameSpace;
      if (classNameSpace) {
        this._ns = HM.create("hm.core.ui.ClassNameSpace", {ns:classNameSpace, scope:this});
      }
      this._render();
      var $el = this._$el;
      if (this._ns) {
        this._ns.setEl($el);
      }
      if (className) {
        $el.addClass(className);
      }
      if (config.hidden) {
        $el.hide();
      }
    }, _initEvents:function() {
    }, _renderTemplate:function(tplCode, viewData) {
      var returnString = false;
      if (typeof tplCode === "object" && arguments.length === 1) {
        returnString = tplCode.returnString;
        viewData = tplCode.viewData;
        tplCode = tplCode.tpl;
      }
      viewData = viewData || this;
      var string = hm.core.template.Template.render(tplCode, viewData);
      if (returnString) {
        return string;
      }
      return $(string);
    }, _render:function() {
      var config = this.config, elCfg = config.el, $el;
      if (elCfg !== null) {
        if (typeof elCfg === "string") {
          $el = $(elCfg);
        } else {
          if (elCfg instanceof jQuery) {
            $el = elCfg;
          } else {
            if (elCfg instanceof Array) {
              $el = $(elCfg.join(""));
            } else {
              if (hm.core.DOM.isNode(elCfg)) {
                $el = $(elCfg);
              } else {
                throw new Error("Передан некорректный параметр el при создании компонента");
              }
            }
          }
        }
      } else {
        var tpl = this.getTemplateName();
        if (!tpl) {
          $el = $(document.createElement(config.elTag));
        } else {
          $el = this._renderTemplate(tpl);
        }
      }
      $el.attr("hm-id", this._componentId);
      this._$el = $el;
    }, getTemplateName:function() {
      if (!this.hasTemplate()) {
        return false;
      }
      var config = this.config;
      if (config.tplByClass) {
        return this.getTemplateNameByClass(".");
      }
      return config.tpl;
    }, getTemplateNameByClass:function(path) {
      var currentPlace = this.$className.split("."), className = currentPlace.pop(), pathParts = path.split("/");
      for (var i = 0, ln = pathParts.length;i < ln;i++) {
        var pathPart = pathParts[i];
        switch(pathPart) {
          case ".":
            currentPlace.push(className);
            break;
          case "..":
            currentPlace.pop();
            break;
          default:
            currentPlace.push(pathPart);
        }
      }
      return currentPlace.join("/");
    }, getNs:function() {
      return this._ns;
    }, _beforeShow:function() {
      var event = this.fireEvent("beforeShow", this);
      if (event && event.isPrevented()) {
        return false;
      }
      return true;
    }, _beforeHide:function() {
      var event = this.fireEvent("beforeHide", this);
      if (event && event.isPrevented()) {
        return false;
      }
      return true;
    }, getEl:function() {
      return this._$el;
    }, findEl:function(queryString) {
      return this._$el.find(queryString);
    }, hasTemplate:function() {
      return this.config.tplByClass || !!this.config.tpl;
    }, elOn:function(event, selector, fn, scope) {
      var $el = this._$el;
      if (!scope) {
        scope = this;
      }
      fn = fn.bind(scope);
      if (selector) {
        $el.on(event, selector, fn);
      } else {
        $el.on(event, fn);
      }
    }, show:function() {
      if (!this._rendered) {
        this.render();
      }
      if (!this._beforeShow()) {
        return;
      }
      this._$el.show();
      this.fireEvent("show", this);
      return true;
    }, getHeight:function() {
      return this._$el.height();
    }, setHeight:function(height) {
      return this._$el.height(height);
    }, getWidth:function() {
      return this._$el.width();
    }, setWidth:function(width) {
      return this._$el.width(width);
    }, getOuterWidth:function(includeMargin) {
      return this._$el.outerWidth(!!includeMargin);
    }, getOuterHeight:function(includeMargin) {
      return this._$el.outerHeight(!!includeMargin);
    }, hide:function() {
      if (!this._beforeHide()) {
        return false;
      }
      this._$el.hide();
      this.fireEvent("hide", this);
      return true;
    }, toggle:function() {
      if (this.isVisible()) {
        this.hide();
      } else {
        this.show();
      }
    }, isVisible:function() {
      return this._$el.is(":visible");
    }, detach:function() {
      this._$el.detach();
    }});
    self = hm.core.ui.Component;
  })();
  (function() {
    var self;
    var counter = 0;
    HM.define("hm.core.data.Model", {extend:"hm.core.ui.Component", config:{autoRender:false, data:null, hasMany:null, hasOne:null}, __construct:function() {
      var __construct = arguments.callee;
      this._index = ++counter;
      this._data = this.config.data || {};
      var result = this.callParent(__construct, arguments);
      if (this.config.hasMany) {
        var hasMany = this.config.hasMany;
        if (!(hasMany instanceof Array)) {
          hasMany = [hasMany];
        }
        for (var i = 0, ln = hasMany.length;i < ln;i++) {
          var manyCfg = hasMany[i], propertyName = manyCfg.propertyName, proxy = {type:"memory", async:false, model:manyCfg.model || "hm.core.data.Model", reader:{type:"json", dataProperty:""}};
          this._data[propertyName] = HM.create("hm.core.data.Store", {proxy:proxy, data:this._data[propertyName]});
          this._data[propertyName].on("item_changed", this._onManyChanged, this, propertyName);
        }
      }
      if (this.config.hasOne) {
        var hasOne = this.config.hasOne;
        if (!(hasOne instanceof Array)) {
          hasOne = [hasOne];
        }
        for (var i = 0, ln = hasOne.length;i < ln;i++) {
          var oneCfg = hasOne[i], propertyName = oneCfg.propertyName, modelClass = oneCfg.model || "hm.core.data.Model";
          this._data[propertyName] = HM.create(modelClass, {data:this._data[propertyName]});
          this._data[propertyName].on("change", this._onOneChanged, this, propertyName);
        }
      }
      return result;
    }, get:function(name) {
      return this._data[name];
    }, set:function(name, value, silent) {
      var data = this._data;
      if (data[name] === value) {
        return;
      }
      data[name] = value;
      if (!silent) {
        this.fireEvent("change", name, value);
      }
    }, getData:function() {
      return $.extend({}, this._data);
    }, getIndex:function() {
      return this._index;
    }, _onManyChanged:function(e, store, item, name, value, propertyName) {
      this.fireEvent("change", this, propertyName, this._data[propertyName]);
    }, _onOneChanged:function(e, name, value, propertyName) {
      this.fireEvent("change", propertyName, this._data[propertyName]);
    }});
    self = hm.core.data.Model;
  })();
  (function() {
    var self;
    HM.define("hm.core.data.Store", {extend:"hm.core.ui.Component", requires:["hm.core.data.proxy.AbstractProxy"], config:{autoRender:false, data:null, autoLoad:true, pageSize:20, pagination:true, proxy:null, offset:0}, __construct:function() {
      var __construct = arguments.callee;
      var result = this.callParent(__construct, arguments);
      this._items = [];
      this._itemsIndex = {};
      this._offset = this.config.offset;
      this._filters = [];
      this._initProxy();
      if (this.config.autoLoad) {
        this.load();
      }
      return result;
    }, _initProxy:function() {
      if (this._proxy === undefined) {
        var configProxy = this.config.proxy;
        if (configProxy instanceof hm.core.data.proxy.AbstractProxy) {
          this._proxy = configProxy;
          this._proxy.on("data_loaded", this._onProxyDataLoaded, this);
        } else {
          var proxy = hm.core.Object.clone(configProxy);
          if (typeof proxy === "string") {
            proxy = {type:proxy};
          } else {
            if (!proxy || !proxy.type) {
              proxy = {type:"memory"};
            }
          }
          proxy.data = this.config.data;
          proxy.listeners = {data_loaded:this._onProxyDataLoaded, scope:this};
          this._proxy = hm.core.data.proxy.AbstractProxy.factory(proxy);
        }
      } else {
        this._proxy.on("data_loaded", this._onProxyDataLoaded, this);
      }
    }, _readProxy:function(params, method) {
      method = method || "load";
      if (this.config.pagination) {
        this._proxy.read(this.getOffset(), this.config.pageSize, params, method);
      } else {
        this._proxy.read(null, null, params, method);
      }
    }, addFilter:function(filter) {
      var me = this;
      filter.on("change", function() {
        me.filter();
      });
      this._filters.push(filter);
    }, refresh:function() {
      this.filter();
    }, filter:function(filters) {
      if (arguments.length === 0) {
        if (this._lastSingleFilters) {
          filters = this._lastSingleFilters;
        } else {
          filters = [];
        }
      } else {
        if (filters === null) {
          delete this._lastSingleFilters;
        } else {
          this._lastSingleFilters = filters;
        }
      }
      if (!(filters instanceof Array)) {
        filters = [filters];
      }
      var allFilters = [];
      allFilters.push.apply(allFilters, this._filters);
      allFilters.push.apply(allFilters, filters);
      var multiFilter = HM.create("hm.core.data.filter.MultiFilter", {filters:allFilters});
      var items = this._items || [], result = [];
      for (var i = 0, ln = items.length;i < ln;i++) {
        if (multiFilter.filter(items[i])) {
          result.push(items[i]);
        }
      }
      this._dataFiltered(result);
    }, _load:function(data, method) {
      var items = data.items || [], resultArray = [], resultIndex = {};
      if (method === "more") {
        resultIndex = this._itemsIndex;
        resultArray.push.apply(resultArray, this._items);
      }
      resultArray.push.apply(resultArray, items);
      for (var i = 0, ln = items.length;i < ln;i++) {
        var item = items[i];
        this._itemLoaded(item);
        resultIndex[item.getIndex()] = item;
      }
      this._items = resultArray;
      this._itemsIndex = resultIndex;
      this._count = data.total;
      this._dataLoaded(items, method);
    }, _itemLoaded:function(item) {
      item.on("change", this._onItemChange, this);
    }, _dataLoaded:function(items, method) {
      this.fireEvent("data_loaded", this, items, method);
    }, _dataFiltered:function(items) {
      this.fireEvent("data_filtered", this, items);
    }, _onProxyDataLoaded:function(e, data, method) {
      this._load(data, method);
    }, _onItemChange:function(e, name, value) {
      var item = e.getTarget();
      this.fireEvent("item_changed", this, item, name, value);
    }, load:function(params) {
      this._readProxy(params);
    }, loadMore:function(params) {
      this._readProxy(params, "more");
    }, getOffset:function() {
      return this._offset;
    }, getCount:function() {
      return this._count;
    }, getItemsCount:function() {
      return this._items.length;
    }, getItem:function(i) {
      return this._items[i];
    }, getItems:function() {
      return this._items;
    }, getProxy:function() {
      return this._proxy;
    }, setProxy:function(proxy) {
      this._proxy.un("data_loaded", this._onProxyDataLoaded, this);
      this._proxy = proxy;
      this._proxy.on("data_loaded", this._onProxyDataLoaded, this);
    }, getRecordById:function(id) {
      if (!this._itemsIndex.hasOwnProperty(id)) {
        return false;
      }
      return this._itemsIndex[id];
    }, findByKey:function(name, value) {
      var items = this._items, ln = items.length, result = [];
      for (var i = 0;i < ln;i++) {
        var item = items[i];
        if (item.get(name) == value) {
          result.push(item);
        }
      }
      return result;
    }});
    self = hm.core.data.Store;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.Container", {extend:"hm.core.ui.Component", config:{layout:"vbox", target:""}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._items = [];
      this._layout = hm.core.ui.layout.AbstractLayout.factory(this.config.layout, {target:this._getItemsTarget(), component:this});
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
    }, _getItemsTarget:function() {
      var target = this.config.target;
      if (!target) {
        return this._$el;
      } else {
        return this._$el.find(target);
      }
    }, addItem:function(item) {
      this._layout.add(item);
      this._items.push(item);
      item.on("destroy", this._onItemDestroy, this);
    }, addItems:function(items) {
      for (var i = 0, ln = items.length;i < ln;i++) {
        this.addItem(items[i]);
      }
    }, removeItem:function(item, destroyItem) {
      this._layout.remove(item);
      var items = this._items;
      for (var i = items.length - 1;i >= 0;i--) {
        if (items[i] === item) {
          items.splice(i, 1);
        }
      }
      if (destroyItem) {
        item.destroy();
      }
    }, removeItems:function(items, destroyItems) {
      for (var i = 0, ln = items.length;i < ln;i++) {
        this.removeItem(items[i], destroyItems);
      }
    }, getItemsCount:function() {
      return this._items.length;
    }, _onItemDestroy:function(e, item) {
      this.removeItem(item);
    }});
    self = hm.core.ui.Container;
  })();
  (function() {
    var self;
    HM.define("hm.core.template.helper.AbstractHelper", {config:{}, name:"", help:function(text) {
      return text;
    }, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      var me = this;
      Handlebars.registerHelper(this.name, function() {
        var args = Array.prototype.slice.call(arguments);
        args.push(this);
        return me.help.apply(me, args);
      });
    }});
    self = hm.core.template.helper.AbstractHelper;
  })();
  (function() {
    var self;
    HM.define("hm.core.template.helper.IncludeHelper", {extend:"hm.core.template.helper.AbstractHelper", singleton:true, name:"include", help:function(tplCode, obj, view) {
      var Template = hm.core.template.Template;
      if (!Template.registered(tplCode + ".hbs") && obj.data.tpl) {
        tplCode = Template.resolveTemplateName(obj.data.tpl, tplCode);
      }
      return new Handlebars.SafeString(Template.render(tplCode, view));
    }});
    self = hm.core.template.helper.IncludeHelper;
  })();
  (function() {
    var self;
    HM.define("hm.core.template.helper.NameSpaceHelper", {extend:"hm.core.template.helper.AbstractHelper", singleton:true, name:"ns", _isComponent:function(obj) {
      if (!HM.isObject(obj)) {
        return;
      }
      return obj instanceof hm.core.ui.Component;
    }, CLASS_NOT_FOUND:"hm-nsNotFound", help:function() {
      var args = Array.prototype.slice.call(arguments, 0), constArgs = args.splice(-2, 2), view = constArgs[1], classNamePart = "", classNameModifier = "", argLn = args.length;
      if (argLn > 0 && this._isComponent(args[argLn - 1])) {
        view = args.splice(-1, 1)[0];
        argLn--;
      }
      switch(argLn) {
        case 2:
          classNamePart = args[0];
          classNameModifier = args[1];
          break;
        case 1:
          classNamePart = args[0];
          break;
      }
      var CLASS_NOT_FOUND = this.CLASS_NOT_FOUND;
      if (!this._isComponent(view)) {
        return CLASS_NOT_FOUND;
      }
      var ns = view.getNs();
      if (!ns) {
        return CLASS_NOT_FOUND;
      }
      return ns.getClass(classNamePart, classNameModifier);
    }});
    self = hm.core.template.helper.NameSpaceHelper;
  })();
  (function() {
    var self;
    HM.define("hm.core.template.helper.date.DateTimeHelper", {extend:"hm.core.template.helper.AbstractHelper", singleton:true, name:"datetime", help:function(dt, pattern) {
      dt = hm.core.Date.parse(dt);
      return hm.core.Date.format(dt, pattern || "dd.mm.yyyy HH:MM:ss");
    }});
    self = hm.core.template.helper.date.DateTimeHelper;
  })();
  (function() {
    var self;
    HM.define("hm.core.template.helper.iteration.IfEvenHelper", {extend:"hm.core.template.helper.AbstractHelper", singleton:true, name:"if_even", help:function(conditional, options) {
      if (conditional % 2 == 0) {
        return options.fn(this);
      } else {
        return options.inverse(this);
      }
    }});
    self = hm.core.template.helper.iteration.IfEvenHelper;
  })();
  (function() {
    var self;
    HM.define("hm.core.template.helper.text.CropText", {extend:"hm.core.template.helper.AbstractHelper", singleton:true, name:"cropText", help:function(text, length) {
      if (typeof length === "object") {
        return hm.core.DOM.cropTags(text);
      }
      var text = hm.core.DOM.cropTags(text);
      if (text.length <= length) {
        return text;
      }
      return text.slice(0, length) + "...";
    }});
    self = hm.core.template.helper.text.CropText;
  })();
  (function() {
    var self;
    HM.define("hm.core.template.helper.translate.TranslateHelper", {extend:"hm.core.template.helper.AbstractHelper", singleton:true, name:"_", help:function(text) {
      return HM._(text);
    }});
    self = hm.core.template.helper.translate.TranslateHelper;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.ClassNameSpace", {config:{ns:"", scope:null, $el:null}, __construct:function() {
      var me = this, config = me.config;
      me._ns = config.ns;
      me._scope = config.scope || me;
      me.setEl(config.$el);
      var result = me.getClass.bind(me), proxy = ["setEl", "getClass", "find", "on", "destroy"];
      for (var i = 0, ln = proxy.length;i < ln;i++) {
        var fnName = proxy[i];
        result[fnName] = me[fnName].bind(me);
      }
      result.ns = me;
      return result;
    }, setEl:function($el) {
      this._$el = $el;
    }, getClass:function(nsPart, modifier) {
      var className = this._ns + (nsPart ? "-" + nsPart : "");
      if (modifier) {
        className += "_" + modifier;
      }
      return className;
    }, find:function(nsPart, modifier) {
      return this._$el.find("." + this.getClass(nsPart, modifier));
    }, on:function(eventName, nsPart, callBack, scope) {
      var className = this.getClass(nsPart), $el = this._$el;
      callBack = callBack.bind(scope || this._scope);
      this._$el.on(eventName, "." + className, callBack);
    }});
    self = hm.core.ui.ClassNameSpace;
  })();
  (function() {
    var self;
    var layouts = {};
    HM.define("hm.core.ui.layout.AbstractLayout", {config:{component:null, target:null}, statics:{register:function(type, className) {
      layouts[type] = className;
    }, factory:function(type, config) {
      return HM.create(layouts[type], config);
    }}, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      var config = this.config;
      this._compoent = config.component;
      this._$target = config.target;
      this._itemsCount = 0;
    }, add:function(item) {
      this._itemsCount++;
    }, remove:function(item) {
      this._itemsCount--;
      item.getEl().detach();
    }});
    self = hm.core.ui.layout.AbstractLayout;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.layout.VboxLayout", {extend:"hm.core.ui.layout.AbstractLayout", config:{}, add:function(item) {
      var add = arguments.callee;
      this.callParent(add, arguments);
      this._$target.append(item.getEl());
    }, remove:function(item) {
      var remove = arguments.callee;
      this.callParent(remove, arguments);
    }});
    hm.core.ui.layout.AbstractLayout.register("vbox", "hm.core.ui.layout.VboxLayout");
    self = hm.core.ui.layout.VboxLayout;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.List", {extend:"hm.core.ui.Component", config:{minWidth:"30px", displayField:"name", valueField:"id", collection:null, getCls:null}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this.renderList();
    }, renderList:function() {
      if (!this.config.collection) {
        throw "Для hm.ui.List не указан объект типа hm.core.Collection";
      }
      var collection = this.config.collection, ln = collection.length();
      if (!ln) {
        return;
      }
      var df = document.createDocumentFragment();
      for (var i = 0;i < ln;i++) {
        var item = document.createElement("div"), model = collection.models[i];
        item.innerHTML = model.get(this.config.displayField);
        item.hmModel = model;
        item.className = "hm-list-item";
        if (this.config.getCls) {
          var itemClassName = this.config.getCls(model);
          if (itemClassName) {
            $(item).addClass(itemClassName);
          }
        }
        df.appendChild(item);
      }
      this.getEl().append(df);
      this.getEl().bind("click", this.onClick.bind(this));
    }, onClick:function(e) {
      var target = e.target;
      while (target && !$(target).hasClass("hm-list-item")) {
        target = $(target).parent()[0];
      }
      if (!target.hmModel) {
        return;
      }
      this.fireEvent("select", this, target.hmModel);
    }});
    self = hm.core.ui.List;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.autocomplete.Autocomplete", {extend:"hm.core.ui.Component", config:{tplByClass:true, inputAttr:{}, placeholder:null, value:null, autoBlur:true, multiple:false, uiClass:null, source:[], sourceUrl:null, sourceCache:true}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var $el = this.getEl();
      if ($el[0].nodeName.toLowerCase() == "input") {
        this._input = $el;
      } else {
        this._input = $el.find("input");
      }
      this._sourceCache = {};
      this._initAutocomplete();
    }, _initAutocomplete:function() {
      var config = this.config, input = this.getInput();
      input.autocomplete({source:config.source});
      input.autocomplete("widget").addClass("hm-autocomplete-ui");
      if (config.uiClass !== null) {
        input.autocomplete("widget").addClass(config.uiClass);
      }
      var me = this;
      if (config.multiple) {
        input.autocomplete("option", "source", function(request, response) {
          response($.ui.autocomplete.filter(config.source, me.extractLast(request.term)));
        });
        input.on("autocompletefocus", function(event, ui) {
          return false;
        });
        input.on("autocompleteselect", function(event, ui) {
          var terms = me.split(this.value);
          terms.pop();
          terms.push(ui.item.value);
          terms.push("");
          this.value = terms.join(", ");
          return false;
        });
      }
    }, split:function(val) {
      return val.split(/,\s*/);
    }, extractLast:function(term) {
      return this.split(term).pop();
    }, _initEvents:function() {
      var config = this.config, input = this.getInput();
      input.on("autocompleteselect", _.bind(this._onSelect, this));
      input.on("autocompletechange", _.bind(this._onChange, this));
      input.on("autocompleteopen", _.bind(this._onOpen, this));
      this._loadSourceFn = _.bind(this._loadSource, this);
      input.on("keypress", _.bind(this._onKeypress, this));
    }, getInput:function() {
      return this._input;
    }, getValue:function() {
      return this.getInput().val();
    }, reset:function() {
      this.getInput().val("");
      this.fireEvent("change", "");
      this._blur();
    }, setSource:function(src) {
      this.getInput().autocomplete("option", "source", src);
    }, _blur:function() {
      if (!this.config.autoBlur) {
        return;
      }
      var input = this.getInput();
      setTimeout(function() {
        input.trigger("blur");
      }, 0);
    }, _onKeypress:function(e) {
      if (e.which == 13) {
        e.preventDefault();
        this._blur();
      } else {
        if (this._timeout !== undefined) {
          clearTimeout(this._timeout);
        }
        this._timeout = setTimeout(this._loadSourceFn, 1E3);
      }
    }, _onOpen:function() {
      var $el = this.getEl(), input = this.getInput(), widget = input.autocomplete("widget");
      widget.css("width", $el.outerWidth());
      widget.position({of:$el, my:"left top", collision:"flip flip", at:"left bottom"});
    }, _onSelect:function(e) {
      this._blur();
    }, _onChange:function() {
      this.fireEvent("change", this.getInput().val());
    }, _loadSource:function() {
      var sourceUrl = this.config.sourceUrl;
      if (sourceUrl !== null) {
        var input = this.getInput(), inputValue = input.val();
        if (this.config.sourceCache) {
          if (this._sourceCache[inputValue] !== undefined) {
            this.setSource(this._sourceCache[inputValue]);
            input.autocomplete("search");
            return;
          }
        }
        $.ajax({type:"POST", url:sourceUrl, data:{autocomplete:input.val()}}).done(_.bind(this._onAjaxDone, this, inputValue));
      }
    }, _onAjaxDone:function(inputValue, data) {
      if (data.source !== undefined) {
        if (this.config.sourceCache) {
          this._sourceCache[inputValue] = data.source;
        }
        this.setSource(data.source);
        this.getInput().autocomplete("search");
      }
    }});
    self = hm.core.ui.autocomplete.Autocomplete;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.autocomplete.search.Search", {extend:"hm.core.ui.autocomplete.Autocomplete", config:{}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._button = this.getEl().find(".hm-autocomplete-button");
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      var config = this.config, button = this._button, input = this._input;
      button.on("click", _.bind(this._onButtonClick, this));
      input.on("focus", _.bind(this._onFocus, this));
      input.on("blur", _.bind(this._onBlur, this));
    }, _onButtonClick:function() {
      var value = this.getValue(), button = this._button;
      if (value && button.hasClass("hm-autocomplete-button-reset")) {
        this.reset();
      } else {
        this._blur();
      }
    }, _onFocus:function(e) {
      var button = this._button;
      if (!e.isTrigger) {
        button.removeClass("hm-autocomplete-button-reset");
      }
    }, _onBlur:function(e) {
      var value = this.getValue(), button = this._button;
      if (!value) {
        button.removeClass("hm-autocomplete-button-reset");
      } else {
        button.addClass("hm-autocomplete-button-reset");
      }
    }});
    self = hm.core.ui.autocomplete.search.Search;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.badges.SubjectBadges", {extend:"hm.core.ui.Component", config:{tplByClass:true, data:null}, statics:{dialog:null}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._badgesCards = [];
      var $el = this.getEl();
      this._$iconsContainer = $el.find(".hm-subject-badges-icons");
      this._$images = this._$iconsContainer.find("img");
      this._$currentImg = this._$images.eq(0).show();
      this._$add = $el.find(".hm-subject-badges-add");
      this._$actions = $el.find(".hm-subject-badges-actions");
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this.elOn("click", ".hm-subject-badges-next", this._next);
      this.elOn("click", ".hm-subject-badges-add", this._addToPortfolio);
      this.elOn("click", "img", this._showBadgeCard);
    }, _initSlider:function() {
      if (this._sliderInited) {
        return;
      }
      var $images = this._$images;
      $images.css("display", "block");
      $images.wrap("<div></div>");
      var maxW = $images.map(function() {
        return $(this).width();
      }).get();
      maxW = Math.max.apply(Math, maxW);
      this._$iconsContainer.css("min-width", maxW);
      this._$iconsContainer.height($images.eq(0).height());
      $images.each(function() {
        $(this).css("margin-top", -$(this).height() / 2);
        $(this).css("margin-left", -$(this).width() / 2);
      });
      this._$images = $images.parent();
      this._$images.hide();
      this._$currentImg = this._$images.eq(0).show();
      this._sliderInited = true;
    }, getUrl:function() {
    }, getCurrentBadgeId:function() {
      var currentIndex = this._$currentImg.index();
      var badge_id = this.config.data[currentIndex]["badge_id"];
      return badge_id;
    }, showAction:function(text, color) {
      var me = this;
      if (this._actionResultShowTimer) {
        clearTimeout(this._actionResultShowTimer);
      }
      if (color) {
        text = '<span style="color: ' + color + '">' + text + "</span>";
      }
      this._$actions.html(text).show();
      this._actionResultShowTimer = setTimeout(function() {
        me._$actions.fadeOut();
      }, 3E3);
    }, _showBadgeCard:function(e) {
      e.preventDefault();
      var currentBadgeId = this.getCurrentBadgeId();
      if (!this._badgesCards[currentBadgeId]) {
        var url = hm.core.Url.getInstance().url({module:"subject", controller:"badge", action:"view-badge", badge_id:currentBadgeId});
        this._badgesCards[currentBadgeId] = HM.create("hm.core.ui.window.card.Card", {url:url});
      }
      this._badgesCards[currentBadgeId].show();
    }, _next:function(e) {
      e.preventDefault();
      this._initSlider();
      var current = this._$currentImg;
      var next = current.next("div");
      if (next.length == 0) {
        next = this._$images.eq(0);
      }
      current.stop().animate({left:"-100%"}, 500, function() {
        $(this).hide();
      });
      next.css("left", "200%").show().stop().animate({left:"50%"}, 500, function() {
      });
      this._$iconsContainer.stop().animate({height:next.find("img").height()}, 250, function() {
      });
      this._$currentImg = next;
    }, _addToPortfolio:function(e) {
      e.preventDefault();
      this._$add.css("visibility", "hidden");
      this.showAction("Добавляем...");
      var me = this;
      $.ajax({url:hm.core.Url.getInstance().url({module:"user", controller:"ajax", action:"badge-to-portfolio", badge_id:this.getCurrentBadgeId()})}).done(function(data) {
        me._$add.css("visibility", "visible");
        me.showAction(data[0]);
      });
    }});
    self = hm.core.ui.badges.SubjectBadges;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.badges.rating.Infoblock", {extend:"hm.core.ui.Component", config:{tplByClass:true, badgesCount:null, loadCount:5}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var $el = this.getEl();
      this._loadButton = $el.find(".hm-badges-rating-load");
      this._itemsRenderTo = $el.find(".hm-badges-rating-users-container");
      this.loadUserBadges(this.config.loadCount);
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this.elOn("click", ".hm-badges-rating-load", this._onLoadClick);
    }, loadUserBadges:function(count) {
      var badgesCount = this.config.badgesCount;
      if (badgesCount.length == 0) {
        return;
      }
      var loadBadgesCount = badgesCount.splice(0, count);
      var usersToLoad = _.map(loadBadgesCount, function(num) {
        return num.user_id;
      });
      var renderTo = this._itemsRenderTo;
      var me = this;
      $.ajax({type:"POST", url:hm.core.Url.getInstance().url({module:"user", controller:"ajax", action:"get-badges-rating-data"}), data:{usersToLoad:usersToLoad}}).done(function(data) {
        $.each(data, function(index) {
          var userData = this;
          userData["badges_count"] = loadBadgesCount[index]["badges_count"];
          HM.create("hm.core.ui.badges.rating.InfoblockItem", {renderTo:renderTo, data:userData});
          if (badgesCount.length != 0) {
            me._loadButton.css("visibility", "visible").show();
          } else {
            me._loadButton.hide();
          }
        });
      });
    }, _onLoadClick:function() {
      this._loadButton.css("visibility", "hidden");
      this.loadUserBadges(this.config.loadCount);
    }});
    self = hm.core.ui.badges.rating.Infoblock;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.badges.rating.InfoblockItem", {extend:"hm.core.ui.Component", config:{tplByClass:true, data:null}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._badgesCards = [];
    }, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      var badgesContainer = this.getEl().find(".hm-badges-rating-user-badges");
      var table = badgesContainer.find("table");
      if (badgesContainer.width() < table.width() + 10) {
        table.wrap('<div class="hm-badges-rating-user-scrollable"></div>');
        badgesContainer.find(".hm-badges-rating-scroll-right, .hm-badges-rating-scroll-left").show();
      }
      this._$scrollable = badgesContainer.find(".hm-badges-rating-user-scrollable");
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this.elOn("click", ".hm-badges-rating-scroll-right", this._onClickRight);
      this.elOn("click", ".hm-badges-rating-scroll-left", this._onClickLeft);
      this.elOn("click", ".hm-badges-rating-user-name", this._onClickName);
      this.elOn("click", ".hm-badges-rating-user-badge", this._showBadgeCard);
    }, _showBadgeCard:function(e) {
      e.preventDefault();
      var badgeId = $(e.currentTarget).data("badge-id");
      if (!this._badgesCards[badgeId]) {
        var url = hm.core.Url.getInstance().url({module:"subject", controller:"badge", action:"view-badge", badge_id:badgeId});
        this._badgesCards[badgeId] = HM.create("hm.core.ui.window.card.Card", {url:url});
      }
      this._badgesCards[badgeId].show();
    }, _onClickRight:function(e) {
      this._$scrollable.animate({scrollLeft:"+=220"}, 300);
    }, _onClickLeft:function(e) {
      this._$scrollable.animate({scrollLeft:"-=220"}, 300);
    }, _onClickName:function(e) {
      e.preventDefault();
      if (!this._card) {
        this._card = HM.create("hm.core.ui.window.card.Card", {url:this.config.data.url});
      }
      this._card.show();
    }});
    self = hm.core.ui.badges.rating.InfoblockItem;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.calendar.DateRangeSwitcher", {extend:"hm.core.ui.Component", config:{tpl:"hm/core/ui/calendar/DateRangeSwitcher", from:{time:0, mask:"dd.mm.yyyy", editable:true, relative:true, visible:true}, to:{time:null, mask:"dd.mm.yyyy", editable:true, relative:true, visible:true}, step:null, rangeName:null, url:null, classNameSpace:"hm-calendar-dateRangeSwitcher"}, __construct:function() {
      var __construct = arguments.callee;
      var config = this.config, protoConfig = hm.core.ui.calendar.DateRangeSwitcher.prototype.config;
      config.from = $.extend({}, protoConfig.from, config.from);
      config.to = $.extend({}, protoConfig.to, config.to);
      this.callParent(__construct, arguments);
    }, _init:function() {
      var _init = arguments.callee;
      var config = this.config;
      this._setFrom(config.from.time);
      if (config.to.time !== null) {
        this._setTo(config.to.time);
      } else {
        this._setTo(config.from.time);
      }
      this._initStep(config.step);
      this.callParent(_init, arguments);
      var ns = this._ns;
      this._$rangeName = ns.find("name");
      this._$rangeFrom = ns.find("from");
      this._$rangeTo = ns.find("to");
      if (config.from.editable) {
        this._$rangeFrom.addClass(config.classNameSpace + "-from-editable");
      }
      if (config.to.editable) {
        this._$rangeTo.addClass(config.classNameSpace + "-to-editable");
      }
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      var ns = this._ns;
      ns.on("click", "prev", this._onClickPrev, this);
      ns.on("click", "next", this._onClickNext, this);
      ns.on("click", "from-editable", this._onClickFrom, this);
      ns.on("click", "to-editable", this._onClickTo, this);
      this._openUrlFn = _.bind(this._openUrl, this);
    }, _initStep:function(step) {
      if (step === null) {
        this._step = this.getRangeTime();
      } else {
        this._step = step;
      }
    }, _onClickFrom:function(e) {
      this._onDatePickerClose = this._onCloseFrom;
      this.showDatePicker(e.target, this.getFrom());
    }, _onClickTo:function(e) {
      this._onDatePickerClose = this._onCloseTo;
      this.showDatePicker(e.target, this.getTo());
    }, _onCloseFrom:function() {
      var dpDate = this.getDatePickerDate(), fromDate = this.getFrom();
      dpDate.setHours(fromDate.getHours());
      dpDate.setMinutes(fromDate.getMinutes());
      dpDate.setSeconds(fromDate.getSeconds());
      this.setFrom(dpDate);
    }, _onCloseTo:function() {
      var dpDate = this.getDatePickerDate(), toDate = this.getTo();
      dpDate.setHours(toDate.getHours());
      dpDate.setMinutes(toDate.getMinutes());
      dpDate.setSeconds(toDate.getSeconds());
      this.setTo(dpDate);
    }, _onDatePickerSelect:function() {
      this._onDatePickerClose();
    }, _onDatePickerClose:function() {
    }, _onClickPrev:function(e) {
      e.preventDefault();
      this._switchOnSteps(-1);
    }, _onClickNext:function(e) {
      e.preventDefault();
      this._switchOnSteps(1);
    }, _onChange:function() {
      var config = this.config;
      this._$rangeName.html(this.getRangeName());
      this._$rangeFrom.html(this.getFrom(config.from.mask));
      this._$rangeTo.html(this.getTo(config.to.mask));
      this.fireEvent("change", this);
      if (this._openUrlTimeout !== undefined) {
        clearTimeout(this._openUrlTimeout);
      }
      this._openUrlTimeout = setTimeout(this._openUrlFn, 1E3);
    }, _openUrl:function() {
      var url = this.config.url;
      if (url !== null) {
        var from = encodeURIComponent(this.getFrom("yyyy-mm-dd HH:MM:ss")), to = encodeURIComponent(this.getTo("yyyy-mm-dd HH:MM:ss"));
        url = url + "/from/" + from + "/to/" + to;
        window.location.href = url;
      }
    }, getDatePicker:function() {
      if (this._datePicker === undefined) {
        this._datePicker = $('<input class="' + this.config.classNameSpace + '-datePicker" type="text"/>').datepicker({showAnim:"", onSelect:_.bind(this._onDatePickerSelect, this)});
        this._datePicker.appendTo("body");
      }
      return this._datePicker;
    }, getDatePickerDate:function() {
      return this.getDatePicker().datepicker("getDate");
    }, showDatePicker:function($el, date) {
      var datePicker = this.getDatePicker();
      datePicker.position({my:"left top", at:"left bottom", collision:"none flip", of:$el});
      datePicker.datepicker("setDate", date);
      datePicker.datepicker("show");
    }, getRangeName:function() {
      var rangeName = this.config.rangeName;
      if (rangeName !== null) {
        if (_.isFunction(this.config.rangeName)) {
          return rangeName(this.getFrom(), this.getTo());
        } else {
          return rangeName;
        }
      }
      return this.getFrom("mmmm");
    }, setRange:function(from, to) {
      this._setFrom(from);
      this._setTo(to);
      this._onChange();
    }, getRangeTime:function() {
      return Math.floor((this.getTo().getTime() - this.getFrom().getTime()) / 1E3);
    }, getFrom:function(mask) {
      if (mask !== undefined) {
        return hm.core.Date.format(this._from, mask, false);
      }
      return this._from;
    }, setFrom:function(date) {
      if (this.config.to.relative) {
        var rangeTime = this.getRangeTime();
        this._setTo(Math.floor(date.getTime() / 1E3) + rangeTime);
      }
      this._setFrom(date);
      this._onChange();
    }, getTo:function(mask) {
      if (mask !== undefined) {
        return hm.core.Date.format(this._to, mask, false);
      }
      return this._to;
    }, setTo:function(date) {
      if (this.config.from.relative) {
        var rangeTime = this.getRangeTime();
        this._setFrom(Math.floor(date.getTime() / 1E3) - rangeTime);
      }
      this._setTo(date);
      this._onChange();
    }, _switchOnSteps:function(stepsCount) {
      var offset = this._step * stepsCount, from = this.getFrom(), to = this.getTo();
      from.setSeconds(from.getSeconds() + offset);
      to.setSeconds(to.getSeconds() + offset);
      this.setRange(from, to);
    }, _setFrom:function(date) {
      this._from = hm.core.Date.parse(date);
    }, _setTo:function(date) {
      this._to = hm.core.Date.parse(date);
    }});
    self = hm.core.ui.calendar.DateRangeSwitcher;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.container.layout.AbstractLayout", {extend:"hm.core.ui.Component", addItems:function(items) {
    }});
    self = hm.core.ui.container.layout.AbstractLayout;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.container.layout.TabLayout", {extend:"hm.core.ui.container.layout.AbstractLayout", addItems:function(items) {
    }});
    self = hm.core.ui.container.layout.TabLayout;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.contextmenu.ContextMenu", {extend:"hm.core.ui.Component", config:{tpl:"hm/core/ui/contextmenu/ContextMenu", renderTo:"body", selector:null, items:[{title:"Test1"}, {title:"Test2"}]}, statics:{menus:[]}, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      hm.core.ui.contextmenu.ContextMenu.menus.push(this);
    }, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._initItems();
    }, _initEvents:function() {
      var selector = this.config.selector;
      if (selector) {
        $(document).on("contextmenu click", selector, _.bind(this._onContextmenu, this, null));
      }
      $(document).on("click", _.bind(this.hide, this));
    }, _initItems:function() {
      if (!this._items) {
        this._items = [];
      }
      _.each(this.config.items, this._initItem, this);
    }, _initItem:function(value, key, list) {
      var contextMenuItem = HM.create("hm.core.ui.contextmenu.ContextMenuItem", {contextMenu:this, title:value.title, callback:value.callback, data:value.data, listeners:{scope:this, click:this._onItemClick}});
      this._items.push(contextMenuItem);
      this.getEl().append(contextMenuItem.getEl());
    }, _onItemClick:function(e, item) {
      this.fireEvent("itemClick", item);
    }, _onContextmenu:function(contextTarget, e) {
      if (e.type == "click" && !e.ctrlKey) {
        return;
      }
      e.stopPropagation();
      e.preventDefault();
      var menus = hm.core.ui.contextmenu.ContextMenu.menus;
      for (var i = 0, ln = menus.length;i < ln;i++) {
        var menu = menus[i];
        if (menu !== this) {
          menu.hide();
        }
      }
      if (contextTarget) {
        this._contextTarget = contextTarget;
      } else {
        this._contextTarget = $(e.currentTarget);
      }
      var $el = this.getEl();
      $el.css({top:e.pageY, left:e.pageX});
      setTimeout(_.bind(this.show, this), 0);
    }, getContextTarget:function() {
      return this._contextTarget;
    }, hide:function() {
      var hide = arguments.callee;
      this._contextTarget = null;
      this.callParent(hide, arguments);
    }, getItems:function() {
      return this._items;
    }, bindTo:function(el, contextTarget) {
      var $el;
      if (el instanceof jQuery) {
        $el = el;
      } else {
        if (hm.core.DOM.isNode(el)) {
          $el = $(el);
        } else {
          throw new Error("Передан некорректный параметр el");
        }
      }
      $el.on("contextmenu click", _.bind(this._onContextmenu, this, contextTarget));
    }});
    self = hm.core.ui.contextmenu.ContextMenu;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.contextmenu.ContextMenuItem", {extend:"hm.core.ui.Component", config:{tplByClass:true, contextMenu:null, title:"Title", data:null, callback:null}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
    }, _initEvents:function() {
      this.elOn("click", null, this._onClick);
    }, _onClick:function(e) {
      this.fireEvent("click", this);
      if (this.config.callback) {
        this.config.callback(this, this.getContextMenu().getContextTarget());
      }
    }, getData:function() {
      return this.config.data;
    }, getTitle:function() {
      return this.config.title;
    }, getContextMenu:function() {
      return this.config.contextMenu;
    }});
    self = hm.core.ui.contextmenu.ContextMenuItem;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.form.element.AbstractElement", {extend:"hm.core.ui.Component", config:{tpl:"hm/core/ui/form/element/AbstractElement", inputTpl:"", label:"", labelVisible:true, value:"", name:"", isMobileView:false, height:25, width:"auto"}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var config = this.config;
      if (config.inputTpl) {
        this._$elInput = this._renderTemplate(config.inputTpl);
        this.getEl().find(".hm-form-element-container").append(this._$elInput);
      }
      if (config.isMobileView) {
        this.getEl().addClass("hm-form-element-mobile");
      }
    }, getValue:function() {
      return this.value;
    }, getName:function() {
      return this.name;
    }, getLabel:function() {
      return this.label;
    }});
    self = hm.core.ui.form.element.AbstractElement;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.form.element.inline_editor.InlineEditor", {extend:"hm.core.ui.Component", config:{el:"", saveUrl:""}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var $el = this._$el;
      $el.addClass("hm-ui-InlineEditor");
      $el.attr("contenteditable", "true");
    }, _renderTo:function() {
      var _renderTo = arguments.callee;
      this.callParent(_renderTo, arguments);
      this.setText(this._$elRenderTo.text(), true);
      this._$elRenderTo.text("");
    }, _initEvents:function() {
      this.getEl().on("blur", this.onBlur.bind(this));
    }, setText:function(text, notSave) {
      this.getEl().text(text);
      if (text !== this.text && !notSave) {
        $.ajax({url:this.config.saveUrl, type:"post", success:this.onSaveSuccess.bind(this), error:this.onSaveFailure.bind(this), data:{text:text}});
      }
      this._text = text;
    }, onBlur:function() {
      this.setText(this.getEl().text());
    }, onSaveSuccess:function() {
    }, onSaveFailure:function() {
      elsHelpers.alert(HM._("Сообщение не удалось сохранить! Пожалуйста, повторите попытку позже."));
    }});
    self = hm.core.ui.form.element.inline_editor.InlineEditor;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.form.element.select.AbstractSelect", {extend:"hm.core.ui.Component", config:{tpl:"hm/core/ui/form/element/select/AbstractSelect", title:"Title", titleRenderer:null, name:"", value:null, titleFixed:false, maxMenuHeight:300, minMenuHeight:200, inline:false}, CLASS_OPENED:"hm-form-select-button-menuOpened", _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._initInput();
      var $el = this.getEl();
      this._$elTitle = $el.find(".hm-form-select-button-title");
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this.elOn("click", null, this._onTriggerClick);
    }, _initInput:function() {
      this._$elInput = this._createInput();
    }, _needCloseMenuAfterChange:function() {
      return true;
    }, _getInputName:function() {
      return this.config.name;
    }, _createInput:function(name) {
      var $input = $(document.createElement("input"));
      $input.attr("type", "hidden");
      $input.attr("name", name || this._getInputName());
      this.getEl().append($input);
      return $input;
    }, _createList:function() {
      throw new Error("В компоненте не реализован метод _createList()");
    }, _getList:function() {
      if (!this._list) {
        this._list = this._createList();
        this._list.on("change", this._onValueChange, this);
        this._list.on("hide", this._onMenuClosed, this);
      }
      return this._list;
    }, _closeMenu:function() {
      if (!this._menuOpened) {
        return false;
      }
      var list = this._getList(), $elList = list.getEl(), elList = $elList[0];
      hm.core.PopupManager.hide(elList);
      return true;
    }, setTitle:function(title, isHtml) {
      var config = this.config;
      if (config.titleFixed) {
        return;
      }
      if (isHtml) {
        this._$elTitle.html(title);
      } else {
        this._$elTitle.text(title);
      }
    }, getTitle:function(asHtml) {
      if (asHtml) {
        return this._$elTitle.html();
      }
      return this._$elTitle.text();
    }, getValue:function() {
      throw new Error("Не реализован метод getValue()");
    }, setValue:function() {
      throw new Error("Не реализован метод setValue()");
    }, _onTriggerClick:function(e) {
      e.stopPropagation();
      var list = this._getList(), $menu = list.getEl(), menu = $menu[0];
      if (this._closeMenu()) {
        return;
      }
      list.show();
      var $el = this.getEl();
      $el.addClass(this.CLASS_OPENED);
      var config = this.config, offset = $el.offset(), scrollTop = HM.$window().scrollTop(), $body = HM.$body(), bodyHeight = $body.height(), buttonHeight = $el.height(), availableTop = offset.top - scrollTop, availableBottom = bodyHeight - availableTop - buttonHeight, spaceHeight = 10, menuContentHeight = list.getContentHeight(), maxMenuHeight = config.maxMenuHeight, minMenuHeight = config.minMenuHeight;
      var menuPosition = "bottom", menuHeight = 0, menuStyle = {top:0, left:offset.left, minWidth:$el.width()};
      if (availableBottom < minMenuHeight && availableTop > availableBottom) {
        menuPosition = "top";
      }
      var availableHeight = menuPosition === "bottom" ? availableBottom : availableTop, menuHeight = menuContentHeight;
      if (menuContentHeight > availableHeight) {
        menuHeight = availableHeight - 10;
      }
      if (menuHeight > maxMenuHeight) {
        menuHeight = maxMenuHeight;
      }
      if (menuPosition === "bottom") {
        menuStyle.top = offset.top + buttonHeight + 2;
      } else {
        menuStyle.top = offset.top - menuHeight - 2;
      }
      $menu.css(menuStyle);
      list.setHeight(menuHeight);
      this._menuOpened = true;
    }, menuOpened:function() {
      return this._menuOpened;
    }, _onMenuClosed:function() {
      this._menuOpened = false;
      this._$el.removeClass(this.CLASS_OPENED);
    }, _onValueChange:function(e, value, list) {
      if (this._needCloseMenuAfterChange()) {
        this._closeMenu();
      }
      this.setValue(value);
      this.fireEvent("change", value, this);
    }});
    self = hm.core.ui.form.element.select.AbstractSelect;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.form.element.select.DateSelect", {extend:"hm.core.ui.form.element.select.AbstractSelect", config:{}, _init:function() {
      var _init = arguments.callee;
      var config = this.config;
      this.callParent(_init, arguments);
      if (config.value !== null) {
        this.setValue(config.value);
      }
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
    }, _initInput:function() {
      this._$elFromInput = this._createInput("from");
      this._$elToInput = this._createInput("to");
    }, _createList:function() {
      return HM.create("hm.core.ui.form.element.select.list.DateSelectList", {value:this.getValue()});
    }, getValue:function() {
      return{from:this._$elFromInput.val(), to:this._$elToInput.val()};
    }, setValue:function(value) {
      var HmDate = hm.core.Date, from = HmDate.parse(value.from), viewFrom = HmDate.format(from, "dd.mm.yyyy"), valueFrom = HmDate.format(from, "yyyy-mm-dd"), to = HmDate.parse(value.to), viewTo = HmDate.format(to, "dd.mm.yyyy"), valueTo = HmDate.format(to, "yyyy-mm-dd");
      this._$elFromInput.val(valueFrom);
      this._$elToInput.val(valueTo);
      this.setTitle(viewFrom + "&nbsp;-&nbsp;" + viewTo, true);
    }});
    self = hm.core.ui.form.element.select.DateSelect;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.form.element.select.Select", {extend:"hm.core.ui.form.element.select.AbstractSelect", config:{store:null, data:null, titleField:"title", valueField:"id", showFilter:false, itemFormatter:null}, _init:function() {
      var _init = arguments.callee;
      var config = this.config, store = config.store;
      if (!(store instanceof hm.core.data.Store)) {
        store = HM.create("hm.core.data.Store", {proxy:{type:"memory", reader:"simple_json"}, data:this._getInitData(), pagination:false});
      }
      this._store = store;
      this._storeReady = false;
      this.callParent(_init, arguments);
      if (config.value !== null) {
        this.setValue(config.value);
      }
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this._store.on("data_loaded", this._onDataLoaded, this);
    }, _createList:function() {
      var config = this.config;
      return HM.create("hm.core.ui.form.element.select.list.SelectList", {store:this._store, titleField:config.titleField, valueField:config.valueField, showFilter:config.showFilter, itemFormatter:config.itemFormatter});
    }, _getInitData:function() {
      return this.config.data;
    }, setValue:function(value) {
      this._$elInput.val(value);
      var config = this.config, store = this._store;
      var previousRecords = store.findByKey("checked", true);
      for (var i = 0;i < previousRecords.length;i++) {
        previousRecords[i].set("checked", false);
      }
      var records = store.findByKey(config.valueField, value);
      if (!records.length) {
        this.setTitle(this.config.title);
        return;
      }
      var record = records[0], title = record.get(config.titleField);
      if (config.titleRenderer instanceof Function) {
        this._$elTitle.html(config.titleRenderer(title, record, this));
      } else {
        this.setTitle(title);
      }
    }, getValue:function() {
      return this._$elInput.val();
    }, getStore:function() {
      return this._store;
    }, _onDataLoaded:function(e, store, items, method) {
      this._storeReady = true;
      this.setValue(this.getValue());
    }});
    self = hm.core.ui.form.element.select.Select;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.form.element.select.MultiSelect", {extend:"hm.core.ui.form.element.select.Select", config:{}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._value = [];
      var initData = this._getInitData(), checkedValues = [];
      for (var i = 0, ln = initData.length;i < ln;i++) {
        if (initData[i]["checked"]) {
          checkedValues.push(initData[i]["id"]);
        }
      }
      this.setValue(checkedValues);
    }, _getInputName:function() {
      return this.config.name + "[]";
    }, _initInput:function() {
      this._inputs = {};
    }, _createList:function() {
      var config = this.config;
      return HM.create("hm.core.ui.form.element.select.list.MultiSelectList", {store:this._store, titleField:config.titleField, valueField:config.valueField, showFilter:config.showFilter});
    }, _needCloseMenuAfterChange:function() {
      return false;
    }, _destroyInputs:function() {
      var inputs = this._inputs;
      for (var i in inputs) {
        if (!inputs.hasOwnProperty(i)) {
          continue;
        }
        inputs[i].remove();
      }
      this._inputs = {};
    }, setValue:function(values) {
      this._destroyInputs();
      var config = this.config, store = this._store, inputs = this._inputs, title = [], records = [];
      this._value = values;
      for (var i = 0;i < values.length;i++) {
        var value = values[i], valueRecords = store.findByKey(config.valueField, value), valueRecord = valueRecords[0];
        if (!valueRecord) {
          continue;
        }
        records.push(valueRecord);
        title.push(valueRecord.get(config.titleField));
        if (!inputs.hasOwnProperty(value)) {
          inputs[value] = this._createInput();
        }
        inputs[value].val(value);
      }
      var elementsCount = "";
      if (title.length > 1) {
        elementsCount = "(" + title.length + ") ";
      }
      title = elementsCount + title.join(", ");
      if (config.titleRenderer instanceof Function) {
        this._$elTitle.html(config.titleRenderer(title, records, this));
      } else {
        this.setTitle(title);
      }
      this._needMenuRefreshOnClose = true;
    }, getValue:function() {
      return this._value;
    }, _onMenuClosed:function() {
      var _onMenuClosed = arguments.callee;
      this.callParent(_onMenuClosed, arguments);
      if (this._needMenuRefreshOnClose) {
        this._store.refresh();
      }
      this._needMenuRefreshOnClose = false;
    }});
    self = hm.core.ui.form.element.select.MultiSelect;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.form.element.select.list.AbstractSelectList", {extend:"hm.core.ui.Component", config:{tpl:"hm/core/ui/form/element/select/list/AbstractSelectList", showFilter:false}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._$elFilterWrapper = this.getEl().find(".hm-form-select-list-filter");
      this._$elContWrapper = this.getEl().find(".hm-form-select-list-container-wrapper");
      this._$elCont = this._$elContWrapper.find(".hm-form-select-list-container");
      this._initList();
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this._initMagicScroll(this._$elContWrapper);
    }, _initMagicScroll:function($scrollEl) {
      var wheelEventName;
      if ("WheelEvent" in window) {
        wheelEventName = "wheel";
      } else {
        if ("onmousewheel" in document) {
          wheelEventName = "mousewheel";
        } else {
          wheelEventName = "MozMousePixelScroll";
        }
      }
      $scrollEl.on(wheelEventName, this._onMouseWheel.bind(this, wheelEventName));
    }, _renderList:function() {
      throw new Error("Не реализован метод _renderList()");
    }, _initList:function() {
    }, _triggerChangeEvent:function() {
      this._clearChangeEvent();
      this._onChangeTimeoutTimer = setTimeout(this._onChangeTimeout.bind(this), 0);
    }, _clearChangeEvent:function() {
      if (!this._onChangeTimeoutTimer) {
        return;
      }
      clearTimeout(this._onChangeTimeoutTimer);
      delete this._onChangeTimeoutTimer;
    }, getFilterHeight:function() {
      return this._$elFilterWrapper.height();
    }, getContainerHeight:function() {
      return this._$elCont.height();
    }, getContentHeight:function() {
      return this.getContainerHeight() + this.getFilterHeight();
    }, setHeight:function(height) {
      var wrapperHeight = height - this.getFilterHeight(), contHeight = this.getContainerHeight();
      if (wrapperHeight < contHeight) {
        this._$elContWrapper.css({maxHeight:wrapperHeight, overflowY:"scroll", overflowX:"hidden"});
      } else {
        this._$elContWrapper.css({maxHeight:wrapperHeight, overflowY:"hidden", overflowX:"hidden"});
      }
    }, getValue:function() {
      throw new Error("Не реализован метод getValue()");
    }, setValue:function() {
      throw new Error("Не реализован метод setValue()");
    }, show:function() {
      hm.core.PopupManager.show({el:this._$el[0], onClose:this._onHidden, scope:this, hideOther:true});
    }, hide:function() {
      hm.core.PopupManager.hide(this._$el[0]);
    }, _onMouseWheel:function(eventType, e) {
      var event = e.originalEvent, deltaY = event.deltaY || (event.detail || event.wheelDelta);
      if (eventType === "mousewheel") {
        deltaY = -deltaY;
      }
      if (!deltaY) {
        return;
      }
      var $contWrapper = this._$elContWrapper, scrollTop = $contWrapper.scrollTop(), elHeight = $contWrapper.height(), contentHeight = this._$elCont.height();
      if (deltaY < 0 && scrollTop === 0) {
        e.preventDefault();
      }
      if (deltaY > 0 && scrollTop + elHeight >= contentHeight) {
        e.preventDefault();
      }
    }, _onChangeTimeout:function() {
      if (this._onChangeTimeoutTimer) {
        delete this._onChangeTimeoutTimer;
      }
      this.fireEvent("change", this.getValue(), this);
    }, _onHidden:function() {
      this.fireEvent("hide", this);
    }});
    self = hm.core.ui.form.element.select.list.AbstractSelectList;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.form.element.select.list.DateSelectList", {extend:"hm.core.ui.form.element.select.list.AbstractSelectList", config:{value:null}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._$elInputFrom = this._$elCont.find('input[name="from"]');
      this._$elInputTo = this._$elCont.find('input[name="to"]');
      var config = this.config, value = config.value, HmDate = hm.core.Date, from = HmDate.parse(value.from), viewFrom = HmDate.format(from, "dd.mm.yyyy"), to = HmDate.parse(value.to), viewTo = HmDate.format(to, "dd.mm.yyyy");
      this._$elInputFrom.val(viewFrom);
      this._$elInputTo.val(viewTo);
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this._$elInputFrom.on("change", this._onInputChange.bind(this));
      this._$elInputTo.on("change", this._onInputChange.bind(this));
      this.elOn("click", ".hm-form-select-list-dateSelect-item-input", this._onInputClick);
    }, _renderList:function() {
      this._$elCont.html(this._renderTemplate({tpl:"hm/core/ui/form/element/select/list/item/DateSelectItem", viewData:{inputs:{from:{caption:HM._("с"), name:"from"}, to:{caption:HM._("по"), name:"to"}}}, returnString:true}));
    }, _initList:function() {
      this._renderList();
    }, _getTooltip:function() {
      if (!this._tooltip) {
        this._tooltip = HM.create("hm.core.ui.form.element.select.list.tooltip.DateTooltip", {listeners:{select:this._onSelectDate, scope:this}});
      }
      return this._tooltip;
    }, getValue:function() {
      return{from:this._$elInputFrom.val(), to:this._$elInputTo.val()};
    }, setValue:function(value) {
      if (this._$elInputFrom.val() !== value.from) {
        this._$elInputFrom.val(value.from);
        this._modified = true;
      }
      if (this._$elInputTo.val() !== value.to) {
        this._$elInputTo.val(value.to);
        this._modified = true;
      }
    }, show:function() {
      var show = arguments.callee;
      this.callParent(show, arguments);
      this._modified = false;
    }, _onInputChange:function() {
      this._triggerChangeEvent();
    }, _getInput:function(name) {
      if (name === "from") {
        return this._$elInputFrom;
      }
      if (name === "to") {
        return this._$elInputTo;
      }
    }, _onInputClick:function(e) {
      e.preventDefault();
      var tooltip = this._getTooltip(), $itemEl = $(e.currentTarget), $img = $itemEl.find("img"), name = $itemEl.data("name"), position = $img.offset();
      var date = hm.core.Date.parse(this._getInput(name).val());
      tooltip.hide();
      tooltip.setDate(date);
      tooltip.showAt(position.left + $img.width() / 2, position.top + $img.height() + 5);
      this._tooltipName = name;
    }, _onHidden:function() {
      var _onHidden = arguments.callee;
      var tooltip = this._tooltip;
      if (tooltip) {
        tooltip.hide();
      }
      if (this._modified) {
        this._triggerChangeEvent();
      }
      this.callParent(_onHidden, arguments);
    }, _onSelectDate:function(e, date) {
      var value = this.getValue();
      value[this._tooltipName] = date;
      this.setValue(value);
      this._tooltip.hide();
    }});
    self = hm.core.ui.form.element.select.list.DateSelectList;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.form.element.select.list.SelectList", {extend:"hm.core.ui.form.element.select.list.AbstractSelectList", config:{store:null, titleField:"title", valueField:"id", itemFormatter:null}, _init:function() {
      var _init = arguments.callee;
      this._store = this.config.store;
      this.callParent(_init, arguments);
      this._$elFilter = this._$el.find(".hm-form-select-list-filter input");
      this._filterValue = "";
      if (this.config.showFilter) {
        this._filter = HM.create("hm.core.data.filter.LikeFilter", {field:this.config.titleField, value:this._filterValue});
        this._store.addFilter(this._filter);
      }
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      var store = this._store;
      store.on("data_filtered", this._onDataFiltered, this);
      store.on("item_changed", this._onRecordChange, this);
      this.elOn("click", ".hm-form-select-list-item", this._onClickItem);
      this._$elFilter.on("change keyup", this._onFilterChanged.bind(this));
      this._store.refresh();
    }, _initList:function() {
    }, _renderList:function(items) {
      var itemsCount = items.length, config = this.config, titleField = config.titleField, valueField = config.valueField, html = "", i, recordsIndex = {};
      for (i = 0;i < itemsCount;i++) {
        var record = items[i], recordId = record.getIndex();
        html += this._renderListItem(recordId, record.get(titleField), record);
        recordsIndex[recordId] = record;
      }
      this._recordsIndex = recordsIndex;
      this._$elCont.html(html);
    }, _renderListItem:function(recordId, titleField, record) {
      var itemFormatter = this.config.itemFormatter, needEscape = true;
      if (itemFormatter) {
        titleField = itemFormatter(record);
        needEscape = false;
      }
      return this._renderTemplate({tpl:"hm/core/ui/form/element/select/list/item/SimpleSelectItem", viewData:{recordId:recordId, title:titleField, needEscape:needEscape}, returnString:true});
    }, _reset:function(without) {
      var records = this._store.findByKey("checked", true), HmArray = hm.core.Array;
      if (!without) {
        without = [];
      }
      if (!(without instanceof Array)) {
        without = [without];
      }
      for (var i = 0, ln = records.length;i < ln;i++) {
        var record = records[i];
        if (HmArray.indexOf(without, record) !== -1) {
          continue;
        }
        record.set("checked", false);
      }
    }, setValue:function(value) {
      var record = this.getRecordByValue(value);
      if (!record) {
        return;
      }
      record.set("checked", true);
    }, getRecordByValue:function(value) {
      var record = this._store.findByKey(this.config.valueField, value);
      if (!record.length) {
        return false;
      }
      return record[0];
    }, getValue:function() {
      var records = this._store.findByKey("checked", true), valueFiled = this.config.valueField;
      if (!records.length) {
        return;
      }
      return records[0].get(valueFiled);
    }, setHeight:function(height) {
      var setHeight = arguments.callee;
      if (this._$elFilter.val()) {
        return;
      }
      return this.callParent(setHeight, arguments);
    }, _onDataFiltered:function(e, store, items, method) {
      this._renderList(items);
    }, _onClickItem:function(e) {
      e.preventDefault();
      var $itemEl = $(e.currentTarget), recordId = $itemEl.data("id"), record = this._store.getRecordById(recordId);
      record.set("checked", true);
    }, _onRecordChange:function(e, store, record, name, value) {
      if (name !== "checked") {
        return;
      }
      if (!value) {
        return;
      }
      this._reset(record);
      this._triggerChangeEvent();
    }, _onFilterChanged:function(e) {
      var value = this._$elFilter.val();
      if (value === this._filterValue) {
        return;
      }
      this._filterValue = value;
      this._filter.setValue(value);
      this._store.filter();
    }});
    self = hm.core.ui.form.element.select.list.SelectList;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.form.element.select.list.MultiSelectList", {extend:"hm.core.ui.form.element.select.list.SelectList", config:{}, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
    }, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
    }, _renderList:function(items) {
      var _renderList = arguments.callee;
      var checkedItems = this._store.findByKey("checked", true), newItems = [], checkedItemIds = {};
      for (var i = 0;i < checkedItems.length;i++) {
        var checkedItem = checkedItems[i];
        newItems.push(checkedItem);
        checkedItemIds[checkedItem.getIndex()] = checkedItem;
      }
      for (var i = 0;i < items.length;i++) {
        var item = items[i], itemId = item.getIndex();
        if (checkedItemIds.hasOwnProperty(itemId)) {
          delete checkedItemIds[itemId];
          continue;
        }
        newItems.push(item);
      }
      this._visibleFilteredItemIds = checkedItemIds;
      this.callParent(_renderList, [newItems]);
    }, _renderListItem:function(recordId, titleField, record) {
      return this._renderTemplate({tpl:"hm/core/ui/form/element/select/list/item/MultiSelectItem", viewData:{recordId:recordId, title:titleField, checked:record.get("checked")}, returnString:true});
    }, setValue:function(values) {
      for (var i = 0, ln = values.length;i < ln;i++) {
        var record = this.getRecordByValue(values[i]);
        if (!record) {
          continue;
        }
        record.set("checked", true);
      }
    }, getValue:function() {
      var records = this._store.findByKey("checked", true), values = [], valueFiled = this.config.valueField;
      for (var i = 0, ln = records.length;i < ln;i++) {
        values.push(records[i].get(valueFiled));
      }
      return values;
    }, CLASS_CHECKED:"hm-form-select-list-item-withCheckbox-checked", _onClickItem:function(e) {
      e.preventDefault();
      var $itemEl = $(e.currentTarget), recordId = $itemEl.data("id"), record = this._store.getRecordById(recordId), newValue = !record.get("checked");
      record.set("checked", newValue);
      if (!this._visibleFilteredItemIds || newValue) {
        return;
      }
      if (this._visibleFilteredItemIds.hasOwnProperty(recordId)) {
        delete this._visibleFilteredItemIds[recordId];
        $itemEl.remove();
      }
    }, _onRecordChange:function(e, store, record, name, value) {
      if (name !== "checked") {
        return;
      }
      var item = this._$elCont.find('> .hm-form-select-list-item[data-id="' + record.getIndex() + '"]');
      if (value) {
        item.addClass(this.CLASS_CHECKED);
      } else {
        item.removeClass(this.CLASS_CHECKED);
      }
      this.fireEvent("change", this.getValue(), this);
    }});
    self = hm.core.ui.form.element.select.list.MultiSelectList;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.form.helper.MultiSet", {extend:"hm.core.ui.Component", config:{el:null, isSingle:false}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._addRow();
      if (this.config.isSingle) {
        var $rows = this._getAllRows();
        if ($rows.length == 1) {
          $rows.find('input[type="hidden"]').val(1);
          $rows.find('input[type="checkbox"]').attr("checked", "checked");
        }
      }
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      var $el = this.getEl();
      $el.on("keypress change", ".multiset-trigger", this._onItemKeyPress.bind(this));
      $el.on("click", '.multiset-row input[type="checkbox"][name*="is_correct"]', this._onItemCheck.bind(this));
      $el.on("click", ".multiset-row-delete", this._onItemDelete.bind(this));
    }, _getAllRows:function() {
      return this.getEl().find(".multiset-row");
    }, _addRow:function() {
      var $el = this.getEl(), tpl = $el.data("emptytpl"), $clone = $($el.data("emptytpl"));
      this._fixElements($clone);
      $clone.find('input[type="hidden"]').val(0);
      $clone.find('input[type="text"]').val("");
      $clone.find('input[type="checkbox"]').attr("checked", null);
      $el.append($clone);
      this.fireEvent("addRow", $clone);
    }, _fixElements:function($clone) {
      var $cells = $clone.find(".multiset-cell"), scripts = [];
      for (var i = 0, ln = $clone.length;i < ln;i++) {
        if ($clone[i].tagName === "SCRIPT") {
          scripts.push($clone[i]);
        }
      }
      for (var i = 0, ln = $cells.length;i < ln;i++) {
        var $cell = $cells.eq(i);
        if ($cell.hasClass("multiset-type-fcbkcomplete")) {
          this._fixElement_fcbkcomplete($cell, scripts);
        }
        if ($cell.hasClass("multiset-type-html5file")) {
          this._fixElement_html5file($cell, scripts);
        }
      }
    }, _fixElement_fcbkcomplete:function($cell, scripts) {
      var $select = $cell.find("select"), oldId = $select.attr("id"), id = oldId + "_" + (new Date - 0);
      $select.attr("id", id);
      var find = '$("#' + oldId + '")', replacement = '$("#' + id + '")';
      for (var i = 0, ln = scripts.length;i < ln;i++) {
        var scriptText = scripts[i].innerHTML;
        if (scriptText.indexOf(find) !== -1) {
          scripts[i].innerHTML = scriptText.replace('$("#' + oldId + '")', '$("#' + id + '")');
          return;
        }
      }
    }, _fixElement_html5file:function($cell, scripts) {
      var $file = $cell.find('input[type="file"]'), oldId = $file.attr("id"), id = oldId + "_" + (new Date - 0);
      $file.attr("id", id);
      var find = "#" + oldId, replacement = "#" + id;
      for (var i = 0, ln = scripts.length;i < ln;i++) {
        var scriptText = scripts[i].innerHTML;
        if (scriptText.indexOf(find) !== -1) {
          scripts[i].innerHTML = scriptText.replace('$("#' + oldId + '")', '$("#' + id + '")');
          return;
        }
      }
    }, _onItemCheck:function(e) {
      var $checkbox = $(e.currentTarget), $itemRow = $checkbox.closest(".multiset-row"), config = this.config, $el = this.getEl();
      if (config.isSingle) {
        var $rows = this._getAllRows(), $otherRows = $rows.not($itemRow[0]);
        $otherRows.find('input[type="checkbox"]').attr("checked", null);
        $otherRows.find('input[type="hidden"]').val(0);
        if (!$checkbox.attr("checked")) {
          $checkbox.attr("checked", "checked");
        }
      }
      $itemRow.find('input[type="hidden"]').val($checkbox.attr("checked") ? 1 : 0);
    }, _onItemDelete:function(e) {
      e.preventDefault();
      var $el = this.getEl(), $item = $(e.currentTarget);
      if ($el.find(".multiset-row").length > 1) {
        $item.closest(".multiset-row").remove();
      }
    }, _onItemKeyPress:function(e) {
      var $rows = this.getEl().find(".multiset-row"), emptyRows = [];
      for (var i = 0, ln = $rows.length;i < ln;i++) {
        var $row = $rows.eq(i);
        if (this._rowIsEmpty($row)) {
          emptyRows.unshift($row);
        }
      }
      var emptyLength = emptyRows.length;
      if (emptyLength === 0) {
        this._addRow();
      } else {
        if (emptyLength > 1) {
          for (var i = 0;i < emptyLength - 1;i++) {
            emptyRows[i].remove();
          }
        }
      }
    }, _rowIsEmpty:function($row) {
      var $all = $row.find(".multiset-trigger"), $empty = $all.filter(function() {
        var $input = $(this), emptyValue = $input.data("empty-value"), value = $input.val();
        if (value == emptyValue) {
          return true;
        }
        return!value;
      });
      return $empty.length === $all.length;
    }});
    self = hm.core.ui.form.helper.MultiSet;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.form.helper.imageMap.ImageMapAnswer", {extend:"hm.core.ui.Component", config:{tplByClass:true, map:null, data:null, editor:null, name:"answer", editMode:true, visible:true, classNameSpace:"hm-form-helper-imageMapEditor-answer"}, getIsCorrectName:function() {
      var config = this.config, data = config.data, editor = config.editor, fieldName = editor.getName().replace(/\[\]$/, ""), answerName = config.name;
      if (!config.editMode) {
        return "";
      }
      if (data && data.id) {
        return fieldName + "[" + data.id + "][is_correct]";
      } else {
        return fieldName + "[new][is_correct][]";
      }
    }, getVariantName:function() {
      var config = this.config, data = config.data, editor = config.editor, fieldName = editor.getName().replace(/\[\]$/, ""), answerName = config.name;
      if (!config.editMode) {
        return "";
      }
      if (data && data.id) {
        return fieldName + "[" + data.id + "][" + answerName + "]";
      } else {
        return fieldName + "[new][" + answerName + "][]";
      }
    }, getDataName:function() {
      var config = this.config, data = config.data, editor = config.editor, fieldName = editor.getName().replace(/\[\]$/, ""), answerName = config.name;
      if (!config.editMode) {
        return "";
      }
      if (data && data.id) {
        return fieldName + "[" + data.id + "][data]";
      } else {
        return fieldName + "[new][data][]";
      }
    }, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var config = this.config, $el = this.getEl(), editor = config.editor, data = config.data, ns = this._ns, visible = config.visible;
      this._$elIsRight = ns.find('isRight input[type="checkbox"]');
      this._$elIsRightFakeInput = ns.find('isRight input[type="hidden"]');
      this._$elCaption = ns.find('caption input[type="text"]');
      this._$elData = ns.find('caption input[type="hidden"]');
      if (data) {
        this.setData(config.data);
      }
      if (visible) {
        this._$elCaption.attr("name", this.getVariantName());
      }
      if (config.editMode) {
        this._$elIsRightFakeInput.attr("name", this.getIsCorrectName());
        this._$elData.attr("name", this.getDataName());
        this._updateDataField();
      } else {
        if (visible) {
          this._$elCaption.attr("readonly", "readonly");
        }
        this._$elIsRight.val(config.data.id);
        this._$elIsRight.checkbox();
        this._$elIsRight.attr("name", editor.getName() + "[" + config.data.question_id + "][" + config.data.id + "]");
      }
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this._$elIsRight.on("click", this._onSetAsRightAnswer.bind(this));
      var config = this.config, map = config.map;
      map.on("select", this._onSelectMap, this);
      map.on("unSelect", this._onUnSelectMap, this);
      map.on("destroy", this._onDestroyMap, this);
      map.on("drawEnd", this._onDrawEndMap, this);
      if (config.editMode) {
        this._ns.on("click", "action_delete", this._onClickDelete);
        this._ns.on("focus", 'caption input[type="text"]', this._onFocus);
        this._ns.on("blur", 'caption input[type="text"]', this._onBlur);
      }
    }, _updateDataField:function() {
      var map = this.config.map;
      this._$elData.val(JSON.stringify({mapData:map.getData(), type:map.getType()}));
    }, setData:function(data) {
      if (data.hasOwnProperty("is_correct")) {
        if (data.is_correct) {
          this._$elIsRight.attr("checked", "checked");
          this._$elIsRightFakeInput.val("1");
          this.getMap().select();
        } else {
          this._$elIsRight.attr("checked", null);
        }
      }
      if (data.hasOwnProperty("variant")) {
        this._$elCaption.val(data.variant);
      }
    }, getMap:function() {
      return this.config.map;
    }, getData:function() {
      return{is_correct:this._$elIsRight.attr("checked") === "checked", variant:this._$elCaption.val()};
    }, _onSetAsRightAnswer:function(e) {
      e.stopPropagation();
      var map = this.config.map;
      if (!map.selected()) {
        this.config.map.select();
      } else {
        this.config.map.unSelect();
      }
    }, _onSelectMap:function() {
      var me = this;
      setTimeout(function() {
        me._$elIsRight.attr("checked", "checked");
      }, 0);
      this._$elIsRightFakeInput.val("1");
    }, _onUnSelectMap:function(e, map) {
      var me = this;
      setTimeout(function() {
        me._$elIsRight.attr("checked", null);
      }, 0);
      this._$elIsRightFakeInput.val("0");
    }, _onDestroyMap:function() {
      this.destroy();
    }, _onDrawEndMap:function(e, map) {
      this._updateDataField();
    }, _onClickDelete:function(e) {
      e.preventDefault();
      this.config.map.destroy();
    }, _onFocus:function(e) {
      this.config.map.mark();
    }, _onBlur:function(e) {
      this.config.map.unMark();
    }});
    self = hm.core.ui.form.helper.imageMap.ImageMapAnswer;
  })();
  (function() {
    var self;
    (function() {
      var counter = 0;
      HM.define("hm.core.ui.form.helper.imageMap.ImageMapEditor", {extend:"hm.core.ui.Component", config:{tplByClass:true, editMode:true, name:"question", value:null, answerName:"answer", data:null, imageUrl:"", imageFileId:0, showVariants:true, classNameSpace:"hm-form-helper-imageMapEditor"}, _init:function() {
        var _init = arguments.callee;
        this.callParent(_init, arguments);
        this._id = ++counter;
        var $el = this.getEl(), config = this.config, me = this, ns = this._ns;
        this._$elImageMapeEditorContainer = ns.find("image");
        this._$elAnswersContainer = ns.find("answerList-body");
        this._$elImageFileIdInput = $(document).find('form input[name="file_id"]');
        var imageMapEditor = this._imageMapEditor = HM.create("hm.core.ui.imageMapEditor.ImageMapEditor", {readOnly:!this.config.editMode, renderTo:this._$elImageMapeEditorContainer, imageUrl:config.imageUrl, listeners:{scope:this, mapAdded:this._onMapAdded}});
        this._answers = [];
        var $fileInput = $el.find('input[type="file"]');
        if (config.editMode) {
          if (this._$elImageFileIdInput.val() != 0) {
            this.setFileId(this._$elImageFileIdInput.val());
            $fileInput.hide();
          } else {
            $fileInput.fileupload({url:"/file/upload/save", dataType:"json", autoUpload:true, limitMultiFileUploads:1, formData:function(form) {
              return "";
            }, add:function(e, data) {
              data.submit();
            }, done:function(data, xhr) {
              var file = xhr.result[0];
              me.setFileId(file.id);
            }});
          }
        } else {
          this.setFileId(config.imageFileId);
          $fileInput.hide();
        }
        var data = config.data, me = this;
        if (data) {
          setTimeout(function() {
            me.setData(data);
          }, 0);
        }
      }, setFileId:function(id) {
        this._$elImageFileIdInput.val(id);
        this._ns.find("content").show();
        this.getEl().find('input[type="file"]').hide();
        this._imageMapEditor.setImageUrl("/file/get/file/file_id/" + id);
      }, _initEvents:function() {
        var _initEvents = arguments.callee;
        this.callParent(_initEvents, arguments);
      }, createAnswer:function(map, answerData) {
        var config = this.config, editMode = config.editMode, className = "";
        if (!editMode) {
          className = this._answers.length % 2 === 1 ? "odd" : "even";
        }
        var config = this.config, answer = HM.create("hm.core.ui.form.helper.imageMap.ImageMapAnswer", {editor:this, map:map, data:answerData, name:config.answerName, renderTo:this._$elAnswersContainer, editMode:editMode, className:className, visible:config.showVariants, listeners:{scope:this, destroy:this._onAnswerDestroy}});
        if (!editMode && config.value !== null) {
          for (var i in config.value) {
            if (!config.value.hasOwnProperty(i)) {
              continue;
            }
            if (config.value[i] == answerData.id) {
              map.select();
              break;
            }
          }
        }
        this._answers.push(answer);
      }, getId:function() {
        return this._id;
      }, getData:function() {
        var answers = this._answers, result = [];
        for (var i = 0, ln = answers.length;i < ln;i++) {
          var answer = answers[i], map = answer.getMap();
          result.push({type:map.getType(), mapData:map.getData(), answerData:answer.getData()});
        }
        return result;
      }, setData:function(data) {
        var mapEditor = this._imageMapEditor, me = this;
        if (!mapEditor.canvasIsReady()) {
          mapEditor.one("canvasReady", function() {
            me.setData(data);
          });
          return;
        }
        for (var i = 0, ln = data.length;i < ln;i++) {
          var answerCfg = data[i], mapType = answerCfg.type, mapData = answerCfg.mapData, answerData = answerCfg.answerData;
          var map = mapEditor.createMap(mapType, mapData);
          this.createAnswer(map, answerData);
        }
      }, getName:function() {
        return this.config.name;
      }, _onMapAdded:function(e, map) {
        if (!map.waitOfDrawingEnd()) {
          return;
        }
        this.createAnswer(map);
      }, _onAnswerDestroy:function(e, answer) {
        var answers = this._answers;
        for (var i = 0, ln = answers.length;i < ln;i++) {
          if (answers[i] !== answer) {
            continue;
          }
          answers.splice(i, 1);
          break;
        }
      }});
    })();
    self = hm.core.ui.form.helper.imageMap.ImageMapEditor;
  })();
  (function() {
    var self;
    var bridgeInited = false, chartCount = 0;
    HM.define("hm.core.ui.graph.amcharts.Chart", {extend:"hm.core.ui.Component", config:{tplByClass:true, amChartsPath:"/js/lib/amcharts", infoBlockId:"", chartType:"amcolumn", dataUrl:"", settingUrl:"", height:300, width:"100%"}, _init:function() {
      var _init = arguments.callee;
      var config = this.config, me = this;
      this.export_url = hm.core.Url.getInstance().url({app:"", module:"infoblock", controller:config.infoBlockId, action:"get-data", format:"csv"});
      if (!bridgeInited) {
        this._initAmChartsBridge();
      }
      this.chartId = ++chartCount;
      this.infoblockId = config.infoBlockId === "" ? "hm-chart-" + this.chartId : config.infoBlockId;
      this.chartContainerId = this.infoblockId + "-chart-container";
      this.swfObjectId = this.infoblockId + "-chart";
      this.callParent(_init, arguments);
      yepnope({test:$.url, nope:"/js/lib/jquery/jquery.urldecoder.min.js", complete:function() {
        yepnope({test:window.SWFObject, nope:config.amChartsPath + "/swfobject.js", complete:function() {
          $(me._onDocReady.bind(me));
        }});
      }});
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
    }, _onDocReady:function() {
      var config = this.config, swfUrl = config.amChartsPath + "/" + config.chartType + ".swf";
      var Chart = new SWFObject(swfUrl, this.swfObjectId, config.width, config.height, "8", "#FFFFFF");
      Chart.addVariable("chart_id", this.swfObjectId);
      Chart.addVariable("path", config.amChartsPath + "/");
      Chart.addVariable("settings_file", encodeURIComponent(config.settingUrl));
      Chart.addVariable("data_file", encodeURIComponent(config.dataUrl));
      Chart.addVariable("loading_settings", HM._("Загрузка"));
      Chart.addVariable("loading_data", HM._("Загрузка"));
      Chart.addParam("wmode", "opaque");
      Chart.write(this.chartContainerId);
      console.log(Chart);
      this._chart = Chart;
    }, _initAmChartsBridge:function() {
      window.data = new Array;
      window.amChartInited = function(chart_id) {
        chart = document.getElementById(chart_id);
        chart.getData();
      };
      window.amReturnData = function(chart_id, chart_data) {
        data[chart_id] = $.url.decode(chart_data);
        eval(chart_id.replace("-", "") + "Inited()");
      };
      bridgeInited = true;
    }});
    self = hm.core.ui.graph.amcharts.Chart;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.progressbar.Progressbar", {extend:"hm.core.ui.Component", config:{tpl:"hm/core/ui/progressbar/Progressbar", renderTo:"", value:30, maxValue:100, valueColor:"#5e7aa8", label:null, width:null, height:null, size:"normal"}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var $progressbar = this._getProgressbar(), config = this.config;
      if (config.size) {
        $progressbar.addClass("progressbar-" + config.size);
      }
      if (config.width) {
        $progressbar.width(config.width);
      }
      if (config.height) {
        $progressbar.height(config.height);
      }
      this._initMaxValue();
      this._initBarValue();
      if (config.label) {
        $progressbar.append('<div class="ui-progressbar-label">' + config.label + "</div>");
      }
    }, _initMaxValue:function() {
      this._maxValue = this.config.maxValue;
    }, _initBarValue:function() {
      var config = this.config;
      this.addBarValue(config.value, config.valueColor);
    }, addBarValue:function(value, color, offset, zIndex) {
      var $progressbar = this._getProgressbar(), config = this.config, $barValue = $('<div class="ui-progressbar-value"></div>');
      var css = {"width":this._getPercent(value) + "%", "background-color":color, "z-index":10};
      if (offset) {
        css["left"] = this._getPercent(offset) + "%";
      } else {
        $barValue.addClass("ui-corner-left");
      }
      if (zIndex) {
        css["z-index"] = zIndex;
      }
      if (config.width) {
        $barValue.width(config.width);
      }
      if (config.height) {
        $barValue.height(config.height);
        $barValue.css("margin-top", "-" + $barValue.css("height"));
        $progressbar.find(".gradient-me").height(config.height);
      }
      $barValue.css(css);
      $progressbar.append($barValue);
      return $barValue;
    }, _getProgressbar:function() {
      if (this._$progressbar === undefined) {
        this._$progressbar = this.getEl().find(".ui-progressbar");
      }
      return this._$progressbar;
    }, _getPercent:function(value) {
      return Math.round(value / this._maxValue * 100);
    }});
    self = hm.core.ui.progressbar.Progressbar;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.progressbar.cumulative.ProgressbarCumulative", {extend:"hm.core.ui.progressbar.Progressbar", config:{bestValueColor:"#51C54C", bestValue:null, altValue:null, bestAltValue:null, maxAltValue:null, targetValue:null}, _initMaxValue:function() {
      var config = this.config;
      this._maxValue = config.maxValue + config.maxAltValue;
    }, _initBarValue:function() {
      var _initBarValue = arguments.callee;
      this.callParent(_initBarValue, arguments);
      var config = this.config;
      this.addBarValue(config.bestValue, config.bestValueColor, null, 9);
      this.addBarValue(config.altValue, config.valueColor, config.maxValue);
      this.addBarValue(config.bestAltValue, config.bestValueColor, config.maxValue, 9);
      this._addTargetLine(config.targetValue);
      this._addAltLine(config.maxValue, HM._("Альтернативные"));
      this._addAltLine(0, HM._("Обязательные"), {lineColor:"transparent", hideValueLabel:true});
    }, _addTargetLine:function(value) {
      var $progressbar = this._getProgressbar();
      var $targetvalue = $('<div class="hm-progressbar-line hm-progressbar-simple-line">' + '<div class="hm-progressbar-value-label">' + value + "</div>" + '<div class="hm-progressbar-flag"></div>' + "</div>");
      $targetvalue.css("left", this._getPercent(value) + "%");
      $progressbar.append($targetvalue);
    }, _addAltLine:function(value, text, options) {
      var $progressbar = this._getProgressbar();
      var $targetvalue = $('<div class="hm-progressbar-line hm-progressbar-alt-line">' + '<div class="hm-progressbar-value-label">' + value + "</div>" + '<div class="hm-progressbar-text-label">' + text + "</div>" + "</div>");
      if (options) {
        if (options["lineColor"]) {
          $targetvalue.css("background-color", options["lineColor"]);
        }
        if (options["hideValueLabel"]) {
          $targetvalue.find(".hm-progressbar-value-label").hide();
        }
        if (options["hideTextLabel"]) {
          $targetvalue.find(".hm-progressbar-text-label").hide();
        }
      }
      $targetvalue.css("left", this._getPercent(value) + "%");
      $progressbar.append($targetvalue);
    }});
    self = hm.core.ui.progressbar.cumulative.ProgressbarCumulative;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.search.SphinxSearch", {extend:"hm.core.ui.Component", config:{tpl:"hm/core/ui/search/SphinxSearch", searchUrl:null, indexes:null, items:{all:{field:"*", value:""}}}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var config = this.config;
      if (config.indexes === null) {
        throw new Error("Необходимо указать как минимум один индекс.");
      }
      if (!_.isArray(config.indexes) && _.isString(config.indexes)) {
        var index = config.indexes;
        config.indexes = [index];
      }
    }, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      this._$resultsContainer = this.getEl().find(".hm-search-result");
      this._initItems();
    }, _initEvents:function() {
      this.elOn("click", 'input[type="submit"], .submit', this._search, this);
      this.elOn("keypress", "input", this._search, this);
    }, _initItems:function() {
      _.each(this.config.items, this._initItem, this);
    }, _initItem:function(item, key, list) {
      if (item.rangeTo !== undefined && list[item.rangeTo] === undefined) {
        throw new Error('Для config.items."' + key + '" указан rangeTo, но данные для него не определены.');
      }
      if (item.rangeFrom !== undefined && list[item.rangeFrom] === undefined) {
        throw new Error('Для config.items."' + key + '" указан rangeFrom, но данные для него не определены.');
      }
      if (item.value !== undefined) {
        this.getEl().find('input[name="' + key + '"],' + 'select[name="' + key + '"]').val(item.value);
      }
    }, _updateItemsData:function() {
      var items = this.config.items;
      this.getEl().find("input[name], select[name]").each(function() {
        var $this = $(this), key = $this.attr("name"), val = $this.val();
        if ($this.hasClass("hasDatepicker") && val) {
          var date = hm.core.Date.parse(val);
          val = Math.round(date.getTime() / 1E3);
        }
        if (items[key]) {
          items[key].value = val;
        }
      });
      _.each(items, function(item, key, list) {
        var hasDefault = item.defaultValue !== undefined, hasValue = item.value !== undefined && $.trim(item.value) != "";
        if (hasDefault && !hasValue) {
          item.value = item.defaultValue;
        }
      });
    }, getResultsContainer:function() {
      return this._$resultsContainer;
    }, search:function() {
      this._updateItemsData();
      var items = this.config.items;
      var filterData = {}, filterRangeData = {}, queryData = [];
      _.each(items, function(item, key, list) {
        var isField = item.field !== undefined, isAttr = item.attr !== undefined, hasRangeFrom = item.rangeFrom !== undefined, hasRangeTo = item.rangeTo !== undefined, isRange = hasRangeFrom || hasRangeTo, hasValue = item.value !== undefined && $.trim(item.value) != "";
        if (!hasValue) {
          return;
        }
        if (isField) {
          queryData.push(item);
        }
        if (isAttr) {
          var attr = item.attr;
          if (isRange) {
            if (hasRangeTo) {
              var fromValue = item.value;
              var toValue = list[item.rangeTo].value;
              item.value = [fromValue, toValue];
              filterRangeData[attr] = {value:item.value, exclude:[]};
            }
          } else {
            if (filterData[attr] === undefined) {
              filterData[attr] = {value:[], exclude:[]};
            }
            filterData[attr].value.push(item.value);
          }
        }
      });
      $.ajax({type:"POST", url:this.config.searchUrl, data:{indexes:this.config.indexes, queryData:queryData, filterData:filterData, filterRangeData:filterRangeData}}).done(_.bind(this._onSearchDone, this));
    }, _search:function(e) {
      if (e.type == "keypress" && e.which != 13) {
        return;
      }
      e.preventDefault();
      this.search();
    }, _onSearchDone:function(data) {
      this._$resultsContainer.contents().remove();
      this._$resultsContainer.append(data);
    }});
    self = hm.core.ui.search.SphinxSearch;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.select.Option", {extend:"hm.core.ui.Component", config:{tplByClass:true, optionsContainer:null, clusterize:false, text:null, value:null, selected:false, addClass:""}, statics:{index:0}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var config = this.config, $el = this.getEl();
      if (config.addClass) {
        this.getEl().addClass(config.addClass);
      }
      this._selected = config.selected;
      this._updateView();
    }, _initEvents:function() {
    }, _onClick:function() {
      var event = this.fireEvent("click", this);
      if (!(event && event.isPrevented())) {
        this.userToggle();
      }
    }, getEl:function() {
      var config = this.config;
      if (config.clusterize && config.optionsContainer.isClusterized()) {
        this._$el = config.optionsContainer.getEl().find('.hm-select-option[hm-id="' + this._componentId + '"]');
      }
      return this._$el;
    }, getText:function() {
      return this.config.text;
    }, getValue:function() {
      return this.config.value;
    }, isSelected:function() {
      return this._selected;
    }, select:function(flag) {
      flag = flag ? true : false;
      if (this.isSelected() == flag) {
        return false;
      } else {
        this._selected = flag;
      }
      this._updateView();
      return true;
    }, userSelect:function(flag) {
      if (this.select(flag)) {
        this.fireEvent("change", this);
      }
    }, userToggle:function() {
      this.userSelect(!this.isSelected());
    }, _updateView:function() {
      this.getEl().toggleClass("hm-select-option-selected", this.isSelected());
    }});
    self = hm.core.ui.select.Option;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.select.OptionsContainer", {extend:"hm.core.ui.Component", config:{tplByClass:true, options:[], values:[], maxHeight:null, maxWidth:null, css:null, clusterize:false, autoHide:null, inside:null}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var config = this.config, $el = this.getEl();
      if (config.maxWidth !== null) {
        $el.css("max-width", config.maxWidth);
      }
      if (config.css !== null) {
        $el.css(config.css);
      }
      this._$optionsWrap = $el.find(".hm-select-options-wrap");
      this._$ul = this._$optionsWrap.find("ul");
      this._initOptions();
      if (config.clusterize) {
        this._clusterize = new Clusterize({scrollElem:this._$optionsWrap[0], contentElem:this._$ul[0]});
      }
    }, _initEvents:function() {
      this._onDocumentClickBind = _.bind(this._onDocumentClick, this);
      this._$ul.on("click", ".hm-select-option", _.bind(this._onOptionEvent, this));
    }, _initOptions:function() {
      this._options = [];
      _.each(this.config.options, this._initOption, this);
    }, _initOption:function(val, key) {
      var value = key;
      if (val["value"] !== undefined) {
        value = val["value"];
      }
      var text = val["text"], selected = $.inArray(value, this.config.values) != -1, addClass = val["addClass"];
      this.createOption(value, text, selected, addClass);
    }, _onOptionEvent:function(e) {
      var $target = $(e.currentTarget), option = hm.core.ui.Component.getComponent($target);
      if (e.type == "click") {
        option._onClick();
      }
    }, _onDocumentClick:function(e) {
      var $el = this.getEl();
      if ($el.find($(e.target)).length == 0) {
        this.hide();
      }
    }, isClusterized:function() {
      return!!this._clusterize;
    }, initScroll:function() {
      if (this._scrollInited) {
        return;
      }
      var $ul = this._$ul, maxHeight = this.config.maxHeight;
      if (maxHeight !== null && $ul.height() > maxHeight) {
        this._$optionsWrap.css({"overflow-y":"scroll", "height":maxHeight});
      }
      this._scrollInited = true;
    }, removeOption:function() {
    }, addOption:function(option) {
      this.needToDestroy(option);
      this._options.push(option);
    }, createOption:function(value, text, selected, addClass) {
      var option = HM.create("hm.core.ui.select.Option", {renderTo:this._$ul, optionsContainer:this, clusterize:this.config.clusterize, text:text, value:value, selected:selected, addClass:addClass});
      this.addOption(option);
      return option;
    }, getOptions:function() {
      return this._options;
    }, _beforeShow:function() {
      var _beforeShow = arguments.callee;
      return this.callParent(_beforeShow, arguments);
    }, show:function() {
      var show = arguments.callee;
      if (!this.config.inside) {
        var me = this;
        setTimeout(function() {
          hm.core.DOM.$document().on("click", me._onDocumentClickBind);
        }, 0);
      }
      var result = this.callParent(show, arguments);
      if (this.config.clusterize && result) {
        this._clusterize.refresh();
      }
      return result;
    }, hide:function(force) {
      var hide = arguments.callee;
      if (this.config.inside) {
        return false;
      }
      hm.core.DOM.$document().off("click", this._onDocumentClickBind);
      return this.callParent(hide, arguments);
    }});
    self = hm.core.ui.select.OptionsContainer;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.select.Select", {extend:"hm.core.ui.Component", config:{tplByClass:true, select:null, name:null, multiple:null, options:[], values:[], clusterize:false, maxWidth:null, optionsInside:null, optionsAutoHide:null, optionsMaxHeight:null, optionsMaxWidth:null, optionsCss:null, addClass:""}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var $el = this.getEl(), config = this.config;
      if (_.isArray(config.options)) {
        this._options = $.merge([], config.options);
      } else {
        this._options = $.extend({}, config.options);
      }
      this._values = $.merge([], config.values);
      this._$selectedContent = $el.find(".hm-select-selected span");
      this._initOptions();
      if (config.optionsInside) {
        $el.toggleClass("hm-select-options-inside", config.optionsInside);
      }
      if (config.multiple) {
        $el.toggleClass("hm-select-multiple", config.multiple);
      }
      $el.addClass(config.addClass);
      if (config.maxWidth !== null) {
        $el.css("max-width", config.maxWidth);
      }
      this._updateView();
    }, _initDefaults:function() {
      var config = this.config;
      if (config.multiple === null) {
        config.multiple = false;
      }
      if (config.optionsInside === null) {
        config.optionsInside = false;
      }
      if (config.optionsAutoHide === null) {
        config.optionsAutoHide = true;
      }
    }, _initOptions:function() {
      this._initNativeOptions();
      this._initDefaults();
      var config = this.config;
      this._optionsContainer = HM.create("hm.core.ui.select.OptionsContainer", {renderTo:config.optionsInside ? this.getEl() : "body", maxHeight:config.optionsMaxHeight, maxWidth:config.optionsMaxWidth, css:config.optionsCss, autoHide:config.optionsAutoHide, clusterize:config.clusterize, inside:config.optionsInside, options:this._options, values:this._values, listeners:{scope:this, show:this._onOptionsShow}});
      this.needToDestroy(this._optionsContainer);
      if (config.optionsInside) {
        this.getOptionsContainer().show();
      }
      var options = this.getOptions();
      for (var i = 0, ln = options.length;i < ln;i++) {
        options[i].on("change", this._onOptionChange, this);
        options[i].on("click", this._onOptionClick, this);
      }
    }, _initNativeOptions:function() {
      var config = this.config, $select = config.select;
      if (!($select instanceof jQuery)) {
        $select = $(config.select);
        if (!$select.length) {
          return;
        }
      }
      this._$select = $select;
      var nativeOptions = [], nativeSelectedValues = [];
      $select.find("option").each(function() {
        var $option = $(this), value = $option.attr("value"), text = $option.text();
        nativeOptions.push({value:value, text:text});
        if ($option.is(":selected")) {
          nativeSelectedValues.push(value);
        }
      });
      this._options = nativeOptions;
      this._values = nativeSelectedValues;
      if (config.multiple === null) {
        var multiple = $select.attr("multiple");
        config.multiple = multiple !== undefined && multiple !== false;
      }
      if (multiple) {
        if (config.optionsInside === null) {
          config.optionsInside = true;
        }
        if (config.optionsAutoHide === null) {
          config.optionsAutoHide = false;
        }
      }
      if (config.name === null) {
        var name = $select.attr("name");
        if (name !== undefined) {
          config.name = name;
        }
      }
      $select.hide();
      $select.after(this.getEl());
    }, _initEvents:function() {
      this.elOn("click", ".hm-select-selected", this._onSelectedClick);
    }, _onOptionsShow:function(event, optionsContainer) {
      this._updateOptionsContainer(optionsContainer);
    }, _updateOptionsContainer:function(optionsContainer) {
      if (optionsContainer.isVisible()) {
        optionsContainer.initScroll();
        optionsContainer.getEl().position({my:"left top", at:"left bottom", collision:"flip flip", of:this.getEl()});
      }
    }, _onSelectedClick:function() {
      this.getOptionsContainer().toggle();
    }, _onOptionClick:function(event, option) {
      var config = this.config;
      if (!config.multiple) {
        if (option.isSelected()) {
          event.preventDefault();
          option.userSelect(true);
        }
        var options = this.getOptions();
        for (var i = 0, ln = options.length;i < ln;i++) {
          if (options[i].isSelected() && options[i] != option) {
            options[i].select(false);
          }
        }
      }
    }, _onOptionChange:function(event, option) {
      var config = this.config;
      if (config.optionsAutoHide) {
        this.getOptionsContainer().hide();
      }
      this._updateView();
      var $select = this._$select;
      if ($select) {
        $select.val(this.getSelectedValues());
        $select.trigger("change");
      }
      this.fireEvent("change", this);
    }, hide:function() {
      var hide = arguments.callee;
      this.getOptionsContainer().hide();
      this.callParent(hide, arguments);
    }, getSelectedOptions:function() {
      var options = this.getOptions(), result = [];
      for (var i = 0, ln = options.length;i < ln;i++) {
        if (options[i].isSelected()) {
          result.push(options[i]);
        }
      }
      return result;
    }, getSelectedValues:function() {
      var options = this.getOptions(), result = [];
      for (var i = 0, ln = options.length;i < ln;i++) {
        if (options[i].isSelected()) {
          result.push(options[i].getValue());
        }
      }
      return result;
    }, getSelectedTexts:function() {
      var options = this.getOptions(), result = [];
      for (var i = 0, ln = options.length;i < ln;i++) {
        if (options[i].isSelected()) {
          result.push(options[i].getText());
        }
      }
      if (result.length == 0) {
        result.push("&nbsp;");
      }
      return result;
    }, getOptionsContainer:function() {
      return this._optionsContainer;
    }, getOptions:function() {
      return this.getOptionsContainer().getOptions();
    }, _updateView:function() {
      var selectedTexts = this.getSelectedTexts(), selectedTextsLn = selectedTexts.length;
      if (selectedTextsLn > 1) {
        this._$selectedContent.html(HM._("Выбрано элементов") + ": " + selectedTextsLn);
      } else {
        this._$selectedContent.html(this.getSelectedTexts().join("; "));
      }
      this._updateOptionsContainer(this.getOptionsContainer());
    }});
    self = hm.core.ui.select.Select;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.select.custom.HeadSwitcher", {extend:"hm.core.ui.select.Select", config:{redirectUrl:null, paramName:null, optionsInside:true, optionsAutoHide:false}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      if (this.config.values.length == 0) {
        this._detectCurrentOption();
      }
      if (this.config.multiple) {
        this._switchPage = _.debounce(this._switchPage, 1E3);
      }
    }, _onOptionChange:function(event, option) {
      var _onOptionChange = arguments.callee;
      this.callParent(_onOptionChange, arguments);
      this._switchPage();
    }, _detectCurrentOption:function() {
      var config = this.config, paramName = config.paramName, options = this.getOptions(), currentUrl = window.location.href, currentUrlSimple = this._getSimpleUrl(currentUrl);
      if (paramName) {
      } else {
        for (var i = 0, ln = options.length;i < ln;i++) {
          var optionValue = this._getSimpleUrl(options[i].getValue());
          if (optionValue == currentUrlSimple) {
            options[i].select(true);
            return;
          }
        }
      }
      options[0].select(true);
    }, _getSimpleUrl:function(url) {
      var urlInfo = this._getUrlInfo(url), urlPathname = urlInfo[5], urlSearch = urlInfo[6], urlHash = urlInfo[7];
      return[urlPathname, urlSearch, urlHash].join("");
    }, _switchPage:function() {
      var config = this.config, paramName = config.paramName, selectedValues = this.getSelectedValues();
      if (paramName) {
        var redirectUrl = config.redirectUrl !== null ? config.redirectUrl : window.location.href, redirectUrlInfo = this._getUrlInfo(redirectUrl), redirectUrlSearch = redirectUrlInfo[6], redirectUrlHash = redirectUrlInfo[7], redirectUrlCfg = this._getUrlCfg(redirectUrl), newUrlParts = [];
        redirectUrlCfg[paramName] = selectedValues.join(",");
        newUrlParts.push(hm.core.Url.getInstance().url(redirectUrlCfg));
        newUrlParts.push(redirectUrlSearch);
        newUrlParts.push(redirectUrlHash);
        window.location.href = newUrlParts.join("");
      } else {
        window.location.href = selectedValues[0];
      }
    }, _getUrlInfo:function(url) {
      if (this._urlInfo === undefined) {
        this._urlInfo = [];
      }
      if (this._urlInfo[url] !== undefined) {
        return this._urlInfo[url];
      }
      if (this._urlInfoRegexp === undefined) {
        this._urlInfoRegexp = new RegExp(["^(https?:)//", "(([^:/?#]*)(?::([0-9]+))?)", "(/[^?#]*)", "(\\?[^#]*|)?", "(#.*|)?$"].join(""));
        this._urlInfoRegexpSimple = new RegExp(["(/[^?#]*)", "(\\?[^#]*|)?", "(#.*|)?$"].join(""));
      }
      var result;
      if (url[0] === "/") {
        result = url.match(this._urlInfoRegexpSimple);
        result = [url, location.protocol, location.host, location.hostname, location.port, result[1], result[2], result[3]];
      } else {
        result = url.match(this._urlInfoRegexp);
      }
      this._urlInfo[url] = result;
      return result;
    }, _getUrlCfg:function(url) {
      var urlInfo = this._getUrlInfo(url), pathname = urlInfo[5], pathnameParts = pathname.replace(/^\/+|\/+$/g, "").split("/"), result = {};
      result.module = pathnameParts.shift();
      var controller = pathnameParts.shift();
      if (controller) {
        result.controller = controller;
      }
      var action = pathnameParts.shift();
      if (action) {
        result.action = action;
      }
      var key, value;
      while (pathnameParts.length != 0) {
        key = pathnameParts.shift();
        value = pathnameParts.shift();
        if (!value) {
          value = "";
        }
        result[key] = value;
      }
      return result;
    }});
    self = hm.core.ui.select.custom.HeadSwitcher;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.tooltip.Tooltip", {extend:"hm.core.ui.Component", config:{tpl:"hm/core/ui/tooltip/Tooltip", contentTpl:null, renderTo:"body", showDelay:0, followPointer:false, posX:null, posY:null, arrowDirection:"up", width:"auto", autoHide:true, backgroundColor:"#FFF"}, __destruct:function() {
      var __destruct = arguments.callee;
      if (this.destructed) {
        return;
      }
      if (this.config.autoHide) {
        var Tooltip = hm.core.ui.tooltip.Tooltip;
        if (Tooltip.currentTip === this) {
          Tooltip.currentTip = null;
        }
      }
      this.callParent(__destruct, arguments);
    }, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var $el = this._$el, config = this.config;
      this._arrow = $el.find(".hm-tooltip-arrow");
      this._arrowShadow = $el.find(".hm-tooltip-shadow-arrow");
      this._resetArrowDirection();
      $el.css("width", config.width);
      this._contentConatiner = $el.find(".hm-tooltip-content");
      if (config.backgroundColor !== null) {
        $el.css("border-color", config.backgroundColor);
        this._contentConatiner.css("background-color", config.backgroundColor);
      }
    }, _initEvents:function() {
      this._showWithDelayEvent = this._showWithDelay.bind(this);
      this._updatePositionEvent = this._updatePosition.bind(this);
      if (this.config.autoHide) {
        this.elOn("mouseenter", null, this._onMouseEnter);
        this.elOn("mouseleave", null, this._onMouseLeave);
      }
      this.elOn("click", null, this._onTooltipClick);
    }, setContent:function(newData) {
      var $container = this._contentConatiner;
      $container.contents().detach();
      $container.append(newData);
      this.updateArrowPosition();
      return newData;
    }, updateArrowPosition:function() {
      var config = this.config;
      if (config.posX !== null && config.posY !== null) {
        this._setRealPosition(config.posX, config.posY);
      }
    }, empty:function() {
      this._contentConatiner.empty();
    }, renderContent:function(newData, tpl) {
      var template = tpl;
      if (!template) {
        template = this.config.contentTpl;
        if (template === null) {
          console.error("Не указан шаблон.");
        }
      }
      var $result = this._renderTemplate(template, newData);
      this.setContent($result);
      return $result;
    }, show:function(forceInstant) {
      var show = arguments.callee;
      var config = this.config;
      if (config.autoHide) {
        var TooltipClass = hm.core.ui.tooltip.Tooltip, currentTip = TooltipClass.currentTip;
        if (currentTip && currentTip !== this) {
          currentTip.hide();
        }
        TooltipClass.currentTip = this;
      }
      if (config.showDelay > 0 && forceInstant !== true) {
        HM.$document().on("mousemove", this._showWithDelayEvent);
        return;
      }
      if (this.isVisible()) {
        return true;
      }
      if (!this.callParent(show)) {
        return false;
      }
      var posX = config.posX, posY = config.posY, followPointer = config.followPointer;
      if (!followPointer && (posX !== null && posY !== null)) {
        this._setRealPosition(posX, posY);
      }
      if (followPointer) {
        HM.$document().on("mousemove", this._updatePositionEvent);
      }
    }, hide:function() {
      var hide = arguments.callee;
      if (this.showTimer) {
        clearTimeout(this.showTimer);
        delete this.showTimer;
      }
      if (this.config.autoHide) {
        if (hm.core.ui.tooltip.Tooltip.mouseOverTooltip === this) {
          delete hm.core.ui.tooltip.Tooltip.mouseOverTooltip;
        }
        if (hm.core.ui.tooltip.Tooltip.currentTip === this) {
          delete hm.core.ui.tooltip.Tooltip.currentTip;
        }
      }
      if (this.config.showDelay > 0) {
        HM.$document().off("mousemove", this._showWithDelayEvent);
      }
      if (this.config.followPointer) {
        HM.$document().off("mousemove", this._updatePositionEvent);
      }
      if (!this.isVisible()) {
        return true;
      }
      if (!this.callParent(hide, arguments)) {
        return false;
      }
      return true;
    }, showAt:function(x, y, forceInstant) {
      this.config.posX = x;
      this.config.posY = y;
      this.show(forceInstant);
    }, _showWithDelay:function(e) {
      var me = this;
      clearTimeout(this.showTimer);
      if (this.showTimer) {
        clearTimeout(this.showTimer);
      }
      this.showTimer = setTimeout(function() {
        if (me.config.followPointer) {
          me._setRealPosition(e.pageX, e.pageY);
        }
        HM.$document().off("mousemove", me._showWithDelayEvent);
        delete me.showTimer;
        me.show(true);
      }, this.config.showDelay);
    }, isVisible:function() {
      return this.getEl().is(":visible");
    }, _setArrowDirection:function(str) {
      var $el = this._$el;
      $el.removeClass("hm-tooltip-arrow-left hm-tooltip-arrow-right hm-tooltip-arrow-down hm-tooltip-arrow-up");
      switch(str) {
        case "left":
          $el.addClass("hm-tooltip-arrow-left");
          break;
        case "right":
          $el.addClass("hm-tooltip-arrow-right");
          break;
        case "down":
          $el.addClass("hm-tooltip-arrow-down");
          break;
        case "up":
        ;
        default:
          $el.addClass("hm-tooltip-arrow-up");
          break;
      }
      this._currentarrowDirection = str;
    }, _resetArrowDirection:function() {
      this._setArrowDirection(this.config.arrowDirection);
    }, _setRealPosition:function(x, y) {
      var $el = this._$el;
      var newPosX = x;
      var newPosY = y;
      var arrow = this._arrow, arrowShadow = this._arrowShadow, arrowDirection = this.config.arrowDirection;
      switch(arrowDirection) {
        case "down":
          newPosY -= $el.outerHeight() + 8;
          newPosX -= $el.width() / 2;
          if (this.config.followPointer) {
            newPosY -= 8;
          }
          break;
        case "left":
          break;
        case "right":
          break;
        case "up":
        ;
        default:
          newPosX -= $el.width() / 2;
          newPosY += 8;
          if (this.config.followPointer) {
            newPosY += 10;
          }
          break;
      }
      arrow.attr("style", "");
      arrowShadow.attr("style", "");
      if (newPosX < 0) {
        switch(this.config.arrowDirection) {
          case "down":
          ;
          case "up":
            arrow.css("margin-left", newPosX);
            arrowShadow.css("margin-left", newPosX - 10);
            break;
        }
        newPosX = 0;
      }
      $el.css({left:newPosX, top:newPosY});
    }, _updatePosition:function(e) {
      this._setRealPosition(e.pageX, e.pageY);
    }, _beforeHide:function() {
      var _beforeHide = arguments.callee;
      if (this._notHide) {
        return false;
      }
      return this.callParent(_beforeHide, arguments);
    }, _onMouseLeave:function() {
      if (!this.hide()) {
        return false;
      }
      if (hm.core.ui.tooltip.Tooltip.mouseOverTooltip === this) {
        hm.core.ui.tooltip.Tooltip.mouseOverTooltip = null;
      }
      return true;
    }, _onMouseEnter:function() {
      hm.core.ui.tooltip.Tooltip.mouseOverTooltip = this;
    }, _onTooltipClick:function(e) {
      e.stopPropagation();
    }});
    self = hm.core.ui.tooltip.Tooltip;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.form.element.select.list.tooltip.DateTooltip", {extend:"hm.core.ui.tooltip.Tooltip", config:{autoHide:false}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._$el.addClass("hm-pm-tooltip-dateTooltip");
      var $elDp = this._$elDatePicker = $(document.createElement("div"));
      $elDp.datepicker({onSelect:this._onSelectDate.bind(this)});
      this.setContent($elDp);
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
    }, setDate:function(date) {
      this._$elDatePicker.datepicker("setDate", date);
    }, _onSelectDate:function(date) {
      this.fireEvent("select", date);
    }});
    self = hm.core.ui.form.element.select.list.tooltip.DateTooltip;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.tree.DragManager", {extend:"hm.core.ui.Component", config:{tpl:"hm/core/ui/tree/DragManager"}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
    }, isDragging:function() {
      return!!this._draggableNode;
    }, getDropHelper:function() {
      return this.getEl();
    }, getArrowHelper:function() {
      if (!this._arrowHelper) {
        this._arrowHelper = $('<div class="hm-tree-draggable-arrow-helper"></div>');
      }
      return this._arrowHelper;
    }, setDraggableNode:function(node) {
      var dropHelper = this.getDropHelper();
      if (node instanceof hm.core.ui.tree.node.Node) {
        dropHelper.height(node.getEl().outerHeight() - 2);
      } else {
        dropHelper.css("height", "");
      }
      this._draggableNode = node;
    }, getDraggableNode:function() {
      return this._draggableNode;
    }, setDroppableNode:function(node) {
      this._droppableNode = node;
    }, getDroppableNode:function() {
      return this._droppableNode;
    }, setDropOptions:function(targetNode, position) {
      if (this._dropTarget == targetNode && this._dropPosition == position) {
        return;
      }
      this._dropTarget = targetNode;
      this._dropPosition = position;
    }, setFinalDropOptions:function(targetNode, position) {
      this._finalDropTarget = targetNode;
      this._finalDropPosition = position;
    }, getDropTarget:function() {
      return this._dropTarget;
    }, getDropPosition:function() {
      return this._dropPosition;
    }, getFinalDropTarget:function() {
      return this._finalDropTarget;
    }, getFinalDropPosition:function() {
      return this._finalDropPosition;
    }, draggableOverNode:function(node, afterLastNode) {
      if (node !== undefined) {
        this._draggableOverNode = node;
        var prevNode;
        if (afterLastNode) {
          prevNode = node;
        } else {
          prevNode = node.getPrevNode(true, false);
        }
        if (!prevNode) {
          this._prevLevels = [];
          return this._draggableOverNode;
        }
        var nodeLevel = node.getLevel(), prevNodeLevel = prevNode.getLevel(), deltaLevel = prevNodeLevel - nodeLevel, prevLevels = [];
        if (afterLastNode) {
          deltaLevel = 999;
        }
        if (deltaLevel >= 0) {
          prevLevels.push(prevNode);
          while (deltaLevel != 0) {
            var parent = prevNode.getParent();
            if (!parent || parent instanceof hm.core.ui.tree.node.Root) {
              break;
            }
            prevLevels.push(parent);
            prevNode = parent;
            deltaLevel--;
          }
        }
        prevLevels = prevLevels.reverse();
        var tempData = [];
        for (var i = 0, ln = prevLevels.length;i < ln;i++) {
          tempData.push(prevLevels[i].getTitle());
        }
        this._prevLevels = prevLevels;
      }
      return this._draggableOverNode;
    }, draggablePrevLevels:function() {
      return this._prevLevels;
    }, reset:function() {
      this._draggableOverNode = null;
      this._draggableNode = null;
      this._droppableNode = null;
      this._prevLevels = null;
      this._dropTarget = null;
      this._dropPosition = null;
      this.getDropHelper().detach();
      this.getArrowHelper().detach();
    }});
    self = hm.core.ui.tree.DragManager;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.tree.Tree", {extend:"hm.core.ui.Component", config:{tpl:"hm/core/ui/tree/Tree", title:null, data:null, persist:true, editable:true}, statics:{counter:0}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._key = hm.core.ui.tree.node.Node.counter++;
      this._nodes = [];
      this._factoryCounter = 0;
      this._initTree();
    }, _initTree:function() {
      var treeData = this.config.data;
      var root = this._root = HM.create("hm.core.ui.tree.node.Root", {renderTo:this.getRootContainer(), childrenData:treeData, tree:this});
      this.needToDestroy(root);
      root.initChildren();
      root.expand(true);
      this.getPlainTree(true);
      this.getEl().droppable({tolerance:"pointer", out:_.bind(this._onTreeOut, this)});
      this._initCachedData();
    }, _initCachedData:function() {
      var nodes = this.getPlainTree(true), prevKey;
      for (var i = 0, ln = nodes.length;i < ln;i++) {
        var node = nodes[i], nodeKey = node.getKey();
        node.setCachedData({level:node.getLevel(), prevKey:prevKey});
        prevKey = nodeKey;
      }
    }, _onTreeOut:function(event, ui) {
    }, _beforeContextShow:function(e, contextMenu) {
      var node = contextMenu.getContextTarget();
      node.activate(true);
    }, _activate:function(event, node) {
      if (node.isActive()) {
        var activeNode = this.getActiveNode();
        if (activeNode && activeNode !== node) {
          activeNode.activate(false);
        }
        this.setActiveNode(node);
        this.fireEvent("nodeActive", node);
      }
    }, _expand:function(event, node) {
      this.savePersistData();
    }, _drop:function(event) {
      this.savePersistData();
    }, savePersistData:function() {
      if (this.config.persist) {
        var children = this.getPlainTree(true);
        var data = "";
        for (var i = 0, ln = children.length;i < ln;i++) {
          data += children[i].isExpanded() ? "1" : "0";
        }
        hm.core.Cookie.set("hm-tree-expand-" + this.getKey(), data, {expires:0});
      }
    }, getPersistData:function() {
      if (this._persistData === undefined) {
        var expandData = hm.core.Cookie.get("hm-tree-expand-" + this.getKey());
        if (expandData) {
          expandData = expandData.split("");
          for (var i = 0, ln = expandData.length;i < ln;i++) {
            expandData[i] = expandData[i] != "0";
          }
        }
        this._persistData = {expand:expandData};
      }
      return this._persistData;
    }, getKey:function() {
      return this._key;
    }, getRootContainer:function() {
      return this.getEl();
    }, nodeFactory:function(nodeData) {
      var newNode = this._nodeFactory(nodeData);
      var persistData = this.getPersistData();
      if (persistData.expand !== undefined) {
        newNode.expand(persistData.expand[this._factoryCounter]);
      } else {
        newNode.expand(newNode.config.expand);
      }
      this._factoryCounter++;
      newNode.initChildren();
      newNode.on("expand", this._expand, this);
      newNode.on("activate", this._activate, this);
      newNode.on("drop", this._drop, this);
      this.needToDestroy(newNode);
      this._nodes.push(newNode);
      return newNode;
    }, _nodeFactory:function(nodeData) {
      return HM.create(this._getFactoryNodeName(nodeData), this._getFactoryNodeConfig(nodeData));
    }, _getFactoryNodeName:function(nodeData) {
      return "hm.core.ui.tree.node.Node";
    }, _getFactoryNodeConfig:function(nodeData) {
      var isEditable = this.isEditable();
      var nodeConfig = {title:nodeData.title, childrenData:nodeData.children, tree:this, folder:nodeData.isFolder, iconClass:nodeData.iconClass, draggable:isEditable, droppable:isEditable, editable:isEditable};
      if (nodeData.expand) {
        nodeConfig.expand = true;
      }
      if (nodeData.data) {
        nodeConfig.data = nodeData.data;
      }
      return nodeConfig;
    }, getRoot:function() {
      return this._root;
    }, isEditable:function() {
      return this.config.editable;
    }, appendNodeTo:function(node, targetNode) {
      if (!targetNode) {
        targetNode = this.getRoot();
      }
      this.removeNodeFrom(node);
      node.setParent(targetNode);
      var targetChildren = targetNode.getChildren();
      targetChildren.push(node);
      targetNode.getChildrenContainer().append(node.getEl());
      targetNode.updateView();
    }, prependNodeTo:function(node, targetNode) {
      if (!targetNode) {
        targetNode = this.getRoot();
      }
      this.removeNodeFrom(node);
      node.setParent(targetNode);
      var targetChildren = targetNode.getChildren();
      targetChildren.unshift(node);
      targetNode.getChildrenContainer().prepend(node.getEl());
      targetNode.updateView();
    }, insertNodeBefore:function(node, targetNode) {
      this.removeNodeFrom(node);
      var targetParent = targetNode.getParent();
      node.setParent(targetParent);
      var targetParentChildren = targetParent.getChildren(), nodeIndex = targetNode.getIndex();
      if (nodeIndex === -1) {
        throw new Error("Ошибка при получении nodeIndex.");
      }
      if (nodeIndex === 0) {
        targetParentChildren.unshift(node);
      } else {
        targetParentChildren.splice(nodeIndex, 0, node);
      }
      targetNode.getEl().before(node.getEl());
    }, insertNodeAfter:function(node, targetNode) {
      this.removeNodeFrom(node);
      var targetParent = targetNode.getParent();
      node.setParent(targetParent);
      var targetParentChildren = targetParent.getChildren(), nodeIndex = targetNode.getIndex();
      if (nodeIndex === -1) {
        throw new Error("Ошибка при получении nodeIndex.");
      }
      if (nodeIndex === targetParentChildren.length - 1) {
        targetParentChildren.push(node);
      } else {
        targetParentChildren.splice(nodeIndex + 1, 0, node);
      }
      targetNode.getEl().after(node.getEl());
    }, removeNodeFrom:function(node, targetNode) {
      if (!targetNode) {
        targetNode = node.getParent();
        if (!targetNode) {
          return;
        }
      }
      var targetChildren = targetNode.getChildren(), nodeIndex = _.indexOf(targetChildren, node);
      if (nodeIndex != -1) {
        targetChildren.splice(nodeIndex, 1);
        node.getEl().detach();
        node.setParent(null);
      }
      targetNode.updateView();
    }, setActiveNode:function(node) {
      this._activeNode = node;
    }, getActiveNode:function() {
      return this._activeNode;
    }, getDragManager:function() {
      if (!this._dragManager) {
        this._dragManager = HM.create("hm.core.ui.tree.DragManager");
        this.needToDestroy(this._dragManager);
      }
      return this._dragManager;
    }, disableDrag:function(flag) {
      var nodes = this.getNodes();
      for (var i = 0, ln = nodes.length;i < ln;i++) {
        nodes[i].disableDrag(flag);
      }
    }, getAllChildren:function(startingNode, onlyVisible) {
      var result = [];
      if (!_.isBoolean(onlyVisible)) {
        onlyVisible = true;
      }
      if (!(startingNode instanceof hm.core.ui.tree.node.Node)) {
        startingNode = this.getRoot();
      }
      var nodeChildren = startingNode.getChildren();
      for (var i = 0, ln = nodeChildren.length;i < ln;i++) {
        result.push(nodeChildren[i]);
        if (nodeChildren[i].hasChildren()) {
          if (onlyVisible) {
            if (nodeChildren[i].isExpanded()) {
              result = result.concat(this.getAllChildren(nodeChildren[i], onlyVisible));
            }
          } else {
            result = result.concat(this.getAllChildren(nodeChildren[i], onlyVisible));
          }
        }
      }
      return result;
    }, getNodes:function() {
      return this._nodes;
    }, getNode:function(key) {
      if (this._nodesByKey === undefined) {
        this._nodesByKey = {};
      }
      if (this._nodesByKey[key] !== undefined) {
        return this._nodesByKey[key];
      }
      var nodes = this.getNodes();
      for (var i = 0, ln = nodes.length;i < ln;i++) {
        var node = nodes[i];
        this._nodesByKey[node.getKey()] = node;
      }
      return this._nodesByKey[key];
    }, getPlainTree:function(update) {
      if (this._plainTreeNodes === undefined || update) {
        this._plainTreeNodes = this.getAllChildren(this.getRoot(), false);
      }
      return this._plainTreeNodes;
    }, checkTreeChanges:function(instant) {
      var nodes = this.getPlainTree(true), nodeClass = hm.core.ui.tree.node.Node, prevKey;
      for (var i = 0, ln = nodes.length;i < ln;i++) {
        var node = nodes[i], nodeLevel = node.getLevel(), nodeKey = node.getKey(), cachedData = node.getCachedData(), currentState = node.getState();
        if (currentState != nodeClass.STATE_CREATED && currentState != nodeClass.STATE_DELETED) {
          if (cachedData.level != nodeLevel) {
            node.setState(nodeClass.STATE_CHANGED);
          }
          if (cachedData.prevKey != prevKey) {
            node.setState(nodeClass.STATE_CHANGED);
          }
        }
        node.setCachedData({level:nodeLevel, prevKey:prevKey});
        prevKey = nodeKey;
      }
      clearTimeout(this._saveTimer);
      this._saveTimer = setTimeout(_.bind(this._updateTreeNodes, this), instant ? 0 : 1500);
    }, _updateTreeNodes:function() {
      var nodes = this.getNodes();
      for (var i = 0, ln = nodes.length;i < ln;i++) {
        var node = nodes[i];
        node.setState(hm.core.ui.tree.node.Node.STATE_DEFAULT);
      }
    }});
    self = hm.core.ui.tree.Tree;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.tree.node.Node", {extend:"hm.core.ui.Component", config:{tpl:"hm/core/ui/tree/node/Node", title:"Unnamed", childrenData:[], parent:null, tree:null, folder:false, expand:false, iconClass:null, contextMenu:null, draggable:false, droppable:false, editable:false, data:{}}, statics:{counter:0, STATE_DEFAULT:"default", STATE_CHANGED:"changed", STATE_CREATED:"created", STATE_DELETED:"deleted"}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var tree = this.getTree();
      if (!tree) {
        throw new Error("Ошибка инициализации, необходимо указать tree.");
      }
      this._key = hm.core.ui.tree.node.Node.counter++;
      this._cachedData = {};
      this._itemData = $.extend({}, this.config.data);
      this._children = [];
      this._active = false;
      this._childrenInited = false;
      this._childrenRendered = false;
      this._expanded = this.config.expand;
      if (this.isFolder()) {
        this.getItemContainer().addClass("hm-tree-node-folder");
      }
      this._initContextMenu();
      this._initEditableTitle();
      this._initDnD();
      this.updateView();
    }, initChildren:function() {
      if (this._childrenInited) {
        return;
      }
      var childrenData = this.config.childrenData;
      if (!childrenData) {
        this._childrenInited = true;
        return;
      }
      var tree = this.getTree();
      for (var i = 0, ln = childrenData.length;i < ln;i++) {
        var newNode = tree.nodeFactory(childrenData[i]);
        this._children.push(newNode);
        newNode.setParent(this);
      }
      this._childrenInited = true;
      if (this.isExpanded()) {
        this.renderChildren();
      }
    }, renderChildren:function() {
      if (this._childrenRendered || !this._childrenInited) {
        return;
      }
      var children = this.getChildren(), ln = children.length;
      for (var i = 0;i < ln;i++) {
        this.appendNode(children[0]);
      }
      this._childrenRendered = true;
    }, hideChildren:function() {
      var children = this.getChildren(), ln = children.length;
      for (var i = 0;i < ln;i++) {
        children[i].hide();
      }
    }, showChildren:function() {
      var children = this.getChildren(), ln = children.length;
      for (var i = 0;i < ln;i++) {
        children[i].show();
      }
    }, _initContextMenu:function() {
      var contextMenu = this.config.contextMenu;
      if (!contextMenu) {
        return;
      }
      contextMenu.bindTo(this.getItemContainer(), this);
    }, _initEditableTitle:function() {
      var title = this.getItemContainer().find(".hm-tree-node-title");
      var originalText;
      var me = this;
      var tree = this.getTree();
      title.on("focus", function() {
        originalText = title.text();
        tree.disableDrag(true);
        var range = document.createRange();
        range.selectNodeContents(title.get(0));
        var sel = window.getSelection();
        sel.removeAllRanges();
        sel.addRange(range);
      });
      title.on("blur", function() {
        title.attr("contenteditable", false);
        var text = title.text();
        text = $.trim(text);
        text = text.replace(/\s{1,}/g, " ");
        me.setTitle(text);
        tree.disableDrag(false);
        me._editing = false;
      });
      title.on("keypress", function(event) {
        if (event.keyCode == 13) {
          event.preventDefault();
          title.blur();
        }
      });
      title.on("keydown", function(event) {
        if (event.keyCode == 27) {
          event.preventDefault();
          me.setTitle(originalText);
          title.blur();
        }
      });
    }, _initDnD:function() {
      this._initDraggable();
      this._initDroppable();
    }, _initDraggable:function() {
      if (!this.config.draggable) {
        return;
      }
      this.getEl().draggable({helper:"clone", opacity:0.6, scroll:true, start:_.bind(this._onDraggableStart, this), stop:_.bind(this._onDraggableStop, this), drag:_.bind(this._onDraggableDrag, this), appendTo:this.getTree().getEl(), zIndex:1});
    }, _initDroppable:function() {
      if (!this.config.droppable) {
        return;
      }
      this.getItemContainer().droppable({tolerance:"pointer", drop:_.bind(this._onDroppableDrop, this), over:_.bind(this._onDroppableOver, this), out:_.bind(this._onDroppableOut, this)});
    }, _initEvents:function() {
      this.getItemContainer().on("click", _.bind(this._onClick, this));
    }, _beforeClick:function(e) {
      return true;
    }, _onClick:function(e) {
      if (!this._beforeClick(e)) {
        return;
      }
      if (this.isDragging() || this.isEditing()) {
        return;
      }
      if (this.hasChildren()) {
        this.userExpand();
      }
      this.activate(true);
    }, _onDraggableStart:function(event, ui) {
      this._dragging = true;
      var dragManager = this.getTree().getDragManager(), tree = this.getTree(), parent = this.getParent();
      clearTimeout(tree._saveTimer);
      dragManager.reset();
      tree.getRoot().getChildrenContainer().append(dragManager.getDropHelper());
      dragManager.setDraggableNode(this);
      if (!this.getNextNode()) {
        var prevNode = this.getPrevNode();
        dragManager.draggableOverNode(this);
        dragManager.setDropOptions(prevNode, "after");
        this._dndPrevLevel = undefined;
        this._updateDropHelper(ui);
      }
      tree.removeNodeFrom(this);
      parent.updateView();
    }, _onDraggableStop:function(event, ui) {
      var dragManager = this.getTree().getDragManager();
      dragManager.getDropHelper().detach();
      var dropTarget = dragManager.getFinalDropTarget(), dropPosition = dragManager.getFinalDropPosition(), draggableNode = this;
      if (dropTarget) {
        switch(dropPosition) {
          case "before":
            dropTarget.addNodeBefore(draggableNode);
            break;
          case "after":
            dropTarget.addNodeAfter(draggableNode);
            break;
          case "inside":
            dropTarget.prependNode(draggableNode);
            if (!dropTarget.isExpanded()) {
              dropTarget.getChildrenContainer().hide();
            }
            break;
        }
      } else {
        this.getTree().appendNodeTo(draggableNode);
      }
      dragManager.reset();
      this._dragging = false;
      this.fireEvent("drop");
    }, _onDraggableDrag:function(event, ui) {
      this._updateDropHelper(ui);
    }, _onDroppableOver:function(event, ui) {
      var dragManager = this.getTree().getDragManager();
      dragManager.draggableOverNode(this);
      this.getOffset(true);
      this._dndPrevLevel = undefined;
      dragManager.setDropOptions(this, "before");
      this._updateDropHelper(ui);
    }, _updateDropHelper:function(ui) {
      var dragManager = this.getTree().getDragManager(), draggableOverNode = dragManager.draggableOverNode(), prevNodeLevels = dragManager.draggablePrevLevels();
      if (draggableOverNode) {
        var offsetDelta = ui.offset.left - draggableOverNode.getOffset().left;
        var step = 17;
        var level = Math.floor(offsetDelta / step), levelChanged = level !== this._dndPrevLevel || level >= 0 && level > prevNodeLevels.length;
        if (levelChanged) {
          if (level >= 0 && prevNodeLevels.length != 0) {
            if (level < prevNodeLevels.length) {
              dragManager.setDropOptions(prevNodeLevels[level], "after");
            } else {
              var lastLevelNode = prevNodeLevels[prevNodeLevels.length - 1], childrenContainer = lastLevelNode.getChildrenContainer();
              if (lastLevelNode.isFolder()) {
                if (!lastLevelNode.isExpanded()) {
                  lastLevelNode.hideChildren();
                }
                dragManager.setDropOptions(lastLevelNode, "inside");
              } else {
                dragManager.setDropOptions(lastLevelNode, "after");
              }
            }
          }
        }
        this._dndPrevLevel = level;
      }
      if (this._canDrop()) {
        this._updateDropHelperView();
        dragManager.setFinalDropOptions(dragManager.getDropTarget(), dragManager.getDropPosition());
      }
    }, _canDrop:function() {
      return true;
    }, _updateDropHelperView:function() {
      var dragManager = this.getTree().getDragManager(), dropHelper = dragManager.getDropHelper();
      var dropTarget = dragManager.getDropTarget(), dropPosition = dragManager.getDropPosition(), draggableNode = dragManager.getDraggableNode(), parentFolder;
      switch(dropPosition) {
        case "before":
          parentFolder = dropTarget.getParent();
          dropTarget.getEl().before(dropHelper);
          break;
        case "after":
          parentFolder = dropTarget.getParent();
          dropTarget.getEl().after(dropHelper);
          break;
        case "inside":
          parentFolder = dropTarget;
          dropTarget.getChildrenContainer().prepend(dropHelper);
          break;
      }
      var arrowHelper = dragManager.getArrowHelper();
      if (parentFolder && !parentFolder.isRoot()) {
        parentFolder.getIconContainer().append(arrowHelper);
      } else {
        arrowHelper.detach();
      }
    }, _onDroppableOut:function(event, ui) {
      var dragManager = this.getTree().getDragManager(), draggableOverNode = dragManager.draggableOverNode();
      var tree = this.getTree(), plainTree = tree.getPlainTree(true), lastNode = plainTree[plainTree.length - 1];
      if (lastNode === draggableOverNode) {
        dragManager.draggableOverNode(this, true);
        this.getOffset(true);
        this._dndPrevLevel = undefined;
        dragManager.setDropOptions(this, "after");
        this._updateDropHelper(ui);
      }
    }, _onDroppableDrop:function(event, ui) {
    }, setState:function(state) {
      this._state = state;
    }, getState:function() {
      return this._state;
    }, isRoot:function() {
      return false;
    }, _getLevel:function() {
      var parent = this.getParent();
      if (parent) {
        return parent._getLevel() + 1;
      }
      return 0;
    }, getLevel:function() {
      return this._getLevel() - 1;
    }, getKey:function() {
      return this._key;
    }, setCachedData:function(obj) {
      this._cachedData = obj;
    }, getCachedData:function() {
      return this._cachedData;
    }, getItemData:function() {
      return this._itemData;
    }, setItemData:function(data) {
      this._itemData = $.extend(this.getItemData(), data);
    }, getChildrenContainer:function() {
      if (!this._childrenContainer) {
        this._childrenContainer = this.getEl().children(".hm-tree-node-children");
      }
      return this._childrenContainer;
    }, getItemContainer:function() {
      if (!this._itemContainer) {
        this._itemContainer = this.getEl().children(".hm-tree-node-item");
      }
      return this._itemContainer;
    }, getIconContainer:function() {
      if (!this._iconContainer) {
        this._iconContainer = this.getItemContainer().find(".hm-tree-node-icon");
      }
      return this._iconContainer;
    }, getOffset:function(update) {
      if (this._offset === undefined || update === true) {
        this._offset = this.getEl().offset();
      }
      return this._offset;
    }, appendNode:function(node) {
      var tree = this.getTree();
      tree.appendNodeTo(node, this);
    }, prependNode:function(node) {
      var tree = this.getTree();
      tree.prependNodeTo(node, this);
    }, addNodeBefore:function(node) {
      var tree = this.getTree();
      tree.insertNodeBefore(node, this);
    }, addNodeAfter:function(node) {
      var tree = this.getTree();
      tree.insertNodeAfter(node, this);
    }, remove:function() {
      var tree = this.getTree();
      tree.removeNodeFrom(this);
      return this;
    }, destroy:function() {
      var destroy = arguments.callee;
      this.remove();
      this.callParent(destroy, arguments);
    }, removeChildNode:function(node) {
      var tree = this.getTree();
      tree.removeNodeFrom(node, this);
    }, expand:function(value) {
      if (_.isBoolean(value)) {
        this._expanded = value;
      } else {
        this._expanded = !this._expanded;
      }
      this.getChildrenContainer().toggle(this._expanded);
      this.getItemContainer().toggleClass("hm-tree-node-expanded", this._expanded);
      if (this.isExpanded()) {
        this.renderChildren();
        this.showChildren();
      } else {
        var children = this.getChildren();
        for (var i = 0, ln = children.length;i < ln;i++) {
          children[i].expand(false);
        }
      }
    }, userExpand:function(value) {
      this.expand(value);
      this.fireEvent("expand", this);
    }, activate:function(value) {
      if (_.isBoolean(value)) {
        if (this.isActive() == value) {
          return;
        }
        this._active = value;
      } else {
        this._active = !this._active;
      }
      var itemContainer = this.getItemContainer();
      itemContainer.toggleClass("hm-tree-node-active", value);
      if (this.isActive()) {
        this.expandParents();
      }
      this.fireEvent("activate", this);
    }, isActive:function() {
      return this._active;
    }, isExpanded:function() {
      return this._expanded;
    }, hasChildren:function() {
      if (this._childrenInited) {
        return this.getChildren().length != 0;
      } else {
        return this.config.childrenData !== undefined && this.config.childrenData.length != 0;
      }
    }, isDragging:function() {
      return this._dragging;
    }, isEditing:function() {
      return this._editing;
    }, disableDrag:function(flag) {
      if (this.config.draggable) {
        this.getEl().draggable("option", "disabled", flag);
      }
    }, isFolder:function() {
      return this.config.folder;
    }, getTitle:function() {
      return this.config.title;
    }, setTitle:function(title) {
      this.config.title = title;
      var $title = this.getItemContainer().find(".hm-tree-node-title");
      $title.text(title);
    }, editTitle:function() {
      this._editing = true;
      var title = this.getItemContainer().find(".hm-tree-node-title");
      title.attr("contenteditable", true);
      title.focus();
    }, getIconClass:function() {
      return this.config.iconClass;
    }, getParent:function() {
      if (this._parentNode === undefined) {
        this._parentNode = this.config.parent;
      }
      return this._parentNode;
    }, setParent:function(node) {
      this._parentNode = node;
    }, getTree:function() {
      return this.config.tree;
    }, getChildren:function() {
      return this._children;
    }, getChild:function(index) {
      var children = this.getChildren();
      if (!children[index]) {
        return false;
      }
      return children[index];
    }, getIndex:function() {
      var parentChildren = this.getParent().getChildren();
      return _.indexOf(parentChildren, this);
    }, getNeighbour:function(offset, onlyVisible, sameLevel, filter) {
      if (!offset) {
        return false;
      }
      if (!_.isBoolean(onlyVisible)) {
        onlyVisible = true;
      }
      if (!_.isBoolean(sameLevel)) {
        sameLevel = false;
      }
      if (sameLevel) {
        var parent = this.getParent(), myIndex = this.getIndex();
        var nextNode = parent.getChild(myIndex + offset);
        if (nextNode) {
          return nextNode;
        }
      } else {
        var allChildren = this.getTree().getAllChildren(null, onlyVisible), plainIndex = _.indexOf(allChildren, this);
        if (_.isFunction(filter)) {
          var slice, found;
          if (offset > 0) {
            slice = allChildren.slice(plainIndex + 1);
            found = _.find(slice, filter);
          } else {
            slice = allChildren.slice(0, plainIndex);
            slice = slice.reverse();
            found = _.find(slice, filter);
          }
          return found !== undefined ? found : false;
        } else {
          if (plainIndex !== -1 && allChildren[plainIndex + offset]) {
            return allChildren[plainIndex + offset];
          }
        }
      }
      return false;
    }, getNextNode:function(onlyVisible, sameLevel, filter) {
      return this.getNeighbour(1, onlyVisible, sameLevel, filter);
    }, getPrevNode:function(onlyVisible, sameLevel, filter) {
      return this.getNeighbour(-1, onlyVisible, sameLevel, filter);
    }, updateView:function() {
      var itemContainer = this.getItemContainer();
      itemContainer.toggleClass("hm-tree-node-hasChildren", this.hasChildren());
    }, expandParents:function() {
      var parent = this.getParent();
      if (parent) {
        parent.expand(true);
        parent.expandParents();
      }
    }});
    self = hm.core.ui.tree.node.Node;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.tree.node.Root", {extend:"hm.core.ui.tree.node.Node", config:{tpl:"hm/core/ui/tree/node/Root", title:"root", expand:true, draggable:false, droppable:false, editable:false}, _initChildren:function() {
    }, isRoot:function() {
      return true;
    }, getChildrenContainer:function() {
      return this.getEl();
    }});
    self = hm.core.ui.tree.node.Root;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.window.Window", {extend:"hm.core.ui.Component", config:{title:"", resizable:false, closeOnEscape:true, text:"", contentUrl:false, renderTo:"body", width:"50%", maxHeight:400}, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      var config = this.config;
      this.getEl().dialog({resizable:config.resizable, title:config.title, closeOnEscape:config.closeOnEscape, autoOpen:true, width:config.width});
    }, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var config = this.config, $el = this._$el;
      $el.addClass("hm-window");
      $el.css({maxHeight:config.maxHeight});
      var me = this;
      if (config.contentUrl) {
        $el.html('<div class="hm-window-ajax-loader"></div>');
        $.ajax({url:config.contentUrl, async:true}).done(function(data) {
          $el.html(data);
        });
      } else {
        $el.text(config.text);
      }
    }, show:function() {
    }});
    self = hm.core.ui.window.Window;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.window.card.Card", {extend:"hm.core.ui.Component", config:{tplByClass:true, url:null, title:HM._("Карточка")}, statics:{dialog:null}, _getDialog:function() {
      if (hm.core.ui.window.card.Card.dialog === null) {
        var dialog = $("<div></div>");
        dialog.dialog({autoOpen:false, bgiframe:true, width:500, modal:false, resizable:true, dialogClass:"pcard"});
        hm.core.ui.window.card.Card.dialog = dialog;
      }
      return hm.core.ui.window.card.Card.dialog;
    }, show:function() {
      var dialog = this._getDialog();
      var $el = this.getEl();
      if (!this._loadingInited) {
        this._loadingInited = true;
        $el.load(this.config.url, _.bind(this._onLoadingComplete, this));
      }
      dialog.contents().detach();
      dialog.append($el);
      this.centerDialog();
      dialog.dialog("option", "title", this.config.title);
      dialog.dialog("open");
    }, centerDialog:function() {
      this._getDialog().dialog("widget").position({my:"center", at:"center", of:window});
    }, _onLoadingComplete:function() {
      this.centerDialog();
    }});
    self = hm.core.ui.window.card.Card;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.window.dialog.Dialog", {extend:"hm.core.ui.Component", config:{printable:false, renderTo:"body", width:690, autoShow:true, resizable:false, draggable:true, className:"", closeOnEscape:true, title:"", url:"", loadingTpl:"hm/core/ui/window/dialog/Dialog.loading", destroyOnClose:false}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var config = this.config, url = config.url;
      if (url !== "") {
        this.loadUrl(url);
      }
    }, _renderTo:function() {
      var _renderTo = arguments.callee;
      this.callParent(_renderTo, arguments);
      var config = this.config;
      this._$el.dialog({modal:true, title:config.title, closeOnEscape:config.closeOnEscape, dialogClass:config.className, resizable:config.resizable, draggable:config.draggable, width:config.width, close:this._onClose.bind(this), autoOpen:false});
      if (config.autoShow) {
        this.show();
      }
    }, show:function() {
      if (this.config.printable) {
        $("#container").addClass("hm-hidden-if-print");
      }
      this._$el.dialog("open");
    }, hide:function() {
      this._$el.dialog("close");
    }, toCenter:function() {
      this._$el.dialog("option", "position", {my:"center", at:"center", of:window});
    }, loadUrl:function(url) {
      this.showLoading();
      jQuery.ajax({url:url, async:true}).done(_.bind(this._onLoaded, this));
    }, showLoading:function() {
      var config = this.config, $el = this._$el, $loading = this._renderTemplate(config.loadingTpl, this);
      $el.html("");
      $el.append($loading);
    }, setTitle:function(title) {
      this.getEl().dialog("option", "title", title);
    }, _onLoaded:function(data) {
      var $el = this._$el;
      $el.html(data);
      this.toCenter();
      this.fireEvent("loaded", this);
    }, _onClose:function() {
      var config = this.config;
      if (config.printable) {
        $("#container").removeClass("hm-hidden-if-print");
      }
      this.fireEvent("closed", this);
      if (config.destroyOnClose) {
        this.destroy();
      }
    }});
    self = hm.core.ui.window.dialog.Dialog;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.container.Container", {xtype:"container", extend:"hm.core.ui.Component"});
    self = hm.core.ui.container.Container;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.errorbox.ErrorBox", {config:{}, statics:{TYPE_SUCCESS:"success", TYPE_CHECK:"check", TYPE_HIGHLIGHT:"highlight", TYPE_INFO:"info", TYPE_ERROR:"error", TYPE_ALERT:"alert", getErrorBox:function() {
      var $errorBox = $("#error-box");
      this.getErrorBox = function() {
        return $errorBox;
      };
      return $errorBox;
    }, showMessage:function(options) {
      var $message = $("<div></div>"), message = options.message || "???", type = options.type || this.TYPE_SUCCESS;
      $message.text(message);
      $message.errorbox({level:type});
      this.getErrorBox().append($message);
    }, clear:function() {
      jQuery.ui.errorbox.clear();
    }}});
    self = hm.core.ui.errorbox.ErrorBox;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.imageMapEditor.map.AbstractMap", {extend:"hm.core.ObservableClass", config:{editor:null, data:null, extData:null, readOnly:false}, dataAttributes:[], __construct:function() {
      this._tasks = [];
      this._drawingByUser = true;
      this._states = {mouseOver:false, selected:false};
      var editor = this.config.editor;
      this._editor = editor;
      this._paper = editor.getPaper();
      this._init();
      this._initEvents();
    }, _init:function() {
      this._initElement();
      this._applyCommonAttributes();
      this._checkState();
      var config = this.config;
      if (config.extData) {
        this.setExtData(config.extData);
      }
      if (config.data) {
        this.setData(config.data);
        this._drawingByUser = false;
      } else {
        this._firstClickResult = this._editor.oneClick(this._onFirstClick.bind(this));
      }
    }, _initElement:function() {
    }, _initEvents:function() {
      var el = this._element;
      el.mouseover(this._onMouseOver.bind(this));
      el.mouseout(this._onMouseOut.bind(this));
      el.click(this._onMouseClick.bind(this));
    }, __destruct:function __destruct() {
      if (this._element) {
        this._element.remove();
      }
      if (this._firstClickResult) {
        this._firstClickResult.abort();
      }
      var tasks = this._tasks;
      for (var i = tasks.length - 1;i >= 0;i--) {
        tasks[i].abort();
        tasks[i].destroy();
      }
      this.callParent(__destruct, arguments);
    }, _applyCommonAttributes:function() {
      this._element.attr({"stroke-width":2, "opacity":0.7});
      this._checkState();
    }, _checkState:function() {
      this._element.attr({"fill":this.getFillColor(), "opacity":this.getOpacity(), "stroke":this.getStrokeColor()});
    }, _finalDraw:function() {
      this._drawingByUser = false;
      this.select();
      this.fireEvent("drawEnd", this);
    }, _abortTaskIfMapDestructed:function(task) {
      this._tasks.push(task);
      task.on("destroy", this._onTaskDestroy, this);
    }, getType:function() {
      return this.type;
    }, getData:function() {
      var dataAttributes = this.dataAttributes, element = this._element, result = {};
      for (var i = 0, ln = dataAttributes.length;i < ln;i++) {
        var attr = dataAttributes[i];
        result[attr] = element.attr(attr);
      }
      return result;
    }, setData:function(data) {
      var dataAttributes = this.dataAttributes, element = this._element;
      for (var i = 0, ln = dataAttributes.length;i < ln;i++) {
        var attrName = dataAttributes[i];
        if (!data.hasOwnProperty(attrName)) {
          continue;
        }
        element.attr(attrName, data[attrName]);
      }
    }, unSelect:function() {
      this._states.selected = false;
      this._checkState();
      this.fireEvent("unSelect", this);
    }, select:function() {
      this._states.selected = true;
      this._checkState();
      this.fireEvent("select", this);
    }, mark:function() {
      this._states.mark = true;
      this._checkState();
    }, unMark:function() {
      this._states.mark = false;
      this._checkState();
    }, selected:function() {
      return this._states.selected;
    }, setReadOnly:function(readOnly) {
      this.config.readOnly = readOnly;
      this._checkState();
    }, getFillColor:function() {
      if (this._states.mark) {
        return "#ff0000";
      }
      if (this.config.readOnly) {
        if (this._states.selected) {
          return "#e4e4e4";
        }
      }
      if (this._states.selected) {
        return "#00ff00";
      }
      if (this._states.mouseOver) {
        return "#e4e4e4";
      }
      return "rgba(255,255,255, 0.3)";
    }, getStrokeColor:function() {
      if (this._states.selected) {
        return "#e65d2a";
      }
      return "#e65d2a";
    }, getOpacity:function() {
      if (this.config.readOnly) {
        if (this._states.selected) {
          return 1;
        }
        if (this._states.mouseOver) {
          return 0.5;
        }
        return 0;
      }
      if (this._states.mark) {
        return 0.5;
      }
      if (this._states.selected) {
        return 0.5;
      }
      if (this._states.mouseOver) {
        return 0.5;
      }
      return 0.3;
    }, setExtData:function(extData) {
      this.config.extData = extData;
    }, getExtData:function() {
      return this.config.extData;
    }, waitOfDrawingEnd:function() {
      return this._drawingByUser;
    }, getHelp:function() {
      return "";
    }, _onTaskDestroy:function(task) {
      var tasks = this._tasks;
      for (var i = tasks.length - 1;i >= 0;i--) {
        if (tasks[i] === task) {
          tasks.splice(i, 1);
          return;
        }
      }
    }, _onMouseClick:function() {
      this._states.selected = !this._states.selected;
      this._checkState();
      if (this._states.selected) {
        this.fireEvent("select", this);
      } else {
        this.fireEvent("unSelect", this);
      }
    }, _onMouseOut:function() {
      if (this._drawingByUser) {
        return;
      }
      this._states.mouseOver = false;
      this._checkState();
    }, _onMouseOver:function() {
      if (this._drawingByUser) {
        return;
      }
      this._element.attr({cursor:"pointer"});
      this._states.mouseOver = true;
      this._checkState();
    }, _onFirstClick:function() {
      delete this._firstClickResult;
    }});
    hm.core.ui.imageMapEditor.map.AbstractMap.factory = function(type, cfg) {
      var className;
      switch(type) {
        case "circle":
          className = "hm.core.ui.imageMapEditor.map.CircleMap";
          break;
        case "ellipse":
          className = "hm.core.ui.imageMapEditor.map.EllipseMap";
          break;
        case "polygon":
          className = "hm.core.ui.imageMapEditor.map.PolygonMap";
          break;
        case "square":
          className = "hm.core.ui.imageMapEditor.map.SquareMap";
          break;
        case "rect":
          className = "hm.core.ui.imageMapEditor.map.RectMap";
          break;
      }
      return HM.create(className, cfg);
    };
    self = hm.core.ui.imageMapEditor.map.AbstractMap;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.imageMapEditor.ImageMapEditor", {extend:"hm.core.ui.Component", requires:["hm.core.ui.imageMapEditor.map.AbstractMap"], config:{tplByClass:true, readOnly:false, imageUrl:"", classNameSpace:"hm-imageMapEditor"}, MAX_IMAGE_WIDTH:800, _init:function() {
      var _init = arguments.callee;
      this._selectedMaps = [];
      this.callParent(_init, arguments);
      var $el = this._$el, ns = this._ns;
      this._$elImageContainer = ns.find("imageContainer");
      this._$elButtonDelete = ns.find("button-delete");
      this._$elButtonsCreate = ns.find("button-create");
      this._$elToolbar = ns.find("toolbar");
      this._$elHelp = ns.find("help");
      this._maps = [];
      var config = this.config;
      if (config.readOnly) {
        this.setReadOnly(config.readOnly);
      }
      if (config.imageUrl) {
        this.setImageUrl(config.imageUrl);
      }
    }, setImageUrl:function(url) {
      var img = this._img = new Image;
      img.onload = this._onImageLoaded.bind(this);
      img.src = url;
    }, setReadOnly:function(readOnly) {
      this.config.readOnly = readOnly;
      if (readOnly) {
        this._$elToolbar.hide();
      } else {
        this._$elToolbar.show();
      }
      var maps = this._maps;
      for (var i = 0, ln = maps.length;i < ln;i++) {
        maps[i].setReadOnly(readOnly);
      }
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      var $el = this.getEl();
      $el.on("click", ".hm-imageMapEditor-button-create", this._onClickCreate.bind(this));
      $el.on("click", ".hm-imageMapEditor-button-delete", this._onClickDelete.bind(this));
    }, getPaper:function() {
      return this._paper;
    }, getData:function() {
      var maps = this._maps, result = [];
      for (var i = 0, ln = maps.length;i < ln;i++) {
        var map = maps[i];
        result.push({type:map.type, data:map.getData()});
      }
      return result;
    }, setData:function(data) {
      for (var i = 0, ln = data.length;i < ln;i++) {
        var mapCfg = data[i], mapType = mapCfg.type, mapData = mapCfg.data;
        this.createMap(mapType, mapData);
      }
    }, clear:function() {
      var maps = this._maps;
      for (var i = maps.length - 1;i >= 0;i--) {
        maps[i].destroy();
      }
    }, createMap:function(type, data) {
      data = data || null;
      var map = hm.core.ui.imageMapEditor.map.AbstractMap.factory(type, {editor:this, data:data});
      return this.add(map);
    }, add:function(map) {
      if (this._mapWhichIsExpectedToDrawing) {
        this._mapWhichIsExpectedToDrawing.destroy();
      }
      map.setReadOnly(this.config.readOnly);
      map.on("select", this._onMapSelect, this);
      map.on("unSelect", this._onMapUnSelect, this);
      map.on("destroy", this._onMapDestroy, this);
      if (map.waitOfDrawingEnd()) {
        map.on("drawEnd", this._onMapDrawEnd, this);
        this._mapWhichIsExpectedToDrawing = map;
      }
      this._maps.push(map);
      this.fireEvent("mapAdded", map);
      return map;
    }, _onMapDrawEnd:function(e, map) {
      if (this._mapWhichIsExpectedToDrawing === map) {
        delete this._mapWhichIsExpectedToDrawing;
      }
      this._clearButtonsHighlighting();
    }, _clearButtonsHighlighting:function() {
      this._$elHelp.text("");
      var $buttons = this._$elButtonsCreate;
      $buttons.prop("disabled", false);
      $buttons.css({outline:"none"});
    }, oneClick:function(callBack) {
      var $image = this._$elImageContainer, me = this, task, onClick = function(e) {
        $image.off("click", onClick);
        task.success();
        callBack(me.getPoint.apply(me, me._getCoordinatesFromEvent(e)));
      };
      $image.on("click", onClick);
      task = HM.create("hm.core.ui.imageMapEditor.task.Task", {listeners:{abort:function() {
        $image.off("click", onClick);
      }}});
      return task;
    }, oneEnter:function(callBack) {
      var $doc = $(document), me = this, task, onEnter = function(e) {
        if (e.keyCode !== 13) {
          return;
        }
        $doc.off("keydown", onEnter);
        e.preventDefault();
        task.success();
        callBack();
      };
      $doc.on("keydown", onEnter);
      task = HM.create("hm.core.ui.imageMapEditor.task.Task", {listeners:{abort:function() {
        $doc.off("keyup", onEnter);
      }}});
      return task;
    }, getPoint:function(x, y) {
      return{x:x, y:y, length:Math.sqrt(x * x + y * y)};
    }, getRelativePoint:function(center, point) {
      var dx = point.x - center.x, dy = point.y - center.y;
      return this.getPoint(dx, dy);
    }, _getCoordinatesFromEvent:function(e) {
      return[e.offsetX === undefined ? e.originalEvent.layerX : e.offsetX, e.offsetY === undefined ? e.originalEvent.layerY : e.offsetY];
    }, mouseMoveAndClick:function(cfg) {
      var $image = this._$elImageContainer, center = cfg.center, scope = cfg.scope || this, mouseMoveCallBack = cfg.mouseMoveCallBack, mouseClickCallBack = cfg.mouseClickCallBack, me = this, task;
      var onMouseMove = function(e) {
        var point = me.getPoint.apply(me, me._getCoordinatesFromEvent(e)), relativePoint = me.getRelativePoint(center, point);
        mouseMoveCallBack.call(scope, relativePoint, point);
      };
      $image.on("mousemove", onMouseMove);
      var oneClickResult = this.oneClick(function(point) {
        var relativePoint = me.getRelativePoint(center, point);
        task.success();
        mouseClickCallBack.call(scope, relativePoint, point);
        $image.off("mousemove", onMouseMove);
      });
      task = HM.create("hm.core.ui.imageMapEditor.task.Task", {listeners:{abort:function() {
        $image.off("mousemove", onMouseMove);
        oneClickResult.abort();
      }}});
      return task;
    }, canvasIsReady:function() {
      return!!this._visibleImage;
    }, _onImageLoaded:function() {
      var img = this._img, imgWidth = img.width, imgHeight = img.height, maxImageWidth = this.MAX_IMAGE_WIDTH;
      if (imgWidth > maxImageWidth) {
        var aspectRatio = imgWidth / imgHeight;
        imgWidth = maxImageWidth;
        imgHeight = imgWidth / aspectRatio;
      }
      if (this._paper) {
        this._paper.clear();
        this._paper.remove();
      }
      var paper = this._paper = Raphael(this._$elImageContainer[0], imgWidth, imgHeight);
      this._visibleImage = paper.image(img.src, 0, 0, imgWidth, imgHeight);
      this.fireEvent("canvasReady");
    }, _removeFromSelectedMapsList:function(map) {
      var i = this._getSelectedMapIndex(map);
      if (i === -1) {
        return;
      }
      this._selectedMaps.splice(i, 1);
      if (!this._selectedMaps.length) {
        this._$elButtonDelete.hide();
      }
    }, _getSelectedMapIndex:function(map) {
      var selectedMaps = this._selectedMaps;
      for (var i = selectedMaps.length - 1;i >= 0;i--) {
        var selectedMap = selectedMaps[i];
        if (selectedMap === map) {
          return i;
        }
      }
      return-1;
    }, _onMapDestroy:function(e, map) {
      if (this._mapWhichIsExpectedToDrawing === map) {
        delete this._mapWhichIsExpectedToDrawing;
        this._clearButtonsHighlighting();
      }
      this._removeFromSelectedMapsList(map);
      var maps = this._maps;
      for (var i = 0, ln = maps.length;i < ln;i++) {
        if (maps[i] !== map) {
          continue;
        }
        maps.splice(i, 1);
        break;
      }
    }, _onMapSelect:function(e, map) {
      if (this._getSelectedMapIndex(map) === -1) {
        this._selectedMaps.push(map);
      }
      this._$elButtonDelete.show();
    }, _onMapUnSelect:function(e, map) {
      this._removeFromSelectedMapsList(map);
      if (!this._selectedMaps.length) {
        this._$elButtonDelete.hide();
      }
    }, _onClickCreate:function(e) {
      e.preventDefault();
      var $button = $(e.currentTarget);
      var map = this.createMap($button.data("type"));
      this._$elHelp.text(map.getHelp());
      this._$elButtonsCreate.prop("disabled", true);
      $button.css({outline:"2px solid #ff0000"});
    }, _onClickDelete:function(e) {
      e.preventDefault();
      var maps = this._selectedMaps;
      for (var i = maps.length - 1;i >= 0;i--) {
        maps[i].destroy();
      }
    }});
    self = hm.core.ui.imageMapEditor.ImageMapEditor;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.imageMapEditor.map.CircleMap", {extend:"hm.core.ui.imageMapEditor.map.AbstractMap", config:{}, type:"circle", dataAttributes:["cx", "cy", "r"], _initElement:function() {
      this._element = this._paper.circle(0, 0, 0);
    }, _repaint:function(leftTopCorner, dx, dy) {
      var radius = Math.abs(Math.abs(dx) < Math.abs(dy) ? dx : dy), deltaX = dx > 0 ? radius : -radius, deltaY = dy > 0 ? radius : -radius;
      this._element.attr({r:radius, cx:leftTopCorner.x + deltaX, cy:leftTopCorner.y + deltaY});
    }, getHelp:function() {
      return "";
    }, _onFirstClick:function(point) {
      var _onFirstClick = arguments.callee;
      this.callParent(_onFirstClick, arguments);
      var leftTopCorner = point, circle = this._element, me = this;
      circle.attr({cx:point.x, cy:point.y});
      function changeRadius(relativePoint, point) {
        var dx = relativePoint.x / 2, dy = relativePoint.y / 2;
        me._repaint(leftTopCorner, dx, dy);
      }
      function finalChangeRadius(relativePoint, point) {
        changeRadius(relativePoint, point);
        me._finalDraw();
      }
      var task = this._editor.mouseMoveAndClick({center:point, mouseMoveCallBack:changeRadius, mouseClickCallBack:finalChangeRadius});
      this._abortTaskIfMapDestructed(task);
    }});
    self = hm.core.ui.imageMapEditor.map.CircleMap;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.imageMapEditor.map.EllipseMap", {extend:"hm.core.ui.imageMapEditor.map.CircleMap", type:"ellipse", dataAttributes:["cx", "cy", "rx", "ry"], _initElement:function() {
      this._element = this._paper.ellipse(0, 0, 0, 0);
    }, _repaint:function(leftTopCorner, dx, dy) {
      this._element.attr({rx:Math.abs(dx), ry:Math.abs(dy), cx:leftTopCorner.x + dx, cy:leftTopCorner.y + dy});
    }});
    self = hm.core.ui.imageMapEditor.map.EllipseMap;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.imageMapEditor.map.PolygonMap", {extend:"hm.core.ui.imageMapEditor.map.AbstractMap", config:{}, type:"polygon", dataAttributes:["path"], _initElement:function() {
      this._element = this._paper.path("M0,0");
    }, getPathString:function(points, lock) {
      var resultArr = [];
      for (var i = 0, ln = points.length;i < ln;i++) {
        resultArr.push(points[i].x + "," + points[i].y);
      }
      if (lock) {
        resultArr.push(resultArr[0]);
      }
      return "M" + resultArr.join("L");
    }, _onFirstClick:function(point) {
      var _onFirstClick = arguments.callee;
      this.callParent(_onFirstClick, arguments);
      var leftTopPoint = point, points = [point], path = this.getPathString(points), me = this;
      var path = this._element, me = this, editor = this._editor, oneClickResult = null;
      path.attr({"path":this.getPathString(points)});
      function nextClick() {
        oneClickResult = editor.oneClick(onNextClick);
        me._abortTaskIfMapDestructed(oneClickResult);
      }
      function onNextClick(point) {
        if (points.length >= 3) {
          var firstPoint = points[0], delta = Math.sqrt(Math.pow(firstPoint.x - point.x, 2) + Math.pow(firstPoint.y - point.y, 2));
          if (delta <= 4) {
            enterTask.abort();
            onFinal();
            return;
          }
        }
        points.push(point);
        path.attr({path:me.getPathString(points)});
        nextClick();
      }
      nextClick();
      function onFinal() {
        if (oneClickResult) {
          oneClickResult.abort();
        }
        path.attr({path:me.getPathString(points, true)});
        me._finalDraw();
      }
      var enterTask = editor.oneEnter(onFinal);
      this._abortTaskIfMapDestructed(enterTask);
    }});
    self = hm.core.ui.imageMapEditor.map.PolygonMap;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.imageMapEditor.map.RectMap", {extend:"hm.core.ui.imageMapEditor.map.AbstractMap", config:{}, type:"rect", dataAttributes:["x", "y", "width", "height"], _initElement:function() {
      this._element = this._paper.rect(0, 0, 0, 0);
    }, _fixPoint:function(point) {
      return point;
    }, _onFirstClick:function(point) {
      var _onFirstClick = arguments.callee;
      this.callParent(_onFirstClick, arguments);
      var pointLeftTop = point, rect = this._element, me = this;
      rect.attr({"x":point.x, "y":point.y});
      function moveRect(dx, dy) {
        rect.attr({x:pointLeftTop.x + dx, y:pointLeftTop.y + dy});
      }
      function changeSize(relativePoint, point) {
        var dx = 0, dy = 0;
        relativePoint = me._fixPoint(relativePoint);
        if (relativePoint.x < 0) {
          dx = relativePoint.x;
        }
        if (relativePoint.y < 0) {
          dy = relativePoint.y;
        }
        moveRect(dx, dy);
        rect.attr({width:Math.abs(relativePoint.x), height:Math.abs(relativePoint.y)});
      }
      function finalChangeSize(relativePoint, point) {
        changeSize(relativePoint, point);
        me._finalDraw();
      }
      var task = this._editor.mouseMoveAndClick({center:point, mouseMoveCallBack:changeSize, mouseClickCallBack:finalChangeSize});
      this._abortTaskIfMapDestructed(task);
    }});
    self = hm.core.ui.imageMapEditor.map.RectMap;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.imageMapEditor.map.SquareMap", {extend:"hm.core.ui.imageMapEditor.map.RectMap", type:"square", _fixPoint:function(point) {
      var x = point.x, y = point.y, absX = Math.abs(x), absY = Math.abs(y);
      if (absX > absY) {
        x = x * absY / absX;
      } else {
        y = y * absX / absY;
      }
      return this.config.editor.getPoint(x, y);
    }, getHelp:function() {
      return "";
    }});
    self = hm.core.ui.imageMapEditor.map.SquareMap;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.imageMapEditor.task.Task", {extend:"hm.core.ObservableClass", abort:function() {
      this.fireEvent("abort");
    }, success:function() {
      this.destroy();
    }});
    self = hm.core.ui.imageMapEditor.task.Task;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.nanoscroller.Nanoscroller", {extend:"hm.core.ObservableClass", config:{el:null, options:{}}, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      this._initPlugin();
      hm.core.ui.nanoscroller.Nanoscroller.prototype._initPlugin = HM.emptyFn;
      var elCfg = this.config.el, $el;
      if (typeof elCfg === "string") {
        $el = $(elCfg);
      } else {
        if (elCfg instanceof jQuery) {
          $el = elCfg;
        } else {
          if (elCfg instanceof Array) {
            $el = $(elCfg.join(""));
          } else {
            if (hm.core.DOM.isNode(elCfg)) {
              $el = $(elCfg);
            } else {
              throw new Error("Передан некорректный параметр el при создании компонента");
            }
          }
        }
      }
      $el.addClass("nano").children().addClass("nano-content");
      $el.nanoScroller(this.config.options);
      this._$el = $el;
    }, getEl:function() {
      return this._$el;
    }, scroll:function(value) {
      this.getEl().nanoScroller({scroll:value});
    }, update:function() {
      var me = this;
      if (this._updateTimeout !== undefined) {
        clearTimeout(this._updateTimeout);
        this._updateTimeout = undefined;
      }
      this._updateTimeout = setTimeout(function() {
        me.getEl().nanoScroller();
        me.fireEvent("updated", me);
      }, 50);
    }, _initPlugin:function() {
      (function(factory) {
        if (typeof define === "function" && define.amd) {
          return define(["jquery"], function($) {
            return factory($, window, document);
          });
        } else {
          if (typeof exports === "object") {
            return module.exports = factory(require("jquery"), window, document);
          } else {
            return factory(jQuery, window, document);
          }
        }
      })(function($, window, document) {
        var BROWSER_IS_IE7, BROWSER_SCROLLBAR_WIDTH, DOMSCROLL, DOWN, DRAG, ENTER, KEYDOWN, KEYUP, MOUSEDOWN, MOUSEENTER, MOUSEMOVE, MOUSEUP, MOUSEWHEEL, NanoScroll, PANEDOWN, RESIZE, SCROLL, SCROLLBAR, TOUCHMOVE, UP, WHEEL, cAF, defaults, getBrowserScrollbarWidth, hasTransform, isFFWithBuggyScrollbar, rAF, transform, _elementStyle, _prefixStyle, _vendor;
        defaults = {paneClass:"nano-pane", sliderClass:"nano-slider", contentClass:"nano-content", enabledClass:"has-scrollbar", flashedClass:"flashed", activeClass:"active", iOSNativeScrolling:false, preventPageScrolling:false, disableResize:false, alwaysVisible:false, flashDelay:1500, sliderMinHeight:20, sliderMaxHeight:null, documentContext:null, windowContext:null};
        SCROLLBAR = "scrollbar";
        SCROLL = "scroll";
        MOUSEDOWN = "mousedown";
        MOUSEENTER = "mouseenter";
        MOUSEMOVE = "mousemove";
        MOUSEWHEEL = "mousewheel";
        MOUSEUP = "mouseup";
        RESIZE = "resize";
        DRAG = "drag";
        ENTER = "enter";
        UP = "up";
        PANEDOWN = "panedown";
        DOMSCROLL = "DOMMouseScroll";
        DOWN = "down";
        WHEEL = "wheel";
        KEYDOWN = "keydown";
        KEYUP = "keyup";
        TOUCHMOVE = "touchmove";
        BROWSER_IS_IE7 = window.navigator.appName === "Microsoft Internet Explorer" && (/msie 7./i.test(window.navigator.appVersion) && window.ActiveXObject);
        BROWSER_SCROLLBAR_WIDTH = null;
        rAF = window.requestAnimationFrame;
        cAF = window.cancelAnimationFrame;
        _elementStyle = document.createElement("div").style;
        _vendor = function() {
          var i, transform, vendor, vendors, _i, _len;
          vendors = ["t", "webkitT", "MozT", "msT", "OT"];
          for (i = _i = 0, _len = vendors.length;_i < _len;i = ++_i) {
            vendor = vendors[i];
            transform = vendors[i] + "ransform";
            if (transform in _elementStyle) {
              return vendors[i].substr(0, vendors[i].length - 1);
            }
          }
          return false;
        }();
        _prefixStyle = function(style) {
          if (_vendor === false) {
            return false;
          }
          if (_vendor === "") {
            return style;
          }
          return _vendor + style.charAt(0).toUpperCase() + style.substr(1);
        };
        transform = _prefixStyle("transform");
        hasTransform = transform !== false;
        getBrowserScrollbarWidth = function() {
          var outer, outerStyle, scrollbarWidth;
          outer = document.createElement("div");
          outerStyle = outer.style;
          outerStyle.position = "absolute";
          outerStyle.width = "100px";
          outerStyle.height = "100px";
          outerStyle.overflow = SCROLL;
          outerStyle.top = "-9999px";
          document.body.appendChild(outer);
          scrollbarWidth = outer.offsetWidth - outer.clientWidth;
          document.body.removeChild(outer);
          return scrollbarWidth;
        };
        isFFWithBuggyScrollbar = function() {
          var isOSXFF, ua, version;
          ua = window.navigator.userAgent;
          isOSXFF = /(?=.+Mac OS X)(?=.+Firefox)/.test(ua);
          if (!isOSXFF) {
            return false;
          }
          version = /Firefox\/\d{2}\./.exec(ua);
          if (version) {
            version = version[0].replace(/\D+/g, "");
          }
          return isOSXFF && +version > 23;
        };
        NanoScroll = function() {
          function NanoScroll(el, options) {
            this.el = el;
            this.options = options;
            BROWSER_SCROLLBAR_WIDTH || (BROWSER_SCROLLBAR_WIDTH = getBrowserScrollbarWidth());
            this.$el = $(this.el);
            this.doc = $(this.options.documentContext || document);
            this.win = $(this.options.windowContext || window);
            this.body = this.doc.find("body");
            this.$content = this.$el.children("." + this.options.contentClass);
            this.$content.attr("tabindex", this.options.tabIndex || 0);
            this.content = this.$content[0];
            this.previousPosition = 0;
            if (this.options.iOSNativeScrolling && this.el.style.WebkitOverflowScrolling != null) {
              this.nativeScrolling();
            } else {
              this.generate();
            }
            this.createEvents();
            this.addEvents();
            this.reset();
          }
          NanoScroll.prototype.preventScrolling = function(e, direction) {
            if (!this.isActive) {
              return;
            }
            if (e.type === DOMSCROLL) {
              if (direction === DOWN && e.originalEvent.detail > 0 || direction === UP && e.originalEvent.detail < 0) {
                e.preventDefault();
              }
            } else {
              if (e.type === MOUSEWHEEL) {
                if (!e.originalEvent || !e.originalEvent.wheelDelta) {
                  return;
                }
                if (direction === DOWN && e.originalEvent.wheelDelta < 0 || direction === UP && e.originalEvent.wheelDelta > 0) {
                  e.preventDefault();
                }
              }
            }
          };
          NanoScroll.prototype.nativeScrolling = function() {
            this.$content.css({WebkitOverflowScrolling:"touch"});
            this.iOSNativeScrolling = true;
            this.isActive = true;
          };
          NanoScroll.prototype.updateScrollValues = function() {
            var content, direction;
            content = this.content;
            this.maxScrollTop = content.scrollHeight - content.clientHeight;
            this.prevScrollTop = this.contentScrollTop || 0;
            this.contentScrollTop = content.scrollTop;
            direction = this.contentScrollTop > this.previousPosition ? "down" : this.contentScrollTop < this.previousPosition ? "up" : "same";
            this.previousPosition = this.contentScrollTop;
            if (direction !== "same") {
              this.$el.trigger("update", {position:this.contentScrollTop, maximum:this.maxScrollTop, direction:direction});
            }
            if (!this.iOSNativeScrolling) {
              this.maxSliderTop = this.paneHeight - this.sliderHeight;
              this.sliderTop = this.maxScrollTop === 0 ? 0 : this.contentScrollTop * this.maxSliderTop / this.maxScrollTop;
            }
          };
          NanoScroll.prototype.setOnScrollStyles = function() {
            var cssValue;
            if (hasTransform) {
              cssValue = {};
              cssValue[transform] = "translate(0, " + this.sliderTop + "px)";
            } else {
              cssValue = {top:this.sliderTop};
            }
            if (rAF) {
              if (cAF && this.scrollRAF) {
                cAF(this.scrollRAF);
              }
              this.scrollRAF = rAF(function(_this) {
                return function() {
                  _this.scrollRAF = null;
                  return _this.slider.css(cssValue);
                };
              }(this));
            } else {
              this.slider.css(cssValue);
            }
          };
          NanoScroll.prototype.createEvents = function() {
            this.events = {down:function(_this) {
              return function(e) {
                _this.isBeingDragged = true;
                _this.offsetY = e.pageY - _this.slider.offset().top;
                if (!_this.slider.is(e.target)) {
                  _this.offsetY = 0;
                }
                _this.pane.addClass(_this.options.activeClass);
                _this.doc.bind(MOUSEMOVE, _this.events[DRAG]).bind(MOUSEUP, _this.events[UP]);
                _this.body.bind(MOUSEENTER, _this.events[ENTER]);
                return false;
              };
            }(this), drag:function(_this) {
              return function(e) {
                _this.sliderY = e.pageY - _this.$el.offset().top - _this.paneTop - (_this.offsetY || _this.sliderHeight * 0.5);
                _this.scroll();
                if (_this.contentScrollTop >= _this.maxScrollTop && _this.prevScrollTop !== _this.maxScrollTop) {
                  _this.$el.trigger("scrollend");
                } else {
                  if (_this.contentScrollTop === 0 && _this.prevScrollTop !== 0) {
                    _this.$el.trigger("scrolltop");
                  }
                }
                return false;
              };
            }(this), up:function(_this) {
              return function(e) {
                _this.isBeingDragged = false;
                _this.pane.removeClass(_this.options.activeClass);
                _this.doc.unbind(MOUSEMOVE, _this.events[DRAG]).unbind(MOUSEUP, _this.events[UP]);
                _this.body.unbind(MOUSEENTER, _this.events[ENTER]);
                return false;
              };
            }(this), resize:function(_this) {
              return function(e) {
                _this.reset();
              };
            }(this), panedown:function(_this) {
              return function(e) {
                _this.sliderY = (e.offsetY || e.originalEvent.layerY) - _this.sliderHeight * 0.5;
                _this.scroll();
                _this.events.down(e);
                return false;
              };
            }(this), scroll:function(_this) {
              return function(e) {
                _this.updateScrollValues();
                if (_this.isBeingDragged) {
                  return;
                }
                if (!_this.iOSNativeScrolling) {
                  _this.sliderY = _this.sliderTop;
                  _this.setOnScrollStyles();
                }
                if (e == null) {
                  return;
                }
                if (_this.contentScrollTop >= _this.maxScrollTop) {
                  if (_this.options.preventPageScrolling) {
                    _this.preventScrolling(e, DOWN);
                  }
                  if (_this.prevScrollTop !== _this.maxScrollTop) {
                    _this.$el.trigger("scrollend");
                  }
                } else {
                  if (_this.contentScrollTop === 0) {
                    if (_this.options.preventPageScrolling) {
                      _this.preventScrolling(e, UP);
                    }
                    if (_this.prevScrollTop !== 0) {
                      _this.$el.trigger("scrolltop");
                    }
                  }
                }
              };
            }(this), wheel:function(_this) {
              return function(e) {
                var delta;
                if (e == null) {
                  return;
                }
                delta = e.delta || (e.wheelDelta || (e.originalEvent && e.originalEvent.wheelDelta || (-e.detail || e.originalEvent && -e.originalEvent.detail)));
                if (delta) {
                  _this.sliderY += -delta / 3;
                }
                _this.scroll();
                return false;
              };
            }(this), enter:function(_this) {
              return function(e) {
                var _ref;
                if (!_this.isBeingDragged) {
                  return;
                }
                if ((e.buttons || e.which) !== 1) {
                  return(_ref = _this.events)[UP].apply(_ref, arguments);
                }
              };
            }(this)};
          };
          NanoScroll.prototype.addEvents = function() {
            var events;
            this.removeEvents();
            events = this.events;
            if (!this.options.disableResize) {
              this.win.bind(RESIZE, events[RESIZE]);
            }
            if (!this.iOSNativeScrolling) {
              this.slider.bind(MOUSEDOWN, events[DOWN]);
              this.pane.bind(MOUSEDOWN, events[PANEDOWN]).bind("" + MOUSEWHEEL + " " + DOMSCROLL, events[WHEEL]);
            }
            this.$content.bind("" + SCROLL + " " + MOUSEWHEEL + " " + DOMSCROLL + " " + TOUCHMOVE, events[SCROLL]);
          };
          NanoScroll.prototype.removeEvents = function() {
            var events;
            events = this.events;
            this.win.unbind(RESIZE, events[RESIZE]);
            if (!this.iOSNativeScrolling) {
              this.slider.unbind();
              this.pane.unbind();
            }
            this.$content.unbind("" + SCROLL + " " + MOUSEWHEEL + " " + DOMSCROLL + " " + TOUCHMOVE, events[SCROLL]);
          };
          NanoScroll.prototype.generate = function() {
            var contentClass, cssRule, currentPadding, options, pane, paneClass, sliderClass;
            options = this.options;
            paneClass = options.paneClass, sliderClass = options.sliderClass, contentClass = options.contentClass;
            if (!(pane = this.$el.children("." + paneClass)).length && !pane.children("." + sliderClass).length) {
              this.$el.append('<div class="' + paneClass + '"><div class="' + sliderClass + '" /></div>');
            }
            this.pane = this.$el.children("." + paneClass);
            this.slider = this.pane.find("." + sliderClass);
            if (BROWSER_SCROLLBAR_WIDTH === 0 && isFFWithBuggyScrollbar()) {
              currentPadding = window.getComputedStyle(this.content, null).getPropertyValue("padding-right").replace(/[^0-9.]+/g, "");
              cssRule = {right:-14, paddingRight:+currentPadding + 14};
            } else {
              if (BROWSER_SCROLLBAR_WIDTH) {
                cssRule = {right:-BROWSER_SCROLLBAR_WIDTH};
                this.$el.addClass(options.enabledClass);
              }
            }
            if (cssRule != null) {
              this.$content.css(cssRule);
            }
            return this;
          };
          NanoScroll.prototype.restore = function() {
            this.stopped = false;
            if (!this.iOSNativeScrolling) {
              this.pane.show();
            }
            this.addEvents();
          };
          NanoScroll.prototype.reset = function() {
            var content, contentHeight, contentPosition, contentStyle, contentStyleOverflowY, paneBottom, paneHeight, paneOuterHeight, paneTop, parentMaxHeight, right, sliderHeight;
            if (this.iOSNativeScrolling) {
              this.contentHeight = this.content.scrollHeight;
              return;
            }
            if (!this.$el.find("." + this.options.paneClass).length) {
              this.generate().stop();
            }
            if (this.stopped) {
              this.restore();
            }
            content = this.content;
            contentStyle = content.style;
            contentStyleOverflowY = contentStyle.overflowY;
            if (BROWSER_IS_IE7) {
              this.$content.css({height:this.$content.height()});
            }
            contentHeight = content.scrollHeight + BROWSER_SCROLLBAR_WIDTH;
            parentMaxHeight = parseInt(this.$el.css("max-height"), 10);
            if (parentMaxHeight > 0) {
              this.$el.height("");
              this.$el.height(content.scrollHeight > parentMaxHeight ? parentMaxHeight : content.scrollHeight);
            }
            paneHeight = this.pane.outerHeight(false);
            paneTop = parseInt(this.pane.css("top"), 10);
            paneBottom = parseInt(this.pane.css("bottom"), 10);
            paneOuterHeight = paneHeight + paneTop + paneBottom;
            sliderHeight = Math.round(paneOuterHeight / contentHeight * paneHeight);
            if (sliderHeight < this.options.sliderMinHeight) {
              sliderHeight = this.options.sliderMinHeight;
            } else {
              if (this.options.sliderMaxHeight != null && sliderHeight > this.options.sliderMaxHeight) {
                sliderHeight = this.options.sliderMaxHeight;
              }
            }
            if (contentStyleOverflowY === SCROLL && contentStyle.overflowX !== SCROLL) {
              sliderHeight += BROWSER_SCROLLBAR_WIDTH;
            }
            this.maxSliderTop = paneOuterHeight - sliderHeight;
            this.contentHeight = contentHeight;
            this.paneHeight = paneHeight;
            this.paneOuterHeight = paneOuterHeight;
            this.sliderHeight = sliderHeight;
            this.paneTop = paneTop;
            this.slider.height(sliderHeight);
            this.events.scroll();
            this.pane.show();
            this.isActive = true;
            if (content.scrollHeight === content.clientHeight || this.pane.outerHeight(true) >= content.scrollHeight && contentStyleOverflowY !== SCROLL) {
              this.pane.hide();
              this.isActive = false;
            } else {
              if (this.el.clientHeight === content.scrollHeight && contentStyleOverflowY === SCROLL) {
                this.slider.hide();
              } else {
                this.slider.show();
              }
            }
            this.pane.css({opacity:this.options.alwaysVisible ? 1 : "", visibility:this.options.alwaysVisible ? "visible" : ""});
            contentPosition = this.$content.css("position");
            if (contentPosition === "static" || contentPosition === "relative") {
              right = parseInt(this.$content.css("right"), 10);
              if (right) {
                this.$content.css({right:"", marginRight:right});
              }
            }
            return this;
          };
          NanoScroll.prototype.scroll = function() {
            if (!this.isActive) {
              return;
            }
            this.sliderY = Math.max(0, this.sliderY);
            this.sliderY = Math.min(this.maxSliderTop, this.sliderY);
            this.$content.scrollTop(this.maxScrollTop * this.sliderY / this.maxSliderTop);
            if (!this.iOSNativeScrolling) {
              this.updateScrollValues();
              this.setOnScrollStyles();
            }
            return this;
          };
          NanoScroll.prototype.scrollBottom = function(offsetY) {
            if (!this.isActive) {
              return;
            }
            this.$content.scrollTop(this.contentHeight - this.$content.height() - offsetY).trigger(MOUSEWHEEL);
            this.stop().restore();
            return this;
          };
          NanoScroll.prototype.scrollTop = function(offsetY) {
            if (!this.isActive) {
              return;
            }
            this.$content.scrollTop(+offsetY).trigger(MOUSEWHEEL);
            this.stop().restore();
            return this;
          };
          NanoScroll.prototype.scrollTo = function(node) {
            if (!this.isActive) {
              return;
            }
            this.scrollTop(this.$el.find(node).get(0).offsetTop);
            return this;
          };
          NanoScroll.prototype.stop = function() {
            if (cAF && this.scrollRAF) {
              cAF(this.scrollRAF);
              this.scrollRAF = null;
            }
            this.stopped = true;
            this.removeEvents();
            if (!this.iOSNativeScrolling) {
              this.pane.hide();
            }
            return this;
          };
          NanoScroll.prototype.destroy = function() {
            if (!this.stopped) {
              this.stop();
            }
            if (!this.iOSNativeScrolling && this.pane.length) {
              this.pane.remove();
            }
            if (BROWSER_IS_IE7) {
              this.$content.height("");
            }
            this.$content.removeAttr("tabindex");
            if (this.$el.hasClass(this.options.enabledClass)) {
              this.$el.removeClass(this.options.enabledClass);
              this.$content.css({right:""});
            }
            return this;
          };
          NanoScroll.prototype.flash = function() {
            if (this.iOSNativeScrolling) {
              return;
            }
            if (!this.isActive) {
              return;
            }
            this.reset();
            this.pane.addClass(this.options.flashedClass);
            setTimeout(function(_this) {
              return function() {
                _this.pane.removeClass(_this.options.flashedClass);
              };
            }(this), this.options.flashDelay);
            return this;
          };
          return NanoScroll;
        }();
        $.fn.nanoScroller = function(settings) {
          return this.each(function() {
            var options, scrollbar;
            if (!(scrollbar = this.nanoscroller)) {
              options = $.extend({}, defaults, settings);
              this.nanoscroller = scrollbar = new NanoScroll(this, options);
            }
            if (settings && typeof settings === "object") {
              $.extend(scrollbar.options, settings);
              if (settings.scrollBottom != null) {
                return scrollbar.scrollBottom(settings.scrollBottom);
              }
              if (settings.scrollTop != null) {
                return scrollbar.scrollTop(settings.scrollTop);
              }
              if (settings.scrollTo) {
                return scrollbar.scrollTo(settings.scrollTo);
              }
              if (settings.scroll === "bottom") {
                return scrollbar.scrollBottom(0);
              }
              if (settings.scroll === "top") {
                return scrollbar.scrollTop(0);
              }
              if (settings.scroll && settings.scroll instanceof $) {
                return scrollbar.scrollTo(settings.scroll);
              }
              if (settings.stop) {
                return scrollbar.stop();
              }
              if (settings.destroy) {
                return scrollbar.destroy();
              }
              if (settings.flash) {
                return scrollbar.flash();
              }
            }
            return scrollbar.reset();
          });
        };
        $.fn.nanoScroller.Constructor = NanoScroll;
      });
    }});
    self = hm.core.ui.nanoscroller.Nanoscroller;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.storeList.List", {extend:"hm.core.data.Store", config:{autoLoad:false, dataUrl:null, model:"hm.core.ui.storeList.ListItem", pagination:false, tplByClass:true, classNameSpace:"hm-storeList"}, __construct:function() {
      var __construct = arguments.callee;
      this._isLoading = false;
      return this.callParent(__construct, arguments);
    }, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var ns = this.getNs();
      this._listItemsContainer = ns.find("items-container");
      if (this._listItemsContainer.length == 0) {
        throw new Error("В шаблоне отсутствует " + ns.getClass("items-container"));
      }
    }, render:function() {
      var render = arguments.callee;
      this.callParent(render, arguments);
      this._nanoScroller = HM.create("hm.core.ui.nanoscroller.Nanoscroller", {el:this.getEl(), options:{alwaysVisible:true}, listeners:{scope:this, updated:this._nanoScrollerUpdated}});
      this.refresh();
    }, _load:function(data, method) {
      var _load = arguments.callee;
      if (data.source && data.source.lastLoad) {
        this._lastLoad = data.source.lastLoad;
      }
      this.callParent(_load, arguments);
      this._isLoading = false;
    }, _itemLoaded:function(item) {
      var _itemLoaded = arguments.callee;
      this.callParent(_itemLoaded, arguments);
    }, _dataLoaded:function(items, method) {
      var _dataLoaded = arguments.callee;
      this.callParent(_dataLoaded, arguments);
      this._renderItems(items);
    }, _dataFiltered:function(items) {
      var _dataFiltered = arguments.callee;
      this.callParent(_dataFiltered, arguments);
      this._clearRenderedItems();
      this._renderItems(items);
    }, _nanoScrollerUpdated:function(event, nanoScroller) {
    }, isLoading:function() {
      return this._isLoading;
    }, getNanoScroller:function() {
      return this._nanoScroller;
    }, loadData:function(data, params) {
      if (this.isLoading()) {
        return;
      }
      this._isLoading = true;
      params = params || {};
      var proxy;
      if (data) {
        proxy = this.getMemoryProxy();
        proxy.setData(data);
      } else {
        proxy = this.getXhrProxy();
      }
      if (proxy != this.getProxy()) {
        this.setProxy(proxy);
      }
      if (this._lastLoad) {
        params.lastLoad = this._lastLoad;
      }
      this.loadMore(params);
    }, getXhrProxy:function() {
      if (this._xhrProxy === undefined) {
        this._xhrProxy = HM.create("hm.core.data.proxy.XhrProxy", {method:"POST", model:this.config.model, url:this.config.dataUrl});
      }
      return this._xhrProxy;
    }, getMemoryProxy:function() {
      if (this._memoryProxy === undefined) {
        this._memoryProxy = HM.create("hm.core.data.proxy.MemoryProxy", {model:this.config.model, reader:"simple_json"});
      }
      return this._memoryProxy;
    }, _getItemsContainer:function() {
      return this._listItemsContainer;
    }, _clearRenderedItems:function() {
      if (!this._rendered) {
        return;
      }
      this._getItemsContainer().empty();
    }, _renderItems:function(items) {
      if (!this._rendered) {
        return;
      }
      if (!items || items.length == 0) {
        return;
      }
      this._beforeItemsRender(items);
      var itemsContainer = this._getItemsContainer();
      for (var i = 0, ln = items.length;i < ln;i++) {
        items[i].render();
        itemsContainer.append(items[i].getEl());
      }
      this._afterItemsRender(items);
      this._updateNanoScroller();
    }, _beforeItemsRender:function(items) {
    }, _afterItemsRender:function(items) {
    }, _updateNanoScroller:function() {
      var nanoScroller = this.getNanoScroller();
      if (nanoScroller) {
        nanoScroller.update();
      }
    }});
    self = hm.core.ui.storeList.List;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.storeList.ListItem", {extend:"hm.core.data.Model", config:{autoLoad:false, tplByClass:true, classNameSpace:"hm-storeList-item"}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var ns = this.getNs();
      this.CLASS_SELECTED = ns("", "selected");
      this.CLASS_CHECKED = ns("", "checked");
      this._selected = false;
      this._checked = false;
    }, isChecked:function() {
      return this._checked;
    }, isSelected:function() {
      return this._selected;
    }, setChecked:function(flag, silent) {
      flag = !!flag;
      if (flag === this.isChecked()) {
        return;
      }
      this.getEl().toggleClass(this.CLASS_CHECKED, flag);
      this._checked = flag;
      if (!silent) {
        var prefix = flag ? "" : "un";
        this.fireEvent(prefix + "checked", this);
      }
    }, setSelected:function(flag, silent) {
      flag = !!flag;
      if (flag === this.isSelected()) {
        return;
      }
      this.getEl().toggleClass(this.CLASS_SELECTED, flag);
      this._selected = flag;
      if (!silent) {
        var prefix = flag ? "" : "un";
        this.fireEvent(prefix + "selected", this);
      }
    }});
    self = hm.core.ui.storeList.ListItem;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.data.model.EventGroupModel", {extend:"hm.core.data.Model", config:{hasMany:{model:"hm.module.es.data.model.EventModel", propertyName:"events"}}, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      var eventStore = this.get("events"), eventCount = eventStore.getItemsCount();
      for (var i = 0;i < eventCount;i++) {
        eventStore.getItem(i).on("change_view_state", this._onEventViewStateChange, this);
      }
    }, _onEventViewStateChange:function(e, value) {
      this.fireEvent("event_change_view_state", e.getTarget(), value);
    }});
    self = hm.module.es.data.model.EventGroupModel;
  })();
  (function() {
    var self;
    var eventModels = {};
    HM.define("hm.module.es.data.model.EventModel", {extend:"hm.core.data.Model", config:{hasOne:{model:"hm.core.data.Model", propertyName:"description", reader:{type:"json", dataProperty:""}}}, es_event_types:[{event_type_id:1, name:"forumAddMessage", event_group_type_id:2}, {event_type_id:2, name:"blogAddMessage", event_group_type_id:2}, {event_type_id:3, name:"wikiAddPage", event_group_type_id:2}, {event_type_id:4, name:"wikiModifyPage", event_group_type_id:2}, {event_type_id:5, name:"forumInternalAddMessage", 
    event_group_type_id:2}, {event_type_id:6, name:"blogInternalAddMessage", event_group_type_id:2}, {event_type_id:7, name:"wikiInternalAddPage", event_group_type_id:2}, {event_type_id:8, name:"wikiInternalModifyPage", event_group_type_id:2}, {event_type_id:9, name:"courseAddMaterial", event_group_type_id:3}, {event_type_id:10, name:"courseAttachLesson", event_group_type_id:3}, {event_type_id:11, name:"courseScoreTriggered", event_group_type_id:3}, {event_type_id:12, name:"courseTaskComplete", event_group_type_id:3}, 
    {event_type_id:13, name:"commentAdd", event_group_type_id:2}, {event_type_id:14, name:"commentInternalAdd", event_group_type_id:2}, {event_type_id:15, name:"courseTaskScoreTriggered", event_group_type_id:3}, {event_type_id:60, name:"courseTaskTeacherAnswered", event_group_type_id:3}, {event_type_id:61, name:"courseTaskTeacherReworkRequired", event_group_type_id:3}, {event_type_id:16, name:"personalMessageSend", event_group_type_id:1}], constructor:function(config) {
      var constructor = arguments.callee;
      var eventId = config.data.eventId;
      if (!eventModels.hasOwnProperty(eventId)) {
        eventModels[eventId] = this;
      } else {
        return eventModels[eventId];
      }
      return this.callParent(constructor, arguments);
    }, __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      this.get("description").on("change", this._onDescriptionChange, this);
    }, getEventId:function() {
      return this.get("eventId");
    }, getEventTypeStr:function() {
      return this.get("eventTypeStr");
    }, getEventGroupId:function() {
      var eventTypeStr = this.get("eventTypeStr");
      for (var i = 0;i < this.es_event_types.length;i++) {
        var eventType = this.es_event_types[i];
        if (eventType.name === eventTypeStr) {
          return eventType.event_group_type_id;
        }
      }
    }, getEventGroup:function() {
      switch(this.getEventGroupId()) {
        case 1:
          return "personalMessages";
        case 2:
          return "discussions";
        default:
          return "notifications";
      }
    }, _onDescriptionChange:function(e, name, value) {
      if (name !== "views") {
        return;
      }
      var me = this;
      HM.getService("EventService").markEventAsViewed(this.getEventId(), function(success) {
        if (success) {
          me.fireEvent("change_view_state", value);
        }
      });
    }});
    self = hm.module.es.data.model.EventModel;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.data.reader.EventGroupsReader", {extend:"hm.core.data.reader.JsonReader", read:function(data) {
      var read = arguments.callee;
      var result = this.callParent(read, arguments), items = result.items, itemsArray = [], item;
      for (var i in items) {
        if (!items.hasOwnProperty(i)) {
          continue;
        }
        item = items[i];
        itemsArray.push({name:i, description:JSON.parse(item.group_description), type:item.group_type, events:item.events, lastModify:this._getGroupLastModifyTimestamp(item)});
      }
      itemsArray.sort(function(a, b) {
        return b.lastModify - a.lastModify;
      });
      result.items = itemsArray;
      return result;
    }, _getGroupLastModifyTimestamp:function(group) {
      var groupEvents = group.events, result = 0;
      for (var i = 0;i < groupEvents.length;i++) {
        var eventCreateTime = groupEvents[i].eventCreateTime;
        if (eventCreateTime > result) {
          result = eventCreateTime;
        }
      }
      return result;
    }});
    self = hm.module.es.data.reader.EventGroupsReader;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.data.store.EventServiceStore", {extend:"hm.core.data.Store", requires:["hm.core.Date"], config:{pagination:false, proxy:{type:"xhr", reader:"hm.module.es.data.reader.EventGroupsReader", url:"/es/events/get", model:"hm.module.es.data.model.EventGroupModel", params:{}}}, LOAD_PERIOD:6E4 * 60 * 24 * 30, load:function(params) {
      var load = arguments.callee;
      params = params || {};
      params.forceStats = 1;
      this._page = 1;
      this.callParent(load, [params]);
    }, loadMore:function(params) {
      var loadMore = arguments.callee;
      params = params || {};
      params.page = this._page;
      this._page = this._page + 1;
      this.callParent(loadMore, [params]);
    }});
    HM.singleton(hm.module.es.data.store.EventServiceStore);
    self = hm.module.es.data.store.EventServiceStore;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.data.store.EventServiceCourseStore", {extend:"hm.module.es.data.store.EventServiceStore", requires:["hm.core.Date"], config:{autoLoad:false, pagination:false, proxy:{type:"xhr", reader:"hm.module.es.data.reader.EventGroupsReader", url:"/es/events/get", model:"hm.module.es.data.model.EventGroupModel", params:{types:["courseAddMaterial", "courseAttachLesson", "courseScoreTriggered", "courseTaskComplete", "courseTaskAction", "courseTaskTeacherAnswered", "courseTaskTeacherReworkRequired"], group:1, showAll:1}}}, load:function(params) {
      hm.core.data.Store.prototype.load.call(this, params);
    }, loadMore:function() {
      return;
    }});
    self = hm.module.es.data.store.EventServiceCourseStore;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.data.store.EventServiceTopStore", {extend:"hm.core.data.Store", requires:["hm.core.Date"], config:{pagination:false, proxy:{type:"xhr", reader:"hm.module.es.data.reader.EventGroupsReader", url:"/es/events/top", model:"hm.module.es.data.model.EventGroupModel", params:{}}}, LOAD_PERIOD:6E4 * 60 * 24 * 30, load:function(params) {
      var load = arguments.callee;
      params = params || {};
      this.callParent(load, [params]);
    }});
    HM.singleton(hm.module.es.data.store.EventServiceTopStore);
    self = hm.module.es.data.store.EventServiceTopStore;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.service.EventServiceService", {viewFullList:function() {
      location.href = hm.core.Url.getInstance().url({module:"es", controller:"list", action:"index"});
    }, markEventAsViewed:function(eventId, callBack) {
      $.ajax({url:hm.core.Url.getInstance().url({module:"es", controller:"events", action:"markasviewed", eventId:eventId}), async:true}).done(function(data) {
        callBack(data.success);
      });
    }});
    hm.core.BaseService.registerServices({EventService:"hm.module.es.service.EventServiceService"});
    self = hm.module.es.service.EventServiceService;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.ui.event.list.item.EventAbstract", {extend:"hm.core.ui.Component", config:{tpl:"hm/module/es/ui/event/list/item/EventAbstract", groupType:"discussions", isInternal:false, eventTypeStr:"", data:null, showPortfolioAction:false}, _init:function() {
      var _init = arguments.callee;
      this._groupType = this.config.groupType;
      this._data = this.config.data;
      this._description = this._data.get("description");
      this.description = this._description.getData();
      this.findDateOfCreation();
      this.callParent(_init, arguments);
      this._$el.find("iframe").remove();
      this.setAvatar();
      if (this.isNew()) {
        this.markAsNew();
      }
      if (HM.isDebug) {
        this._initDebugButton();
      }
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this.elOn("click", null, this._onItemClick);
      this.elOn("click", ".hm-es-event-list-item-new-trigger", this._onNewTriggerClick);
      this.elOn("click", ".hm-es-event-list-item-portfolio-add a", this._addToPortfolio);
      this._data.on("change_view_state", this._onChangeViewState, this);
    }, _initDebugButton:function() {
      var $button = $('<div style="position: absolute; right: 0; top: 0; bottom: 0; width: 20px;"></div>'), me = this;
      $button.on("click", function(e) {
        e.preventDefault();
        e.stopPropagation();
        console.log(me);
      });
      this.getEl().append($button);
    }, _render:function() {
      var _render = arguments.callee;
      this.callParent(_render, arguments);
      if (this.$className === "hm.module.es.ui.event.list.item.EventAbstract") {
        this.getEl().text(HM._("Неизвестное событие"));
      }
    }, hide:function() {
      this.getEl().hide();
    }, show:function() {
      this.getEl().show();
    }, getData:function() {
      return this._data;
    }, getAuthor:function() {
      return this.description.author || this.description.author_name;
    }, getAuthorId:function() {
      var user_id = this.description.user_id;
      if (!user_id) {
        user_id = this.description.author_id;
      }
      return user_id;
    }, getAuthorUrl:function() {
      return HM.getService("User").getUserUrl(this.getAuthorId());
    }, getGroupType:function() {
      return this._groupType;
    }, findDateOfCreation:function() {
      this.creationDate = this._data.get("eventCreateTime");
    }, setAvatar:function() {
      var desc = this.description;
      var avatar = desc.author_avatar || desc.user_avatar;
      if (!avatar) {
        return;
      }
      this.getEl().find(".hm-es-event-list-item-avatar").css({backgroundImage:"url(" + avatar + ")"});
    }, viewEntity:function() {
      return false;
    }, isNew:function() {
      return!this._description.get("views");
    }, markAsNew:function() {
      this.getEl().addClass("hm-es-event-list-item-new");
      if (!this._$elNewTrigger) {
        this._$elNewTrigger = $('<div class="hm-es-event-list-item-new-trigger"></div>');
        this._$elNewTrigger.prop("title", HM._("Пометить как прочитанное"));
      }
      this.getEl().append(this._$elNewTrigger);
    }, markAsNotNew:function() {
      this.getEl().removeClass("hm-es-event-list-item-new");
      this._$elNewTrigger.detach();
    }, getEventId:function() {
      return this._data.get("eventId");
    }, getTitle:function() {
      return this.description.title;
    }, getElHtml:function() {
      var clone = this.getEl().clone();
      clone.find(".hm-es-event-list-item-datetime, .hm-es-event-list-item-portfolio-add").remove();
      return encodeURIComponent(clone.html());
    }, _addToPortfolio:function(e) {
      e.preventDefault();
      var me = this;
      $.ajax({type:"POST", url:hm.core.Url.getInstance().url({module:"user", controller:"ajax", action:"event-to-achievement", eventId:this.getEventId()}), data:{text:this.getElHtml()}}).done(function(data) {
        if (data) {
          me.getEl().find(".hm-es-event-list-item-portfolio-add").html(data[0]);
        }
      });
    }, _onItemClick:function(e) {
      if (e.target.tagName === "A") {
        return;
      }
      this.viewEntity();
    }, _onNewTriggerClick:function(e) {
      e.stopPropagation();
      this._description.set("views", true);
    }, _onChangeViewState:function(e, isViewed) {
      if (isViewed) {
        this.markAsNotNew();
      } else {
        this.markAsNew();
      }
    }});
    hm.module.es.ui.event.list.item.EventAbstract.factory = hm.core.ClassManager.createFactory("eventTypeStr", {"default":"hm.module.es.ui.event.list.item.EventAbstract", blogAddMessage:"hm.module.es.ui.event.list.item.blog.BlogAddMessage", blogInternalAddMessage:"hm.module.es.ui.event.list.item.blog.BlogInternalAddMessage", forumAddMessage:"hm.module.es.ui.event.list.item.forum.ForumAddMessage", forumInternalAddMessage:"hm.module.es.ui.event.list.item.forum.ForumInternalAddMessage", wikiAddPage:"hm.module.es.ui.event.list.item.wiki.WikiPage", 
    wikiInternalAddPage:"hm.module.es.ui.event.list.item.wiki.WikiInternalPage", wikiModifyPage:"hm.module.es.ui.event.list.item.wiki.WikiPage", wikiInternalModifyPage:"hm.module.es.ui.event.list.item.wiki.WikiInternalPage", courseAddMaterial:"hm.module.es.ui.event.list.item.course.CourseAddMaterial", courseAttachLesson:"hm.module.es.ui.event.list.item.course.CourseAttachLesson", courseScoreTriggered:"hm.module.es.ui.event.list.item.course.CourseScoreTriggered", courseTaskComplete:"hm.module.es.ui.event.list.item.course.CourseTaskComplete", 
    courseTaskAction:"hm.module.es.ui.event.list.item.course.CourseTaskAction", courseTaskScoreTriggered:"hm.module.es.ui.event.list.item.course.CourseTaskScoreTriggered", courseTaskTeacherAnswered:"hm.module.es.ui.event.list.item.course.courseTaskTeacherAnswered", courseTaskTeacherReworkRequired:"hm.module.es.ui.event.list.item.course.courseTaskTeacherReworkRequired", personalMessageSend:"hm.module.es.ui.event.list.item.personalMessage.PersonalMessage"});
    self = hm.module.es.ui.event.list.item.EventAbstract;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.ui.event.list.group.DefaultEventGroup", {extend:"hm.core.ui.Component", requires:["hm.module.es.ui.event.list.item.EventAbstract"], config:{tpl:"hm/module/es/ui/event/list/group/DefaultEventGroup", type:"", data:null, eventList:null, groupTitle:"", collapsible:true}, _init:function() {
      var _init = arguments.callee;
      this._data = this.config.data;
      this.callParent(_init, arguments);
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this.elOn("click", ".hm-es-event-list-group-trigger", this._onTriggerClick);
    }, _render:function() {
      var _render = arguments.callee;
      var EventAbstract = hm.module.es.ui.event.list.item.EventAbstract, events = this._data.get("events"), eventItems = [], limit = 3, shortList = !this.config.eventList.config.fullMode, itemsCount = events.getItemsCount();
      if (shortList) {
        limit = 1;
      }
      if (!this.config.collapsible) {
        limit = itemsCount;
      }
      for (var i = 0;i < itemsCount;i++) {
        var event = events.getItem(i);
        event.on("change_view_state", this._onEventMarkedAsViewed, this);
        if (shortList && (i >= limit && event.get("description").get("views"))) {
          continue;
        }
        var ev = EventAbstract.factory({eventTypeStr:event.get("eventTypeStr"), data:event});
        eventItems.push(ev);
      }
      eventItems.sort(function(a, b) {
        return b.getData().get("eventCreateTime") - a.getData().get("eventCreateTime");
      });
      this.events = eventItems;
      this.callParent(_render, arguments);
      var $cont = this.$elEventsCont = this.getEl().find(".hm-es-event-list-group-events");
      for (var i = 0;i < eventItems.length;i++) {
        $cont.append(eventItems[i].getEl());
      }
      this.setAvatar();
      this.updateIsNewStatus();
    }, getNewEventsCount:function() {
      var events = this.events, result = 0;
      for (var i = 0;i < events.length;i++) {
        if (events[i].isNew()) {
          result++;
        }
      }
      return result;
    }, updateIsNewStatus:function() {
      var newEventsCount = this.getNewEventsCount();
      if (newEventsCount) {
        this.getEl().addClass("hm-es-event-list-group-with-new-events");
      } else {
        this.getEl().removeClass("hm-es-event-list-group-with-new-events");
      }
    }, getEventItemById:function(eventId) {
      var eventId, events = this.events;
      for (var i = 0;i < events.length;i++) {
        eventId = events[i].getEventId();
        if (eventId == eventId) {
          return events[i];
        }
      }
    }, setCollapsed:function(collapse) {
      var events = this.events;
      if (collapse) {
        for (var i = 2;i < events.length;i++) {
          events[i].hide();
        }
        this._$elTrigger.text(HM._("Показать предыдущие"));
      } else {
        for (var i = 2;i < events.length;i++) {
          events[i].show();
        }
        this._$elTrigger.text(HM._("Скрыть предыдущие"));
      }
      this._collapsed = collapse;
    }, setAvatar:function() {
      var desc = this._data.get("description"), avatar = desc.author_avatar || desc.user_avatar;
      if (!avatar) {
        return;
      }
      this.getEl().find(".hm-es-event-list-group-avatar").css({backgroundImage:"url(" + avatar + ")"});
    }, getTypeTitle:function() {
      if (this.isInternal()) {
        return HM._("Учебный курс");
      } else {
        return HM._("Основной канал");
      }
    }, getGroupName:function() {
      return this._data.get("description").theme;
    }, filterByGroupType:function(groupType) {
      if (!groupType) {
        this.isVisible = groupIsVisible;
        this.getEl().show();
        return;
      }
      var events = this.events, groupIsVisible = false;
      for (var i = 0;i < events.length;i++) {
        var event = events[i];
        if (event.getGroupType() === groupType) {
          groupIsVisible = true;
        }
      }
      if (groupIsVisible) {
        this.getEl().show();
      } else {
        this.getEl().hide();
      }
      this.isVisible = groupIsVisible;
    }, isInternal:function() {
      var events = this.events, groupIsInternal = false;
      for (var i = 0;i < events.length;i++) {
        var event = events[i];
        if (event.config.isInternal) {
          return true;
        }
      }
      return false;
    }, getAuthorUrl:function() {
      return HM.getService("User").getUserUrl(this._data.get("description").author_id);
    }, getAuthorName:function() {
      return this._data.get("description").author_name;
    }, needShowMoreIcon:function() {
      return!!this.getGroupName();
    }, _onTriggerClick:function(e) {
      this.setCollapsed(!this._collapsed);
    }, _onEventMarkedAsViewed:function(e) {
      this.updateIsNewStatus();
    }});
    (function() {
      var classMapper = {FORUM_MESSAGE_ADD:"hm.module.es.ui.event.list.group.forum.ForumMessagesEventGroup", WIKI_PAGE:"hm.module.es.ui.event.list.group.wiki.WikiEventGroup", COURSE_ACTIVITY:"hm.module.es.ui.event.list.group.notification.DefaultNotificationEventGroup", PERSONAL_MESSAGE_SEND:"hm.module.es.ui.event.list.group.message.MessageEventGroup"};
      var titleMapper = {FORUM_MESSAGE_ADD:HM._("Форум"), BLOG_MESSAGE_ADD:HM._("Блог"), WIKI_PAGE:"Wiki"};
      hm.module.es.ui.event.list.group.DefaultEventGroup.factory = function(data) {
        var className = "hm.module.es.ui.event.list.group.DefaultEventGroup", groupType = data.type;
        if (classMapper.hasOwnProperty(groupType)) {
          className = classMapper[groupType];
        }
        if (titleMapper.hasOwnProperty(groupType)) {
          data.groupTitle = titleMapper[groupType];
        }
        return HM.create(className, data);
      };
    })();
    self = hm.module.es.ui.event.list.group.DefaultEventGroup;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.ui.event.list.EventList", {extend:"hm.core.ui.Component", requires:["hm.module.es.data.store.EventServiceStore", "hm.module.es.data.store.EventServiceTopStore", "hm.module.es.ui.event.list.group.DefaultEventGroup"], config:{tpl:"hm/module/es/ui/event/list/EventList", fullMode:false, store:null, showHeader:true, groupsCollapsible:true}, _init:function() {
      var _init = arguments.callee;
      this._store = this.config.store;
      this.groups = [];
      this.callParent(_init, arguments);
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this._store.on("data_loaded", this._onDataLoaded, this);
      this.elOn("click", ".hm-es-event-list-url", this._onClickShowAll);
    }, getStore:function() {
      return this._store;
    }, filterByGroupType:function(groupType) {
      var groups = this.groups, listIsEmpty = true;
      for (var i = 0;i < groups.length;i++) {
        groups[i].filterByGroupType(groupType);
        if (groups[i].isVisible) {
          listIsEmpty = false;
        }
      }
      if (listIsEmpty) {
        this.getEl().find(".hm-es-event-list-body-empty").show();
      } else {
        this.getEl().find(".hm-es-event-list-body-empty").hide();
      }
    }, setTitle:function(title) {
      this.getEl().find(".hm-es-event-list-title").text(title);
    }, setEmptyMessage:function(message) {
      this.getEl().find(".hm-es-event-list-body-empty").text(HM._(message));
    }, loadNext:function() {
      this._store.loadMore();
    }, getEventItemById:function(eventId) {
      var event, groups = this.groups;
      for (var i = 0;i < groups.length;i++) {
        event = groups[i].getEventItemById();
        if (event) {
          return event;
        }
      }
    }, _onDataLoaded:function(e, store, items, method) {
      if (!this.config.fullMode && method === "more") {
        return;
      }
      var $elBody = this.getEl().find(".hm-es-event-list-body"), DefaultEventGroup = hm.module.es.ui.event.list.group.DefaultEventGroup, groups = [];
      for (var i = 0;i < items.length;i++) {
        var group = groups[i] = DefaultEventGroup.factory({type:items[i].get("type"), eventList:this, data:items[i], collapsible:this.config.groupsCollapsible});
        $elBody.append(group.getEl());
      }
      this.groups.push.apply(this.groups, groups);
    }, _onClickShowAll:function(e) {
      e.preventDefault();
      HM.getService("EventService").viewFullList();
    }, _onEventMarkedAsViewed:function(e, eventId, groupType) {
      var eventItem = this.getEventItemById(eventId);
      if (eventItem) {
        eventItem.markAsNotNew(true);
      }
    }});
    self = hm.module.es.ui.event.list.EventList;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.ui.event.list.group.forum.ForumMessagesEventGroup", {extend:"hm.module.es.ui.event.list.group.DefaultEventGroup", config:{}});
    self = hm.module.es.ui.event.list.group.forum.ForumMessagesEventGroup;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.ui.event.list.group.message.MessageEventGroup", {extend:"hm.module.es.ui.event.list.group.DefaultEventGroup", config:{tpl:"hm/module/es/ui/event/list/group/message/MessageEventGroup"}});
    self = hm.module.es.ui.event.list.group.message.MessageEventGroup;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.ui.event.list.group.notification.DefaultNotificationEventGroup", {extend:"hm.module.es.ui.event.list.group.DefaultEventGroup", config:{tpl:"hm/module/es/ui/event/list/group/notification/DefaultNotificationEventGroup"}, getCourseName:function() {
      return this._data.get("description").course_name;
    }});
    self = hm.module.es.ui.event.list.group.notification.DefaultNotificationEventGroup;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.ui.event.list.group.wiki.WikiEventGroup", {extend:"hm.module.es.ui.event.list.group.DefaultEventGroup", getGroupName:function() {
      return "";
    }});
    self = hm.module.es.ui.event.list.group.wiki.WikiEventGroup;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.ui.event.list.item.blog.BlogAddMessage", {extend:"hm.module.es.ui.event.list.item.EventAbstract", config:{tpl:"hm/module/es/ui/event/list/item/blog/BlogAddMessage"}, viewEntity:function() {
      var subjectId = 0, url, blogService = HM.getService("Blog");
      if (this.isInternal) {
        subjectId = this.description.course_id;
        url = blogService.getBlogListUrl(subjectId, "subject");
      } else {
        url = blogService.getBlogListUrl();
      }
      location.href = url + "?eventId=" + this.getEventId();
    }});
    self = hm.module.es.ui.event.list.item.blog.BlogAddMessage;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.ui.event.list.item.blog.BlogInternalAddMessage", {extend:"hm.module.es.ui.event.list.item.blog.BlogAddMessage", config:{isInternal:true}});
    self = hm.module.es.ui.event.list.item.blog.BlogInternalAddMessage;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.ui.event.list.item.course.CourseAddMaterial", {extend:"hm.module.es.ui.event.list.item.EventAbstract", config:{tpl:"hm/module/es/ui/event/list/item/course/CourseAddMaterial", groupType:"notifications"}, viewEntity:function() {
      var subjectId = this.description.course_id;
      if (!subjectId) {
        subjectId = this.description.cource_id;
      }
      location.href = HM.getService("CourseMaterialService").getListUrl(subjectId) + "?eventId=" + this.getEventId();
    }});
    self = hm.module.es.ui.event.list.item.course.CourseAddMaterial;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.ui.event.list.item.course.CourseAttachLesson", {extend:"hm.module.es.ui.event.list.item.EventAbstract", config:{tpl:"hm/module/es/ui/event/list/item/course/CourseAttachLesson", groupType:"notifications"}, viewEntity:function() {
      var subjectId = this.description.course_id;
      location.href = HM.getService("CourseLesson").getMyLessonsListUrl(subjectId) + "?eventId=" + this.getEventId();
    }});
    self = hm.module.es.ui.event.list.item.course.CourseAttachLesson;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.ui.event.list.item.course.CourseScoreTriggered", {extend:"hm.module.es.ui.event.list.item.EventAbstract", config:{groupType:"notifications", tpl:"hm/module/es/ui/event/list/item/course/CourseScoreTriggered"}, viewEntity:function() {
      var subjectId = this.description.course_id;
        if (2054 == lessonType) {
            location.href = HM.getService("CourseLesson").getInterviewUrl(lessonId, subjectId, userId, addUser) + "?eventId=" + this.getEventId();
        } else {
            location.href = HM.getService("CourseLesson").getMyLessonsListUrl(subjectId) + "?eventId=" + this.getEventId();
        }
    }});
    self = hm.module.es.ui.event.list.item.course.CourseScoreTriggered;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.ui.event.list.item.course.courseTaskTeacherAnswered", {extend:"hm.module.es.ui.event.list.item.EventAbstract", config:{groupType:"notifications", tpl:"hm/module/es/ui/event/list/item/course/courseTaskTeacherAnswered"}, viewEntity:function() {
      var subjectId = this.description.course_id, lessonId = this.description.lesson_id, userId = this.description.user_id, addUser = this.description.addUser, lessonType = this.description.lesson_type;
      if (2054 == lessonType) {
          location.href = HM.getService("CourseLesson").getInterviewUrl(lessonId, subjectId, userId, addUser) + "?eventId=" + this.getEventId();
      } else {
          location.href = HM.getService("CourseLesson").getMyLessonsListUrl(subjectId) + "?eventId=" + this.getEventId();
      }
    }});
    self = hm.module.es.ui.event.list.item.course.courseTaskTeacherAnswered;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.ui.event.list.item.course.courseTaskTeacherReworkRequired", {extend:"hm.module.es.ui.event.list.item.EventAbstract", config:{groupType:"notifications", tpl:"hm/module/es/ui/event/list/item/course/courseTaskTeacherReworkRequired"}, viewEntity:function() {
      var subjectId = this.description.course_id, lessonId = this.description.lesson_id, userId = this.description.user_id, addUser = this.description.addUser, lessonType = this.description.lesson_type;
      if (2054 == lessonType) {
          location.href = HM.getService("CourseLesson").getInterviewUrl(lessonId, subjectId, userId, addUser) + "?eventId=" + this.getEventId();
      } else {
          location.href = HM.getService("CourseLesson").getMyLessonsListUrl(subjectId) + "?eventId=" + this.getEventId();
      }
    }});
    self = hm.module.es.ui.event.list.item.course.courseTaskTeacherReworkRequired;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.ui.event.list.item.course.CourseTaskAction", {extend:"hm.module.es.ui.event.list.item.EventAbstract", config:{groupType:"notifications", tpl:"hm/module/es/ui/event/list/item/course/CourseTaskAction"}, viewEntity:function() {
      var userService = HM.getService("User"), lessonService = HM.getService("CourseLesson"), isBaseUser = userService.isBaseUser(), subjectId = this.description.course_id, lessonId = this.description.lesson_id, userId = this.description.user_id, addUser = this.description.addUser, url, lessonType = this.description.lesson_type;
      if (2054 == lessonType) {
          location.href = HM.getService("CourseLesson").getInterviewUrl(lessonId, subjectId, userId, addUser) + "?eventId=" + this.getEventId();
      } else {
          location.href = HM.getService("CourseLesson").getLessonListUrl(subjectId) + "?eventId=" + this.getEventId();
      }
    }});
    self = hm.module.es.ui.event.list.item.course.CourseTaskAction;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.ui.event.list.item.course.CourseTaskComplete", {extend:"hm.module.es.ui.event.list.item.EventAbstract", config:{groupType:"notifications", tpl:"hm/module/es/ui/event/list/item/course/CourseTaskComplete"}, viewEntity:function() {
      var subjectId = this.description.course_id, lessonId = this.description.lesson_id, userId = this.description.user_id, addUser = this.description.addUser, lessonType = this.description.lesson_type;
      if (2054 == lessonType) {
          location.href = HM.getService("CourseLesson").getInterviewUrl(lessonId, subjectId, userId, addUser) + "?eventId=" + this.getEventId();
      } else {
          location.href = HM.getService("CourseLesson").getLessonListUrl(subjectId) + "?eventId=" + this.getEventId();
      }
    }});
    self = hm.module.es.ui.event.list.item.course.CourseTaskComplete;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.ui.event.list.item.course.CourseTaskScoreTriggered", {extend:"hm.module.es.ui.event.list.item.EventAbstract", config:{tpl:"hm/module/es/ui/event/list/item/course/CourseTaskScoreTriggered", groupType:"notifications"}, viewEntity:function() {
      var subjectId = this.description.course_id, lessonId = this.description.lesson_id, userId = this.description.user_id, addUser = this.description.addUser, lessonType = this.description.lesson_type;
      if (2054 == lessonType) {
          location.href = HM.getService("CourseLesson").getInterviewUrl(lessonId, subjectId, userId, addUser) + "?eventId=" + this.getEventId();
      } else {
          location.href = HM.getService("CourseLesson").getMyLessonsListUrl(subjectId) + "?eventId=" + this.getEventId();
      }
    }});
    self = hm.module.es.ui.event.list.item.course.CourseTaskScoreTriggered;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.ui.event.list.item.forum.ForumAddMessage", {extend:"hm.module.es.ui.event.list.item.EventAbstract", config:{isInternal:false, tpl:"hm/module/es/ui/event/list/item/forum/ForumAddMessage"}, viewEntity:function() {
      var sectionId = this.description.section_id, forum_id = this.description.forum_id;
      HM.getService("Forum").viewForum(sectionId, forum_id);
    }});
    self = hm.module.es.ui.event.list.item.forum.ForumAddMessage;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.ui.event.list.item.forum.ForumInternalAddMessage", {extend:"hm.module.es.ui.event.list.item.forum.ForumAddMessage", config:{isInternal:true}, viewEntity:function() {
      var sectionId = this.description.section_id, subject_id = this.description.course_id;
      HM.getService("Forum").viewInternalForumUrl(subject_id, sectionId);
    }});
    self = hm.module.es.ui.event.list.item.forum.ForumInternalAddMessage;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.ui.event.list.item.personalMessage.PersonalMessage", {extend:"hm.module.es.ui.event.list.item.EventAbstract", config:{tpl:"hm/module/es/ui/event/list/item/personalMessage/PersonalMessage", groupType:"personalMessages"}, viewEntity:function() {
      var url = HM.getService("Message").getMessageListUrl(), author_id = this.getAuthorId();
      location.href = url + "?from=" + author_id;
    }});
    self = hm.module.es.ui.event.list.item.personalMessage.PersonalMessage;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.ui.event.list.item.wiki.WikiPage", {extend:"hm.module.es.ui.event.list.item.EventAbstract", config:{tpl:"hm/module/es/ui/event/list/item/wiki/WikiPage"}, _init:function() {
      var _init = arguments.callee;
      switch(this.config.eventTypeStr) {
        case "wikiAddPage":
        ;
        case "wikiInternalAddPage":
          this.actionTitle = HM._("создал(а)");
          break;
        case "wikiModifyPage":
        ;
        case "wikiInternalModifyPage":
          this.actionTitle = HM._("изменил(а)");
          break;
      }
      this.callParent(_init, arguments);
    }, viewEntity:function() {
      var page_id = this.description.subjectId;
      location.href = HM.getService("Wiki").getPageUrl(page_id) + "?eventId=" + this.getEventId();
    }});
    self = hm.module.es.ui.event.list.item.wiki.WikiPage;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.ui.event.list.item.wiki.WikiInternalPage", {extend:"hm.module.es.ui.event.list.item.wiki.WikiPage", config:{isInternal:true}, viewEntity:function() {
      var page_id = this.description.subjectId, subject = "subject", subject_id = this.description.course_id;
      location.href = HM.getService("Wiki").getPageUrl(page_id, subject_id, subject) + "?eventId=" + this.getEventId();
    }});
    self = hm.module.es.ui.event.list.item.wiki.WikiInternalPage;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.ui.event.panel.EventListPanel", {extend:"hm.core.ui.Component", config:{tpl:"hm/module/es/ui/event/panel/EventListPanel"}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._toolbar = HM.create("hm.module.es.ui.event.toolbar.EventToolbar", {fullMode:true, renderTo:false, revertButtonList:true, autoLoad:true});
      this._eventList = this._toolbar.getEventList();
      this._$elCont = this.getEl().find(".hm-es-event-list-container");
      this._$elCont.append(this._toolbar.getEl());
      this._$elCont.append(this._eventList.getEl());
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.elOn("click", ".hm-es-event-panel-trigger", this._onClickShowNext);
      this.callParent(_initEvents, arguments);
    }, _onClickShowNext:function() {
      this._eventList.loadNext();
    }});
    self = hm.module.es.ui.event.panel.EventListPanel;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.ui.event.toolbar.button.EventToolbarButton", {extend:"hm.core.ui.Component", config:{tpl:"hm/module/es/ui/event/toolbar/button/EventToolbarButton", groupType:"discussions", emptyMessage:"", toolbar:null, caption:"", count:0}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._toolbar = this.config.toolbar;
      this._fullMode = this._toolbar.config.fullMode;
      this._$elIcon = this.getEl().find(".hm-es-event-toolbar-button-icon");
      if (this.config.count > 0) {
        this._$elIcon.addClass("hm-es-event-toolbar-button-new-events");
      } else {
        this._$elIcon.removeClass("hm-es-event-toolbar-button-new-events");
      }
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      if (this._fullMode) {
      } else {
        this.elOn("click", ".hm-es-event-toolbar-button-icon-tab", this._onClick);
      }
    }, select:function() {
      var $el = this.getEl(), toolbar = this._toolbar;
      var eventListOffset = 470;
      this.selected = true;
      $el.addClass("hm-es-event-toolbar-button-selected");
      toolbar.setSelectedButton(this);
      var eventList = toolbar.getEventList(), $tab = $el.find(".hm-es-event-toolbar-button-icon-tab"), tabOffset = $tab.offset(), $eventListEl = eventList.getEl(), me = this;
      eventList.setTitle(this.config.caption);
      eventList.filterByGroupType(this.config.groupType);
      eventList.setEmptyMessage(this.config.emptyMessage);
      if (!this._fullMode) {
        hm.core.PopupManager.show($eventListEl[0], function() {
          me.unSelect(true);
        });
        var eventListWidth = $eventListEl.outerWidth();
        $eventListEl.css({top:tabOffset.top + $tab.outerHeight() + 20, position:"absolute"});
        if (eventListWidth + tabOffset.left - eventListOffset > document.body.offsetWidth) {
          $eventListEl.css({right:10, left:""});
        } else {
          $eventListEl.css({left:tabOffset.left - eventListOffset, right:""});
        }
      }
    }, unSelect:function(dontDetachEventList) {
      this.selected = false;
      this.getEl().removeClass("hm-es-event-toolbar-button-selected");
      if (!dontDetachEventList && !this._fullMode) {
        this._toolbar.getEventList().getEl().detach();
      }
    }, setStat:function(stat) {
      this.setNewEventsCount(stat.not_showed_event);
    }, setNewEventsCount:function(value) {
      this.newEventsCount = value;
      this._$elIcon.text(value);
      if (this.newEventsCount > 0) {
        this._$elIcon.addClass("hm-es-event-toolbar-button-new-events");
      } else {
        this._$elIcon.removeClass("hm-es-event-toolbar-button-new-events");
      }
    }, decrementNewEventsCount:function() {
      this.setNewEventsCount(this.newEventsCount - 1);
    }, _onClick:function(e) {
      e.stopPropagation();
      if (typeof this._toolbar._eventList === "undefined") {
        this._toolbar._eventList = HM.create("hm.module.es.ui.event.list.EventList", {fullMode:this.config.fullMode, store:hm.module.es.data.store.EventServiceTopStore.getInstance()});
        var proxy = this._toolbar._eventList.getStore().getProxy();
        proxy.on("data_loaded", this._toolbar._onDataLoaded, this._toolbar);
        var self = this;
        setTimeout(function() {
          proxy.on("data_loaded", self.select, self);
        }, 10);
      } else {
        if (this.selected) {
          this.unSelect();
          this._toolbar.getEventList().filterByGroupType(false);
        } else {
          this.select();
        }
      }
    }});
    self = hm.module.es.ui.event.toolbar.button.EventToolbarButton;
  })();
  (function() {
    var self;
    HM.define("hm.module.es.ui.event.toolbar.EventToolbar", {extend:"hm.core.ui.Component", requires:["hm.module.es.ui.event.toolbar.button.EventToolbarButton"], config:{tpl:"hm/module/es/ui/event/toolbar/EventToolbar", fullMode:false, revertButtonList:false, newPersonalMessages:0, newDiscussions:0, newNotifications:0, autoLoad:false}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var $el = this.getEl();
      if (this.config.autoLoad) {
        this._eventList = HM.create("hm.module.es.ui.event.list.EventList", {fullMode:this.config.fullMode, store:hm.module.es.data.store.EventServiceStore.getInstance()});
        var proxy = this._eventList.getStore().getProxy();
        proxy.on("data_loaded", this._onDataLoaded, this);
      }
      var ButtonClass = "hm.module.es.ui.event.toolbar.button.EventToolbarButton";
      this._btnMessages = HM.create(ButtonClass, {toolbar:this, caption:HM._("Сообщения"), emptyMessage:HM._("Новых сообщений нет"), groupType:"personalMessages"});
      this._btnDiscussions = HM.create(ButtonClass, {toolbar:this, caption:HM._("Обсуждения"), emptyMessage:HM._("Новых обсуждений нет"), groupType:"discussions"});
      this._btnNotifications = HM.create(ButtonClass, {toolbar:this, caption:HM._("Оповещения"), emptyMessage:HM._("Новых оповещений нет"), groupType:"notifications"});
      var buttonElements = [this._btnMessages.getEl(), this._btnDiscussions.getEl(), this._btnNotifications.getEl()];
      this._btnDiscussions.setNewEventsCount(this.config.newDiscussions);
      this._btnMessages.setNewEventsCount(this.config.newPersonalMessages);
      this._btnNotifications.setNewEventsCount(this.config.newNotifications);
      if (this.config.revertButtonList) {
        buttonElements.reverse();
      }
      $el.append.apply($el, buttonElements);
      this.__pageCountCache = 0;
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      HM.$window().on("resize", this._onWindowResize.bind(this));
    }, _renderTo:function() {
      var _renderTo = arguments.callee;
      this.callParent(_renderTo, arguments);
      this._$logoutLink = this._$elRenderTo.find(".logout");
      this._fixPosition();
    }, _fixPosition:function() {
      if (this._$logoutLink) {
        var $el = this.getEl(), elWidth = $el.width(), logoutOffset = this._$logoutLink.length ? this._$logoutLink.position().left : elWidth;
        $el.css({left:logoutOffset - elWidth - 10 + "px"});
      }
    }, loadData:function(data) {
      data = data || {};
      var stats = data.stats || [];
      for (var i = 0;i < stats.length;i++) {
        var stat = stats[i];
        switch(stat.group_type) {
          case "discussions":
            this._btnDiscussions.setStat(stat);
            break;
          case "personalMessages":
            this._btnMessages.setStat(stat);
            break;
          case "notifications":
            this._btnNotifications.setStat(stat);
            break;
        }
      }
      if (data.pageCount) {
        this.__pageCountCache = this._pageCount = data.pageCount;
      } else {
        this._pageCount = this.__pageCountCache;
      }
      if (this._pageCount <= this._eventList.getStore()._page) {
        this._$elMore = this.getEl().parent().parent().find(".hm-es-event-panel-trigger");
        this._$elMore.hide();
      }
    }, getEventList:function() {
      return this._eventList;
    }, setSelectedButton:function(button) {
      if (this._selectedButton === button) {
        return;
      }
      if (this._selectedButton) {
        this._selectedButton.unSelect();
      }
      this._selectedButton = button;
    }, getButtonByType:function(type) {
      switch(type) {
        case "discussions":
          return this._btnDiscussions;
        case "personalMessages":
          return this._btnMessages;
        case "notifications":
          return this._btnNotifications;
      }
    }, _onDataLoaded:function(e, data) {
      var items = data.items, ln = items.length;
      for (var i = 0;i < ln;i++) {
        items[i].on("event_change_view_state", this._onEventViewStateChange, this);
      }
      this.loadData(data.source);
    }, _onWindowResize:function() {
      this._fixPosition();
    }, _onEventViewStateChange:function(e, event, isViewed) {
      var groupCode = event.getEventGroup();
      this.getButtonByType(groupCode).decrementNewEventsCount();
    }});
    self = hm.module.es.ui.event.toolbar.EventToolbar;
  })();
  (function() {
    var self;
    HM.define("hm.module.messenger.data.filter.UserFilter", {extend:"hm.core.data.filter.EqualFilter", config:{field:["author_id", "recipient_id"], value:""}, filter:function(data) {
      if (this.config.clean) {
        return true;
      }
      var fields = this.config.field;
      if (fields) {
        if (!_.isArray(fields)) {
          fields = [fields];
        }
        var fieldData;
        for (var i = 0;i < fields.length;i++) {
          if (data instanceof hm.core.data.Model) {
            fieldData = data.get(fields[i]);
          } else {
            fieldData = data[fields[i]];
          }
          if (this._filter(fieldData)) {
            return true;
          }
        }
        return false;
      }
      return this._filter(data);
    }});
    hm.core.data.filter.AbstractFilter.register(hm.module.messenger.data.filter.UserFilter);
    self = hm.module.messenger.data.filter.UserFilter;
  })();
  (function() {
    var self;
    HM.define("hm.module.messenger.ui.Messenger", {extend:"hm.core.ui.Component", config:{tplByClass:true, classNameSpace:"hm-messenger", currentUserId:0, urls:{getNew:"", markViewed:""}}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._$messagesListWrap = this.getNs().find("messages-list-wrap");
      this._initMessagesStore();
      this._initLists();
    }, render:function() {
      var render = arguments.callee;
      this.callParent(render, arguments);
      this._initInput();
      this._initUpdateButton();
      this.update();
    }, _initUpdateButton:function() {
      this.getEl().find("#update").on("click", _.bind(this._onUpdateRequested, this));
    }, _initInput:function() {
      this._input = HM.create("hm.module.messenger.ui.input.Input", {renderTo:this.getNs().find("input-wrap"), listeners:{scope:this, submit:this._onInputSubmit, submitted:this._onUpdateRequested}});
    }, _initMessagesStore:function() {
      this._messagesStore = HM.create("hm.module.messenger.ui.message.MessagesList", {dataUrl:this.config.urls.getNew, listeners:{scope:this, message_viewed:this._onMessageViewed, data_loaded:this._onMessagesLoaded}});
    }, _initLists:function() {
      var ns = this.getNs();
      this._contactsList = HM.create("hm.module.messenger.ui.contact.ContactsList", {autoRender:true, renderTo:ns.find("contacts-list-wrap"), listeners:{scope:this, contact_ctrl_click:this._onContactCtrlClick, before_contact_selected:this._hidePlaceholder, contact_selected:this._onContactSelected}});
    }, _onInputSubmit:function() {
      this._disableButtons();
    }, _onUpdateRequested:function() {
      var input = this.getInput(), updateButton = input.getUpdateButton();
      if (this._updatingText === undefined) {
        this._updatingText = HM._("Проверка сообщений");
      }
      input.setButtonText(updateButton, this._updatingText);
      this.update();
    }, _onMessageViewed:function(event, message) {
      if (this._markViewedQueue === undefined) {
        this._markViewedQueue = [];
      }
      this._markViewedQueue.push(message.getEventId());
      if (this._markViewedTimer !== undefined) {
        clearTimeout(this._markViewedTimer);
        this._markViewedTimer = undefined;
      }
      this._markViewedTimer = setTimeout(_.bind(this._markMessagesViewed, this), 3E3);
    }, _markMessagesViewed:function() {
      if (this._markViewedQueue.length == 0) {
        return;
      }
      $.ajax({url:this.config.urls.markViewed, type:"post", data:{eventId:this._markViewedQueue}});
      this._markViewedQueue = [];
    }, _onContactSelected:function(event, contact) {
      this._hidePlaceholder();
      this.getInput().setContact(contact);
    }, _onContactCtrlClick:function(event, contact) {
      this.getInput().addContact(contact);
    }, _onMessagesLoaded:function(event, store, messages, method) {
      var contactsItems = [], contactIds = [this.config.currentUserId], contacts = this.getContactsList().getItems(), contactsById = {}, messagesByContactId = {};
      for (var i = 0, ln = contacts.length;i < ln;i++) {
        var contactId = contacts[i].getId();
        contactIds.push(contactId);
        contactsById[contactId] = contacts[i];
      }
      for (var i = 0, ln = messages.length;i < ln;i++) {
        var message = messages[i], contactId, contactName, contactIcon;
        if (message.isMy()) {
          contactId = message.getRecipientId();
          contactName = message.getRecipientName();
          contactIcon = message.getRecipientPhoto();
        } else {
          contactId = message.getAuthorId();
          contactName = message.getAuthorName();
          contactIcon = message.getAuthorPhoto();
        }
        if (messagesByContactId[contactId] === undefined) {
          messagesByContactId[contactId] = [];
        }
        messagesByContactId[contactId].push(message);
        if (contactIds.indexOf(contactId) === -1) {
          var contact = HM.create("hm.module.messenger.ui.contact.Contact", {data:{contact_id:contactId, contact_name:contactName, contact_icon:contactIcon}});
          contactsItems.push(contact);
          contactIds.push(contactId);
          contactsById[contactId] = contact;
        }
      }
      if (contactsItems.length != 0) {
        this.getContactsList().loadData(contactsItems);
      }
      for (var contactId in contactsById) {
        if (!contactsById.hasOwnProperty(contactId)) {
          continue;
        }
        if (messagesByContactId[contactId]) {
          contactsById[contactId].getMessagesList(this._$messagesListWrap).loadData(messagesByContactId[contactId]);
        }
      }
      this._enableButtons();
    }, getInput:function() {
      return this._input;
    }, update:function() {
      this._disableButtons();
      this.getMessagesStore().loadData(null, {clientTime:hm.core.Date.format(new Date, "dd.mm.yyyy HH:MM:ss")});
    }, getMessagesStore:function() {
      return this._messagesStore;
    }, getContactsList:function() {
      return this._contactsList;
    }, _disableButtons:function() {
      if (this._buttonsDisabled) {
        return;
      }
      this._buttonsDisabled = true;
      var input = this.getInput(), submitButton = input.getSubmitButton(), updateButton = input.getUpdateButton();
      submitButton.attr("disabled", "disabled");
      updateButton.attr("disabled", "disabled");
    }, _enableButtons:function() {
      if (!this._buttonsDisabled) {
        return;
      }
      this._buttonsDisabled = false;
      var input = this.getInput(), submitButton = input.getSubmitButton(), updateButton = input.getUpdateButton();
      input.resetButtonText(updateButton);
      submitButton.removeAttr("disabled");
      updateButton.removeAttr("disabled");
    }, _hidePlaceholder:function() {
      this.getNs().find("messages-placeholder").remove();
      this._hidePlaceholder = HM.emptyFn;
    }});
    self = hm.module.messenger.ui.Messenger;
  })();
  (function() {
    var self;
    HM.define("hm.module.messenger.ui.input.Input", {extend:"hm.core.ui.Component", config:{form:"#messengerform", tplByClass:true, classNameSpace:"hm-messenger-input"}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._initForm();
    }, _initForm:function() {
      var $form = $(this.config.form);
      $form.on("submit", _.bind(this._onSubmit, this));
      this.getEl().append($form);
      this._originalText = {};
      this._$form = $form;
      this._$submitButton = $form.find("#submit");
      this._$updateButton = $form.find("#update");
      this._disabledText = HM._("Отправка сообщения");
    }, _onSubmit:function(e) {
      e.preventDefault();
      var $form = this._getForm();
      this._submitting = true;
      this.setButtonText(this.getSubmitButton(), this._disabledText);
      this.fireEvent("submit", this);
      $.ajax({url:$form.attr("action"), type:"POST", data:$form.serialize(), success:_.bind(this._onSubmitted, this)});
    }, _onSubmitted:function(data) {
      this._submitting = false;
      this.resetButtonText(this.getSubmitButton());
      this.fireEvent("submitted", this, data);
      tinyMCE.activeEditor.setContent("");
    }, getFcbkcomplete:function() {
      return this.getEl().find(".fcbkcomplete");
    }, addContact:function(contact) {
      var $fcbkcomplete = this.getFcbkcomplete();
      $fcbkcomplete.trigger("removeItem", [{value:contact.getId()}]);
      $fcbkcomplete.trigger("addItem", [{title:contact.getName(), value:contact.getId()}]);
    }, setContact:function(contact) {
      var $fcbkcomplete = this.getFcbkcomplete();
      if (this._lastSelectedContact) {
        $fcbkcomplete.trigger("removeItem", [{value:this._lastSelectedContact.getId()}]);
      }
      this.addContact(contact);
      this._lastSelectedContact = contact;
    }, isSubmitting:function() {
      return this._submitting;
    }, setButtonText:function($button, text) {
      var buttonId = $button.attr("id");
      if (this._originalText[buttonId] === undefined) {
        this._originalText[buttonId] = $button.val() || $button.text();
      }
      $button.val(text);
      $button.text(text);
    }, resetButtonText:function($button) {
      var buttonId = $button.attr("id");
      if (this._originalText[buttonId] !== undefined) {
        $button.val(this._originalText[buttonId]);
        $button.text(this._originalText[buttonId]);
      }
    }, getSubmitButton:function() {
      return this._$submitButton;
    }, getUpdateButton:function() {
      return this._$updateButton;
    }, _getForm:function() {
      return this._$form;
    }});
    self = hm.module.messenger.ui.input.Input;
  })();
  (function() {
    var self;
    HM.define("hm.module.messenger.ui.contact.Contact", {extend:"hm.core.ui.storeList.ListItem", config:{tplByClass:true, classNameSpace:"hm-messenger-contact"}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var ns = this.getNs();
      this._$newCount = ns.find("new-count");
      this._updateNewMessagesCount();
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this.elOn("click", null, this._onClick, this);
    }, _onClick:function(e) {
      e.preventDefault();
      if (e.ctrlKey) {
        this.fireEvent("ctrl_click", this);
      } else {
        this.setSelected(true);
      }
    }, _onMessagesLoaded:function(event, store, messages, method) {
      this._updateNewMessagesCount();
    }, _onMessagesViewed:function() {
      this._updateNewMessagesCount();
    }, showMessagesList:function() {
      this.getMessagesList().show();
    }, hideMessagesList:function() {
      this.getMessagesList().hide();
    }, getMessagesList:function(renderTo) {
      if (this._messagesList === undefined) {
        this._messagesList = HM.create("hm.module.messenger.ui.message.MessagesList", {renderTo:renderTo, listeners:{scope:this, data_loaded:this._onMessagesLoaded, message_viewed:this._onMessagesViewed}});
      }
      return this._messagesList;
    }, getId:function() {
      return this.get("contact_id");
    }, getName:function() {
      return this.get("contact_name");
    }, getIcon:function() {
      return this.get("contact_icon");
    }, getNewCount:function() {
      return this.getMessagesList().getNewMessagesCount();
    }, _updateNewMessagesCount:function() {
      var newCount = this.getNewCount();
      if (newCount > 0) {
        this._$newCount.text(newCount).css("display", "inline-block");
      } else {
        this._$newCount.hide();
      }
    }});
    self = hm.module.messenger.ui.contact.Contact;
  })();
  (function() {
    var self;
    HM.define("hm.module.messenger.ui.message.Message", {extend:"hm.core.ui.storeList.ListItem", config:{tplByClass:true, classNameSpace:"hm-messenger-message"}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
    }, getIndicator:function() {
      if (this._$indicator === undefined) {
        this._$indicator = this.getNs().find("indicator");
      }
      return this._$indicator;
    }, getPositionBottom:function(update) {
      return this.getHeight(update) + this.getPositionTop(update);
    }, getPositionTop:function(update) {
      if (this._position === undefined || update) {
        var $el = this.getEl();
        this._position = $el.position().top + $el.parent().scrollTop();
      }
      return this._position;
    }, getHeight:function(update) {
      if (this._itemsContainerHeight === undefined || update) {
        this._itemsContainerHeight = this.getEl().height();
      }
      return this._itemsContainerHeight;
    }, setViewed:function() {
      if (!this.isNew()) {
        return;
      }
      var indicator = this.getIndicator();
      indicator.animate({height:0}, 4E3, function() {
        $(this).remove();
      });
      this.set("viewed", true);
      this.fireEvent("viewed", this);
    }, isMyClass:function() {
      return this.isMy() ? this.getNs().getClass(null, "isMy") : "";
    }, isNewClass:function() {
      return this.isNew() ? this.getNs().getClass(null, "isNew") : "";
    }, isMy:function() {
      return!!this.get("is_my");
    }, isNew:function() {
      return!this.isViewed() && !this.isMy();
    }, isViewed:function() {
      return!!this.get("viewed");
    }, getAuthorId:function() {
      return this.get("author_id");
    }, getAuthorName:function() {
      return this.get("author_name");
    }, getAuthorPhoto:function() {
      return this.get("author_avatar");
    }, getRecipientId:function() {
      return this.get("recipient_id");
    }, getRecipientName:function() {
      return this.get("recipient_name");
    }, getRecipientPhoto:function() {
      return this.get("recipient_avatar");
    }, getEventId:function() {
      return this.get("event_id");
    }, getDate:function(format) {
      var date = new Date(this.get("created"));
      if (format) {
        return hm.core.Date.format(date, "dd.mm.yyyy HH:MM:ss");
      }
      return date;
    }, getMessage:function() {
      return this.get("message");
    }, _fixImages:function() {
    }, _render:function() {
      var _render = arguments.callee;
      this.callParent(_render, arguments);
      var me = this, ns = this.getNs(), $el = this.getEl();
      $el.find("iframe").remove();
      var phText = HM._("Показать изображение");
      $el.find("img").each(function() {
        var $img = $(this), src = $img.attr("src"), $newElement = $('<div class="' + ns.getClass("img-placeholder") + '">' + phText + "</div>");
        $newElement.on("click", function() {
          $(this).replaceWith($img);
          $img.attr("src", src);
        });
        $img.removeAttr("src");
        $img.replaceWith($newElement);
      });
    }});
    self = hm.module.messenger.ui.message.Message;
  })();
  (function() {
    var self;
    HM.define("hm.module.messenger.ui.contact.ContactsList", {extend:"hm.core.ui.storeList.List", config:{model:"hm.module.messenger.ui.contact.Contact", tplByClass:true, classNameSpace:"hm-messenger-contacts-list"}, __construct:function() {
      var __construct = arguments.callee;
      this._contactsById = {};
      return this.callParent(__construct, arguments);
    }, _init:function(listItem) {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
    }, _itemLoaded:function(item) {
      var _itemLoaded = arguments.callee;
      this.callParent(_itemLoaded, arguments);
      item.on("selected", this._onContactSelected, this);
      item.on("ctrl_click", this._onContactCtrlClick, this);
    }, _onContactCtrlClick:function(event, item) {
      this.fireEvent("contact_ctrl_click", item);
    }, _onContactSelected:function(event, item) {
      this.fireEvent("before_contact_selected", item);
      if (this._lastSelectedItem !== undefined) {
        this._lastSelectedItem.setSelected(false, true);
        this._lastSelectedItem.hideMessagesList();
      }
      this._lastSelectedItem = item;
      item.showMessagesList();
      this.fireEvent("contact_selected", item);
    }, getContact:function(contactId) {
      if (this._contactsById[contactId] !== undefined) {
        return this._contactsById[contactId];
      }
      var contacts = this.getItems();
      for (var i = 0, ln = contacts.length;i < ln;i++) {
        if (contacts[i].getId() == contactId) {
          this._contactsById = contacts[i];
          return contacts[i];
        }
      }
      return undefined;
    }});
    self = hm.module.messenger.ui.contact.ContactsList;
  })();
  (function() {
    var self;
    HM.define("hm.module.messenger.ui.message.MessagesList", {extend:"hm.core.ui.storeList.List", config:{hidden:true, contactId:null, model:"hm.module.messenger.ui.message.Message", tplByClass:true, classNameSpace:"hm-messenger-messages-list"}, __construct:function() {
      var __construct = arguments.callee;
      this._newMessagesCount = 0;
      this._newMessages = {};
      return this.callParent(__construct, arguments);
    }, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
    }, _initEvents:function() {
      this._getItemsContainer().on("scroll", _.bind(this._onScroll, this));
    }, _itemLoaded:function(message) {
      var _itemLoaded = arguments.callee;
      this.callParent(_itemLoaded, arguments);
      message.on("viewed", this._onMessageViewed, this);
      if (message.isNew()) {
        this._newMessages[message.getIndex()] = message;
        this._newMessagesCount++;
      }
    }, _onScroll:function(event) {
      this._isScrolledBottom = this._getItemsContainer().scrollTop() >= this._getScrollHeight() - this.getHeight() - 103;
      this._updateViewedState();
    }, _onMessageViewed:function(event, message) {
      this._newMessagesCount--;
      delete this._newMessages[message.getIndex()];
      this.fireEvent("message_viewed", message);
    }, _nanoScrollerUpdated:function(event, nanoScroller) {
    }, getHeight:function() {
      if (this._height === undefined) {
        this._height = this.getEl().height();
      }
      return this._height;
    }, getNewMessages:function() {
      return this._newMessages;
    }, getNewMessagesCount:function() {
      return this._newMessagesCount;
    }, render:function(renderTo) {
      var render = arguments.callee;
      if (renderTo) {
        this.config.renderTo = renderTo;
      }
      this.callParent(render, arguments);
    }, show:function() {
      var show = arguments.callee;
      var result = this.callParent(show, arguments);
      if (result) {
        this._complexScrollUpdate();
        this._updateViewedState();
      }
      return result;
    }, _complexScrollUpdate:function() {
      this._initElementsPositions();
      this._scrollSmart();
      this._updateNanoScroller();
    }, _afterItemsRender:function(items) {
      if (this.isVisible()) {
        this._complexScrollUpdate();
      }
    }, _initElementsPositions:function(update) {
      var newMessages = this.getNewMessages();
      for (var index in newMessages) {
        if (!newMessages.hasOwnProperty(index)) {
          continue;
        }
        newMessages[index].getPositionBottom(update);
      }
    }, _getScrollHeight:function() {
      return this._getItemsContainer()[0].scrollHeight;
    }, _scrollSmart:function() {
      if (!this._scrollToNew()) {
        if (this._isScrolledBottom || !this._notFirstScroll) {
          this._scrollBottom();
        }
      }
      this._notFirstScroll = true;
    }, _scrollBottom:function() {
      this._getItemsContainer().scrollTop(this._getScrollHeight());
    }, _scrollToNew:function() {
      var newMessages = this.getNewMessages();
      for (var index in newMessages) {
        if (!newMessages.hasOwnProperty(index)) {
          continue;
        }
        var message = newMessages[index], topPosition = message.getPositionTop();
        this._getItemsContainer().scrollTop(topPosition);
        return true;
      }
      return false;
    }, _updateViewedState:function() {
      var newMessages = this.getNewMessages(), scrollBottom = this._getItemsContainer().scrollTop() + this._getItemsContainerHeight();
      for (var index in newMessages) {
        if (!newMessages.hasOwnProperty(index)) {
          continue;
        }
        var message = newMessages[index], bottomPosition = message.getPositionBottom() - 3;
        if (bottomPosition < scrollBottom) {
          message.setViewed();
        }
      }
    }, _getItemsContainerHeight:function() {
      if (this._itemsContainerHeight === undefined) {
        this._itemsContainerHeight = this._getItemsContainer().height();
      }
      return this._itemsContainerHeight;
    }});
    self = hm.module.messenger.ui.message.MessagesList;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.trainingModulesConstructor.Constructor", {extend:"hm.core.ui.Component", config:{tplByClass:true, treeData:null, searchData:null, subjectId:null}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var treeData = $.extend({renderTo:this.getEl().find(".hm-constructor-tree")}, this.config.treeData);
      var tree = HM.create("hm.core.ui.trainingModulesConstructor.Tree", treeData);
      var searchData = $.extend({renderTo:this.getEl().find(".hm-constructor-search"), tree:tree, subjectId:this.config.subjectId}, this.config.searchData);
      var search = HM.create("hm.core.ui.trainingModulesConstructor.ResourcesSearch", searchData);
      this.needToDestroy(tree);
      this.needToDestroy(search);
    }});
    self = hm.core.ui.trainingModulesConstructor.Constructor;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.trainingModulesConstructor.ResourceItem", {extend:"hm.core.ui.Component", config:{tplByClass:true, resource_id:0, title:"", icon_class:"", tree:null}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this.getEl().draggable({start:_.bind(this._onDraggableStart, this), stop:_.bind(this._onDraggableStop, this), drag:_.bind(this._onDraggableDrag, this), resourceItem:this, cursorAt:{top:9, left:9}, helper:"clone", opacity:0.6});
    }, _initEvents:function() {
      this.elOn("click", ".material-icon-small", this._onIconClick, this);
      this.elOn("click", ".hm-search-resource-item-title", this._onTitleClick, this);
    }, _onDraggableStart:function(event, ui) {
      var tree = this.getTree(), dragManager = tree.getDragManager();
      dragManager.reset();
      dragManager.setDraggableNode(this);
    }, _onDraggableStop:function(event, ui) {
      var tree = this.getTree(), dragManager = tree.getDragManager();
      dragManager.getDropHelper().detach();
      var dropTarget = dragManager.getDropTarget(), dropPosition = dragManager.getDropPosition();
      if (!dropTarget) {
        dragManager.reset();
        return;
      }
      var resNode = tree.nodeFactory({title:this.getTitle(), isFolder:false, iconClass:this.getIconClass(), sql_data:{title:this.getTitle(), vol2:this.getId()}, res_data:{res_status:"1"}});
      resNode.setInsertAction();
      switch(dropPosition) {
        case "before":
          dropTarget.addNodeBefore(resNode);
          break;
        case "after":
          dropTarget.addNodeAfter(resNode);
          break;
        case "inside":
          dropTarget.prependNode(resNode);
          if (!dropTarget.isExpanded()) {
            dropTarget.getChildrenContainer().hide();
          }
          break;
      }
      dragManager.reset();
      tree.checkTreeChanges();
    }, _onDraggableDrag:function(event, ui) {
      var dragManager = this.getTree().getDragManager(), draggableOverNode = dragManager.draggableOverNode();
      if (draggableOverNode) {
        draggableOverNode._updateDropHelper(ui);
      }
    }, _onIconClick:function(e) {
      e.preventDefault();
      this.showCard();
    }, _onTitleClick:function(e) {
      e.preventDefault();
      this.viewInWindow();
    }, getTree:function() {
      return this.config.tree;
    }, getTitle:function() {
      return this.config.title;
    }, getId:function() {
      return this.config.resource_id;
    }, getIconClass:function() {
      return this.config.icon_class;
    }, getViewUrl:function() {
      if (!this._viewUrl) {
        this._viewUrl = hm.core.Url.getInstance().url({module:"resource", controller:"index", action:"view", resource_id:this.getId()});
      }
      return this._viewUrl;
    }, getCardUrl:function() {
      if (!this._cardUrl) {
        this._cardUrl = hm.core.Url.getInstance().url({module:"resource", controller:"index", action:"card", resource_id:this.getId()});
      }
      return this._cardUrl;
    }, showCard:function() {
      if (!this._card) {
        this._card = HM.create("hm.core.ui.window.card.Card", {url:this.getCardUrl()});
      }
      this._card.show();
    }, viewInWindow:function() {
      var title = this.getTitle(), id = this.getId();
      if (!this._viewWindow || this._viewWindow.closed) {
        var w = this._viewWindow = window.open(this.getViewUrl(), "res_" + id + "_" + title, "toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1,width=800,height=600");
        $(w).load(function() {
          w.document.title = title;
        });
      }
      this._viewWindow.focus();
    }});
    self = hm.core.ui.trainingModulesConstructor.ResourceItem;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.trainingModulesViewer.BookmarksList", {extend:"hm.core.ui.Component", config:{tplByClass:true, subjectId:null, bookmarks:[]}, statics:{list:null}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      hm.core.ui.trainingModulesViewer.BookmarksList.list = this;
      this._initItems();
    }, _initItems:function() {
      this._items = [];
      var bookmarks = this.config.bookmarks, ln = bookmarks.length;
      for (var i = 0;i < ln;i++) {
        this.addItem(bookmarks[i]["item_title"], bookmarks[i]["item_id"], bookmarks[i]["course_id"], bookmarks[i]["lesson_id"]);
      }
    }, _initEvents:function() {
    }, getViewer:function() {
      if (hm.core.ui.trainingModulesViewer.Viewer.viewer !== null) {
        return hm.core.ui.trainingModulesViewer.Viewer.viewer;
      }
      return false;
    }, getSubjectId:function() {
      return this.config.subjectId;
    }, addItem:function(title, itemId, courseId, lessonId) {
      var item = HM.create("hm.core.ui.trainingModulesViewer.BookmarksListItem", {renderTo:this.getEl(), list:this, courseId:courseId, lessonId:lessonId, itemId:itemId, title:title});
      this._items.push(item);
    }, deleteItem:function(itemId, lessonId) {
      var item = _.find(this._items, function(item) {
        return item.getItemId() == itemId && item.getLessonId() == lessonId;
      });
      if (item) {
        item.destroy();
      }
    }});
    self = hm.core.ui.trainingModulesViewer.BookmarksList;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.trainingModulesViewer.BookmarksListItem", {extend:"hm.core.ui.Component", config:{tplByClass:true, list:null, courseId:null, lessonId:null, itemId:null, title:null}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
    }, _initEvents:function() {
      this.elOn("click", "a", this._onClick);
    }, _onClick:function(e) {
      var viewer = this.getList().getViewer();
      if (viewer && this.getLessonId() == viewer.getLessonId()) {
        e.preventDefault();
        viewer.activate(this.getItemId());
      }
    }, getList:function() {
      return this.config.list;
    }, getCourseId:function() {
      return this.config.courseId;
    }, getLessonId:function() {
      return this.config.lessonId;
    }, getItemId:function() {
      return this.config.itemId;
    }, getUrl:function() {
      if (!this._url) {
        var list = this.getList();
        this._url = hm.core.Url.getInstance().url({module:"subject", controller:"index", action:"index", subject_id:list.getSubjectId(), course_id:this.getCourseId(), lesson_id:this.getLessonId(), item_id:this.getItemId()});
      }
      return this._url;
    }});
    self = hm.core.ui.trainingModulesViewer.BookmarksListItem;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.trainingModulesViewer.ContentSearch", {extend:"hm.core.ui.Component", config:{tplByClass:true, viewer:null}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var $el = this.getEl();
      this._$input = $el.find('input[type="text"]');
      this._$seachButton = $el.find('input[type="button"]');
    }, _initEvents:function() {
      this._$seachButton.on("click", _.bind(this._onClickSearch, this));
    }, _onClickSearch:function(event) {
      event.preventDefault();
      this.search(this.getSearchText());
    }, getViewer:function() {
      return this.config.viewer;
    }, getSearchText:function() {
      return this._$input.val();
    }, search:function(text) {
      var me = this, $iframes = this.getViewer().getAllIframes();
      $iframes.each(function() {
        me._iframeSearch(this, text);
      });
    }, _iframeSearch:function(iframe, searchText) {
      var w = iframe.contentWindow, d = w.document;
      var sel;
      if (w.find && w.getSelection) {
        sel = w.getSelection();
        if (sel.rangeCount > 0) {
          sel.collapseToEnd();
        }
        if (!w.find(searchText)) {
          sel.removeAllRanges();
          w.find(searchText);
        }
      } else {
        if ((d.selection || d.getSelection) && d.body.createTextRange) {
          sel = d.selection || d.getSelection;
          var textRange;
          if (sel.type == "Text") {
            textRange = sel.createRange();
            textRange.collapse(false);
          } else {
            textRange = d.body.createTextRange();
            textRange.collapse(false);
          }
          if (textRange.findText(searchText)) {
            textRange.select();
          }
        }
      }
    }});
    self = hm.core.ui.trainingModulesViewer.ContentSearch;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.trainingModulesViewer.ExtraNavigation", {extend:"hm.core.ui.Component", config:{tplByClass:true, tree:null, viewer:null}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var $el = this.getEl();
      this._titleContainer = $el.find(".hm-extra-nav-title");
      this._counterContainer = $el.find(".hm-extra-nav-counter");
      this._nextButton = $el.find(".hm-extra-nav-button-next");
      this._prevButton = $el.find(".hm-extra-nav-button-prev");
      this._fileButton = $el.find(".hm-extra-nav-button-file");
      this._bookmarkButton = $el.find(".hm-extra-nav-button-bookmark");
    }, _initEvents:function() {
      var tree = this.getTree();
      tree.on("nodeActive", this._onNodeActive, this);
      this.elOn("click", ".hm-extra-nav-button-next", this._onClickNext);
      this.elOn("click", ".hm-extra-nav-button-prev", this._onClickPrev);
      this.elOn("click", ".hm-extra-nav-button-bookmark", this._onClickBookmark);
      this.elOn("click", ".hm-extra-nav-open-in-viewer", this._onClickOpenInViewer);
    }, _onNodeActive:function(event, node) {
      var tree = this.getTree(), viewer = hm.core.ui.trainingModulesViewer.Viewer.viewer, resourceNodes = viewer.getResourceNodes(), resourceNodesCount = resourceNodes.length, activeNode = tree.getActiveNode(), activeIndex = _.indexOf(resourceNodes, activeNode);
      if (activeIndex == -1) {
        return;
      }
      activeIndex++;
      this._counterContainer.text("(" + activeIndex + "/" + resourceNodesCount + ")");
      this._titleContainer.text(node.getTitle());
      this._updateButtonClasses(activeIndex, resourceNodesCount);
      if (activeNode instanceof hm.core.ui.trainingModulesViewer.node.Node) {
        this._updateBookmark(activeNode.getItemId());
      }
    }, _updateButtonClasses:function(activeIndex, resourceNodesCount) {
      if (activeIndex == 1) {
        this._prevButton.addClass("hm-extra-nav-disabled");
      } else {
        this._prevButton.removeClass("hm-extra-nav-disabled");
      }
      if (activeIndex == resourceNodesCount) {
        this._nextButton.addClass("hm-extra-nav-disabled");
      } else {
        this._nextButton.removeClass("hm-extra-nav-disabled");
      }
    }, _onClickNext:function(e) {
      e.preventDefault();
      var tree = this.getTree(), viewer = hm.core.ui.trainingModulesViewer.Viewer.viewer, resourceNodes = viewer.getResourceNodes(), activeNode = tree.getActiveNode(), activeIndex = _.indexOf(resourceNodes, activeNode);
      if (activeIndex !== -1 && resourceNodes[activeIndex + 1]) {
        resourceNodes[activeIndex + 1].activate(true);
      }
    }, _onClickPrev:function(e) {
      e.preventDefault();
      var tree = this.getTree(), viewer = hm.core.ui.trainingModulesViewer.Viewer.viewer, resourceNodes = viewer.getResourceNodes(), activeNode = tree.getActiveNode(), activeIndex = _.indexOf(resourceNodes, activeNode);
      if (activeIndex !== -1 && resourceNodes[activeIndex - 1]) {
        resourceNodes[activeIndex - 1].activate(true);
      }
    }, _onClickBookmark:function(e) {
      e.preventDefault();
      var tree = this.getTree(), viewer = this.getViewer(), activeNode = tree.getActiveNode(), itemId = activeNode.getItemId(), title = activeNode.getTitle();
      if (viewer.isBookmarked(itemId)) {
        viewer.removeBookmark(itemId);
      } else {
        viewer.addBookmark(title, itemId);
      }
      this._updateBookmark(itemId);
    }, _onClickOpenInViewer:function(e) {
      e.preventDefault();
      var viewer = this.getViewer(), $target = $(e.target);
      viewer.loadContent($target.attr("href"));
      viewer.setTitle($target.attr("title"));
      viewer.setEditUrl(false);
      this.getTree().getActiveNode().activate(false);
    }, getTree:function() {
      return this.config.tree;
    }, getViewer:function() {
      return this.config.viewer;
    }, getBookmarking:function() {
      return this.getViewer().getBookmarking();
    }, getCustomButtons:function() {
      return this.getViewer().getCustomButtons();
    }, _updateBookmark:function(itemId) {
      var viewer = this.getViewer(), bookmarkButton = this._bookmarkButton;
      if (viewer.isBookmarked(itemId)) {
        bookmarkButton.addClass("hm-extra-nav-button-is-bookmarked");
      } else {
        bookmarkButton.removeClass("hm-extra-nav-button-is-bookmarked");
      }
    }});
    self = hm.core.ui.trainingModulesViewer.ExtraNavigation;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.trainingModulesViewer.Viewer", {extend:"hm.core.ui.Component", config:{tplByClass:false, tpl:"hm/core/ui/trainingModulesViewer/Viewer", classNameSpace:"hm-training-modules-viewer", loadUrl:null, urls:{}, subjectId:null, lessonId:null, courseId:null, itemId:null, showMenuOnStartup:false, treeData:null, openInWindow:false, showEditButton:false, checkViewedUrl:null, extraNavigation:false, contentSearch:false, customButtons:[], bookmarking:false, bookmarks:[]}, statics:{viewer:null}, 
    _init:function() {
      var _init = arguments.callee;
      $("body").addClass("hm-training-modules-viewer-styles");
      this.callParent(_init, arguments);
      hm.core.ui.trainingModulesViewer.Viewer.viewer = this;
      var me = this, $el = this.getEl(), config = this.config;
      this._$overlay = $el.find(".hm-tmw-overlay");
      this._$loading = $el.find(".hm-tmw-loading");
      this._$contentTitle = $el.find(".hm-tmw-content-title");
      this._$contentEdit = $el.find(".hm-tmw-content-edit");
      this._$contentEdit.hide();
      if (config.loadUrl !== null && _.isString(config.loadUrl)) {
        setTimeout(function() {
          me.loadContent(config.loadUrl);
        }, 100);
      }
      if (!config.treeData) {
        return;
      }
      this._expanded = false;
      this._menuVisible = false;
      this._loadingVisible = true;
      this._$tree = $el.find(".hm-tmw-tree");
      var tree;
      if (_.isString(config.treeData)) {
        tree = hm.core.ui.Component.getComponent($(config.treeData).children());
        this._$tree.append(tree.getEl());
      } else {
        if (config.treeData instanceof jQuery) {
          tree = hm.core.ui.Component.getComponent(config.treeData.children());
          this._$tree.append(tree.getEl());
        } else {
          tree = HM.create("hm.core.ui.trainingModulesViewer.Tree", {renderTo:this._$tree, data:config.treeData});
        }
      }
      tree.on("nodeActive", this._onNodeActive, this);
      this._tree = tree;
      this.needToDestroy(tree);
      var resNodes = this.getResourceNodes();
      if (resNodes.length === 1) {
        $el.find(".hm-tmw-navigation-button").hide();
        $el.find(".hm-tmw-content-title-wrap").css("margin-left", "13px");
      }
      if (config.extraNavigation && resNodes.length > 1) {
        var extraNavigation = HM.create("hm.core.ui.trainingModulesViewer.ExtraNavigation", {renderTo:$el.find(".hm-tmw-footer"), tree:tree, viewer:this});
        this.needToDestroy(extraNavigation);
      }
      if (config.contentSearch) {
        var contentSearch = HM.create("hm.core.ui.trainingModulesViewer.ContentSearch", {renderTo:$el.find(".hm-content-search-wrap"), viewer:this});
        this.needToDestroy(contentSearch);
      }
      if ($.browser.msie && parseInt($.browser.version, 10) < 11) {
        HM.$document().on("click", ".content-size", _.bind(this._fixHeight, this));
      }
      if (config.loadUrl) {
        return;
      }
      setTimeout(function() {
        var isActivated = false;
        if (config.itemId) {
          isActivated = me.activate(config.itemId);
        }
        if (!isActivated && resNodes.length != 0) {
          resNodes[0].activate(true);
        }
        if (config.showMenuOnStartup) {
          me.showMenu();
        }
      }, 100);
    }, _fixHeight:function() {
      if (!this._$tmwContent) {
        this._$tmwContent = this.getEl().find(".hm-tmw-content");
      }
      if (!this._$tmwtRowConten) {
        this._$tmwtRowConten = this.getEl().find(".hm-tmw-row-content");
      }
      var me = this;
      setTimeout(function() {
        me._$tmwContent.removeAttr("style");
        me._$tmwContent.height(me._$tmwtRowConten.height());
      }, 100);
    }, _initEvents:function() {
      this.elOn("click", ".hm-tmw-navigation-button", this.toggleMenu);
      this.getIframe().load(_.bind(this._onIframeLoaded, this));
    }, _onIframeLoaded:function() {
      try {
        var $iframeHead = this.getIframe().contents().find("head");
        $iframeHead.prepend('<meta http-Equiv="Cache-Control" Content="no-cache">' + '<meta http-Equiv="Pragma" Content="no-cache">' + '<meta http-Equiv="Expires" Content="0">');
      } catch (e) {
      }
      this._viewStatusUpdateRequired = true;
      if (this.isMenuVisible()) {
        this._checkViewedStatus();
      }
      this.hideLoading();
    }, _onNodeActive:function(event, node) {
      if (this.config.showEditButton) {
        this.setEditUrl(node.getEditUrl());
      }
      this.setTitle(node.getTitle());
      this.viewResource(node);
      this.hideMenu();
      this.showLoading();
      if (this.config.openInWindow) {
        node.activate(false);
      }
    }, getUrlData:function(name) {
      return this.config.urls[name] || undefined;
    }, getTree:function() {
      return this._tree;
    }, getResourceNodes:function() {
      if (!this._resourceNodes) {
        var resourceNodes = this.getTree().getAllChildren(null, false);
        resourceNodes = _.filter(resourceNodes, this._filter);
        this._resourceNodes = resourceNodes;
      }
      return this._resourceNodes;
    }, _filter:function(node) {
      return!node.isFolder();
    }, activate:function(itemId) {
      var tree = this.getTree(), resNodes = this.getResourceNodes();
      var node = _.find(resNodes, function(node) {
        return node.getItemId() == itemId;
      });
      if (node) {
        node.activate(true);
        return true;
      }
      return false;
    }, getBookmarking:function() {
      if (!this.getLessonId()) {
        return false;
      }
      return this.config.bookmarking;
    }, getCustomButtons:function() {
      return this.config.customButtons;
    }, getBookmarks:function() {
      return this.config.bookmarks;
    }, getBookmarksList:function() {
      if (hm.core.ui.trainingModulesViewer.BookmarksList.list !== null) {
        return hm.core.ui.trainingModulesViewer.BookmarksList.list;
      }
      return false;
    }, addBookmark:function(title, itemId) {
      if (this.isBookmarked(itemId)) {
        return;
      }
      this.config.bookmarks.push(parseInt(itemId));
      $.ajax({url:hm.core.Url.getInstance().url({module:"subject", controller:"ajax", action:"add-bookmark", item_id:itemId, lesson_id:this.getLessonId()})});
      var bookmarksList = this.getBookmarksList();
      if (bookmarksList) {
        bookmarksList.addItem(title, itemId, this.getCourseId(), this.getLessonId());
      }
    }, removeBookmark:function(itemId) {
      var bookmarkIndex = this.getBookmarkIndex(itemId);
      if (bookmarkIndex == -1) {
        return;
      }
      this.config.bookmarks.splice(bookmarkIndex, 1);
      $.ajax({url:hm.core.Url.getInstance().url({module:"subject", controller:"ajax", action:"remove-bookmark", item_id:itemId, lesson_id:this.getLessonId()})});
      var bookmarksList = this.getBookmarksList();
      if (bookmarksList) {
        bookmarksList.deleteItem(itemId, this.getLessonId());
      }
    }, getBookmarkIndex:function(itemId) {
      return _.indexOf(this.getBookmarks(), parseInt(itemId));
    }, isBookmarked:function(itemId) {
      return this.getBookmarkIndex(itemId) != -1;
    }, toggleMenu:function() {
      if (this._menuVisible) {
        this.hideMenu();
      } else {
        this.showMenu();
      }
    }, isMenuVisible:function() {
      return!!this._menuVisible;
    }, showMenu:function() {
      this._checkViewedStatus();
      this._$tree.show();
      this.showOverlay();
      if (!this.config.openInWindow) {
        if (!this._onDocumentClickBinded) {
          this._onDocumentClickBinded = _.bind(this._onDocumentClick, this);
        }
        var onDocumentClickBinded = this._onDocumentClickBinded;
        setTimeout(function() {
          HM.$document().bind("click", onDocumentClickBinded);
        }, 0);
      }
      this._menuVisible = true;
    }, hideMenu:function() {
      if (this.config.openInWindow) {
        return;
      }
      this._$tree.hide();
      if (this._onDocumentClickBinded) {
        HM.$document().unbind("click", this._onDocumentClickBinded);
      }
      this._menuVisible = false;
      this.hideOverlay();
    }, showOverlay:function() {
      this._$overlay.show().stop().animate({opacity:0.95}, 200);
      if ($.browser.msie && parseInt($.browser.version, 10) < 11) {
        this._fixHeight();
      }
    }, hideOverlay:function() {
      if (this._menuVisible || this._loadingVisible) {
        return;
      }
      this._$overlay.stop().animate({opacity:0}, 200, function() {
        $(this).hide();
      });
    }, showLoading:function() {
      if (this.config.openInWindow) {
        return;
      }
      this._loadingVisible = true;
      this.showOverlay();
      this._$loading.show();
    }, hideLoading:function() {
      this._$loading.hide();
      this._loadingVisible = false;
      this.hideOverlay();
    }, _onDocumentClick:function(e) {
      var target = e.target, $target = $(target);
      if (target != this._$overlay[0] && (target != this._$tree[0] && this._$tree.find($target).length == 0)) {
        this.hideMenu();
      }
    }, expand:function(e) {
      if (!this._$oldContainer) {
        this._$oldContainer = this.getEl().parent();
      }
      this._expanded = !this._expanded;
      if (this._expanded) {
        this.getEl().appendTo("body");
        $("html").css("overflow", "hidden");
      } else {
        this._$oldContainer.append(this.getEl());
        $("html").css("overflow", "");
      }
      this.getEl().toggleClass("hm-tmw-expanded");
    }, getIframe:function() {
      if (!this._iframe) {
        this._iframe = this.getEl().find("iframe");
      }
      return this._iframe;
    }, getAllIframes:function() {
      var $iframe = this.getIframe();
      return $iframe.add(this._getChildIframes($iframe));
    }, _getChildIframes:function($iframes) {
      var $childIframes = $iframes.contents().find("iframe");
      if ($childIframes.length != 0) {
        var $childOfchildIframes = this._getChildIframes($childIframes);
        if ($childOfchildIframes.length != 0) {
          $childIframes.add($childOfchildIframes);
        }
      }
      return $childIframes;
    }, loadContent:function(url) {
      if (url.indexOf("/") === 0) {
        var urlInfo = hm.core.Url.getInfo(window.location.href);
        url = urlInfo.protocol + "//" + urlInfo.host + url;
      }
      this._currentUrl = url;
      this.showLoading();
      var $iframe = this.getIframe(), newUrl = url;
      setTimeout(function() {
        try {
          if ($iframe[0].contentWindow.stop) {
            $iframe[0].contentWindow.stop();
          } else {
            $iframe.contents()[0].execCommand("Stop");
          }
        } catch (e) {
        }
        try {
          $iframe[0].contentWindow.location.replace(newUrl);
        } catch (e) {
          $iframe.attr("src", newUrl);
        }
      }, 0);
    }, getCurrentUrl:function() {
      return this._currentUrl;
    }, getCourseId:function() {
      return this.config.courseId;
    }, getLessonId:function() {
      return this.config.lessonId;
    }, getSubjectId:function() {
      return this.config.subjectId;
    }, viewResource:function(node) {
      if (this.config.openInWindow) {
        var title = node.getTitle(), url = node.getViewUrl();
        if (!node._w || node._w.closed) {
          if ($.browser.msie && parseInt($.browser.version, 10) < 11) {
            title = node.getItemId();
          }
          var w = window.open(url, title, "toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1,width=800,height=600");
          $(w).load(function() {
            w.document.title = title;
          });
          node._w = w;
        }
        node._w.focus();
      } else {
        var me = this;
        if (this._showTimer) {
          clearTimeout(this._showTimer);
        }
        this._showTimer = setTimeout(function() {
          me.loadContent(node.getViewUrl());
        }, 1E3);
      }
    }, setEditUrl:function(url) {
      if (url) {
        this._$contentEdit.attr("href", url);
        this._$contentEdit.show();
      } else {
        this._$contentEdit.hide();
      }
    }, setTitle:function(title) {
      this._$contentTitle.html(title);
    }, _getNodesByOid:function() {
      if (!this._nodesByOid) {
        this._nodesByOid = {};
        var nodes = this.getTree().getNodes(), nodesLn = nodes.length;
        for (var i = 0;i < nodesLn;i++) {
          var oid = nodes[i].getItemId();
          this._nodesByOid[oid] = nodes[i];
        }
      }
      return this._nodesByOid;
    }, _checkViewedStatus:function() {
      var checkViewedUrl = this.config.checkViewedUrl;
      if (checkViewedUrl === null || !this._viewStatusUpdateRequired) {
        return;
      }
      this._viewStatusUpdateRequired = false;
      var tree = this.getTree(), nodes = tree.getNodes(), nodesLn = nodes.length, checkOids = [];
      for (var i = 0;i < nodesLn;i++) {
        if (!nodes[i].isViewed()) {
          checkOids.push(nodes[i].getItemId());
        }
      }
      if (checkOids.length == 0) {
        return;
      }
      $.ajax({type:"POST", url:checkViewedUrl, data:{oids:checkOids}}).done(_.bind(this._onViewedStatusDone, this));
    }, _onViewedStatusDone:function(data) {
      var nodes = this._getNodesByOid();
      _.each(data.oids, function(value, key, list) {
        nodes[key].setViewed(value);
      });
    }});
    self = hm.core.ui.trainingModulesViewer.Viewer;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.webinarViewer.StudentViewer", {extend:"hm.core.ui.trainingModulesViewer.Viewer", config:{pollWebinarUrl:null}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var $transparentOverlay = $('<div class="hm-tmw-overlay-transparent"></div>');
      this.getEl().find(".hm-tmw-content").append($transparentOverlay);
      if (this.config.pollWebinarUrl) {
        setTimeout(_.bind(this.startPoll, this), 0);
      }
    }, startPoll:function() {
      this._pollActive = true;
      this._poll();
    }, stopPoll:function() {
      this._pollActive = false;
    }, isPollActive:function() {
      return this._pollActive;
    }, _poll:function() {
      if (!this.isPollActive()) {
        return;
      }
      $.ajax({method:"POST", url:this.config.pollWebinarUrl, data:{currentUrl:this.getCurrentUrl()}, success:_.bind(this._onPollSuccess, this), error:function() {
      }});
    }, _onPollSuccess:function(data) {
      if (data.updated) {
        this.loadContent(data.url);
      }
      this._poll();
    }});
    self = hm.core.ui.webinarViewer.StudentViewer;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.webinarViewer.TeacherViewer", {extend:"hm.core.ui.trainingModulesViewer.Viewer", config:{title:null, tplByClass:true, uploadFileUrl:null, setWebinarUrl:null}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var $el = this.getEl();
      this._$contentTitleWrap = $el.find(".hm-tmw-content-title-wrap");
      this._file = HM.create("hm.core.ui.webinarViewer.file.File", {renderTo:this._$contentTitleWrap, uploadUrl:this.config.uploadFileUrl, listeners:{scope:this, link_input_submit:this._onLinkInputSubmit}});
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
    }, _onLinkInputSubmit:function(event, value) {
      this.loadContent(value);
    }, _onNodeActive:function(url) {
      var _onNodeActive = arguments.callee;
      this._file.clearLinkValue();
      this.callParent(_onNodeActive, arguments);
    }, _onIframeLoaded:function() {
      var _onIframeLoaded = arguments.callee;
      var $iframe = this.getIframe();
      try {
        var iframeHref = $iframe[0].contentWindow.location.href;
        if (iframeHref != this.getCurrentUrl()) {
          this._currentUrl = iframeHref;
          this.syncUrl();
        }
      } catch (e) {
      }
      this.callParent(_onIframeLoaded, arguments);
    }, syncUrl:function() {
      $.ajax({method:"POST", url:this.config.setWebinarUrl, data:{url:this.getCurrentUrl()}});
    }, loadContent:function(url) {
      var loadContent = arguments.callee;
      this.callParent(loadContent, arguments);
      this.syncUrl();
    }, setTitle:function(title) {
    }});
    self = hm.core.ui.webinarViewer.TeacherViewer;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.webinarViewer.file.File", {extend:"hm.core.ui.Component", config:{tplByClass:true, classNameSpace:"hm-form-file", uploadUrl:null}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      var $el = this.getEl(), ns = this.getNs();
      this.CLASS_FOUCS = ns.getClass("focus");
      this.CLASS_DROPPABLE = ns.getClass("droppable");
      this._$contentWrap = ns.find("content-wrap");
      var dropAreaClass = ns.getClass("drop-area");
      if ($el.hasClass(dropAreaClass)) {
        this._$dropArea = $el;
      } else {
        this._$dropArea = ns.find("drop-area");
      }
      this._$linkInputWrap = ns.find("link-input-wrap");
      this._$linkInput = this._$linkInputWrap.find("input");
      this._$linkInputTip = ns.find("link-input-tip");
      this._$linkInputTipSpan = this._$linkInputTip.find("span");
      this._$fileInput = ns.find("file-input");
      this._$fileInputTip = ns.find("file-input-tip");
      this._$fileInputTipTd = this._$fileInputTip.parent("td:first");
      this._fileReader = new FileReader;
      this._xhr = new XMLHttpRequest;
    }, _initEvents:function() {
      this._$linkInputTipSpan.on("click", _.bind(this._onClickInputTip, this));
      this._$linkInput.on("focus", _.bind(this._onFocusInput, this));
      this._$linkInput.on("blur", _.bind(this._onBlurInput, this));
      this._$linkInput.on("keyup", _.bind(this._onKeyupInput, this));
      var handleFiles = _.bind(this._handleFiles, this);
      this._$fileInput.on("change", handleFiles);
      var dragoverHandler = _.bind(this._dragoverHandler, this), dragleaveHandler = _.bind(this._dragleaveHandler, this);
      this._$dropArea.each(function() {
        this.addEventListener("drop", handleFiles, false);
        this.addEventListener("dragover", dragoverHandler, false);
        this.addEventListener("dragleave", dragleaveHandler, false);
      });
      this._xhr.onloadstart = _.bind(this._xhrOnloadstart, this);
      this._xhr.upload.onprogress = _.bind(this._xhrOnprogress, this);
      this._xhr.onload = _.bind(this._xhrOnload, this, this._xhr);
    }, _dragoverHandler:function() {
      this.getEl().addClass(this.CLASS_DROPPABLE);
    }, _dragleaveHandler:function() {
      this.getEl().removeClass(this.CLASS_DROPPABLE);
    }, _xhrOnloadstart:function() {
    }, _xhrOnprogress:function(event) {
    }, _xhrOnload:function(xhr) {
      if (xhr.status != 200) {
      } else {
        this.setLinkValue(xhr.responseText);
        this._submitLinkInput();
      }
    }, _fileReaderOnload:function(e) {
    }, _handleFiles:function(e) {
      this.getEl().removeClass(this.CLASS_DROPPABLE);
      var files = e.target.files || e.dataTransfer.files;
      if (files.length == 0) {
        return;
      }
      var file = files[0];
      var formData = new FormData;
      formData.append("file", file);
      this._xhr.open("POST", this.config.uploadUrl, true);
      this._xhr.send(formData);
      this._$fileInput.val("");
    }, _onClickInputWrap:function(e) {
      this._$linkInput.trigger("focus");
    }, _onClickInputTip:function() {
      this.showLinkInput();
      this._$linkInput.focus();
    }, _onFocusInput:function(e) {
      if (this._inputHasFocus) {
        e.preventDefault();
        return;
      }
      this._inputHasFocus = true;
      this._$linkInput.select();
      this.getEl().addClass(this.CLASS_FOUCS);
    }, _onBlurInput:function() {
      this._inputHasFocus = false;
      var val = this.getLinkValue();
      if (val.trim() == "") {
        var me = this;
        setTimeout(function() {
          me.hideLinkInput();
        }, 200);
      }
      this.getEl().removeClass(this.CLASS_FOUCS);
    }, _onKeyupInput:function(e) {
      if (e.keyCode == 13) {
        this._submitLinkInput();
      }
    }, showLinkInput:function() {
      this._$linkInputTip.hide();
      this._$linkInputWrap.show();
      this._$fileInputTipTd.css("width", "1%");
    }, hideLinkInput:function() {
      this._$linkInputTip.show();
      this._$linkInputWrap.hide();
      this._$fileInputTipTd.css("width", "100%");
    }, clearLinkValue:function() {
      this._$linkInput.val("");
      this.hideLinkInput();
    }, setLinkValue:function(val) {
      this._$linkInput.val(val);
      this.showLinkInput();
    }, getLinkValue:function() {
      return this._$linkInput.val();
    }, _submitLinkInput:function() {
      this._$linkInput.blur();
      this.fireEvent("link_input_submit", this.getLinkValue());
    }});
    self = hm.core.ui.webinarViewer.file.File;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.trainingModulesConstructor.ResourcesSearch", {extend:"hm.core.ui.search.SphinxSearch", config:{tplByClass:true, subjectId:null, indexerUrl:null, searchUrl:hm.core.Url.getInstance().url({module:"course", controller:"constructor", action:"search-resources"}), indexes:["resources"], items:{all:{field:"*", hidden:true}, title:{field:"title", label:HM._("Название ресурса")}, description:{field:"description", 
    label:HM._("Краткое описание")}, filename:{field:"filename", label:HM._("Название файла")}, content:{field:"content", label:HM._("Содержимое")}, tags:{field:"tags", label:HM._("Метки")}, classifiers:{attr:"classifiers", label:HM._("Классификаторы"), 
    options:{}}, location:{attr:"location", value:1, hidden:true}, status:{attr:"status", value:1, hidden:true}}, data:{tags:[]}, tree:null}, _init:function() {
      var _init = arguments.callee;
      if (this.config.subjectId !== null) {
        this.config.searchUrl = hm.core.Url.getInstance().url({module:"course", controller:"constructor", action:"search-resources", subject_id:this.config.subjectId});
      }
      this.callParent(_init, arguments);
      var config = this.config;
      var $el = this.getEl();
      this._$extendedFiltersContainer = $el.find(".hm-sphinx-search-extended");
      this._$extendedSwitcher = $el.find(".hm-sphinx-search-toggle-extended a");
      HM.create("hm.core.ui.autocomplete.Autocomplete", {el:$el.find('input[name="tags"]'), uiClass:"hm-autocomplete-resSearch", autoBlur:false, multiple:true, source:config.data.tags});
      if (config.data.classifiers) {
        var $select = $el.find('select[name="classifiers"]');
        _.each(config.data.classifiers, function(item, key, list) {
          $select.append('<option value="' + key + '">' + item + "</option>");
        });
      }
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this.elOn("click", ".hm-sphinx-search-toggle-extended a", this._toggleExtended, this);
      this.elOn("click", ".hm-sphinx-search-run-indexer a", this._runIndexer, this);
      this.elOn("click", ".hm-sphinx-search-all", this._searchAll, this);
    }, _toggleExtended:function(e) {
      e.preventDefault();
      this._$extendedSwitcher.toggleClass("hm-switcher-active");
      this._$extendedFiltersContainer.toggle();
    }, _runIndexer:function(e) {
      e.preventDefault();
      $.ajax({type:"POST", url:this.config.indexerUrl}).done(function(data) {
      });
    }, getTree:function() {
      return this.config.tree;
    }, _searchAll:function() {
      var me = this;
      setTimeout(function() {
        me.search();
      }, 0);
    }, _onSearchDone:function(data) {
      if (!this._resourceItems) {
        this._resourceItems = [];
      }
      while (this._resourceItems.length != 0) {
        this._resourceItems[0].destroy();
        this._resourceItems.splice(0, 1);
      }
      var $resultsContainer = this.getResultsContainer();
      $resultsContainer.contents().remove();
      if (_.isEmpty(data)) {
        $resultsContainer.html(HM._("Ничего не найдено."));
      } else {
        _.each(data, this._initResourceItem, this);
      }
    }, _initResourceItem:function(value, key, list) {
      var item = HM.create("hm.core.ui.trainingModulesConstructor.ResourceItem", {renderTo:this.getResultsContainer(), resource_id:value.resource_id, title:value.title, tree:this.getTree(), icon_class:value.icon_class});
      this._resourceItems.push(item);
    }});
    self = hm.core.ui.trainingModulesConstructor.ResourcesSearch;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.trainingModulesConstructor.Tree", {extend:"hm.core.ui.tree.Tree", config:{tpl:"hm/core/ui/trainingModulesConstructor/Tree", courseId:null, subjectId:null, resourceList:[]}, _init:function() {
      var _init = arguments.callee;
      this._initContextMenu();
      this.callParent(_init, arguments);
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this.elOn("click", ".hm-tree-add-section", this._addToRoot, this);
    }, _addToRoot:function(e) {
      e.preventDefault();
      var rootNode = this.getRoot();
      rootNode.appendNode(this.getNewFolder());
      this.checkTreeChanges();
    }, _initContextMenu:function() {
      this._folderMenu = HM.create("hm.core.ui.contextmenu.ContextMenu", {items:this._getFolderMenuItems(), listeners:{scope:this, beforeShow:this._beforeContextShow, itemClick:this._onContextItemClick}});
      this._resourceMenu = HM.create("hm.core.ui.contextmenu.ContextMenu", {items:this._getResourceMenuItems(), listeners:{scope:this, beforeShow:this._beforeContextShow, itemClick:this._onContextItemClick}});
    }, _getFolderMenuItems:function() {
      var folderItems = [{title:HM._("Создать раздел выше"), callback:_.bind(this.addItemBefore, this)}, {title:HM._("Создать раздел ниже"), callback:_.bind(this.addItemAfter, this)}, {title:HM._("Создать подраздел"), callback:_.bind(this.addSubItem, 
      this)}, {title:HM._("Переименовать"), callback:_.bind(this.renameItem, this)}, {title:HM._("Удалить"), callback:_.bind(this.deleteItem, this)}];
      var resourceList = this.config.resourceList;
      if (resourceList) {
        for (var i = 0, ln = resourceList.length;i < ln;i++) {
          var resourceListItem = resourceList[i];
          resourceListItem.callback = _.bind(this.createResItem, this);
          folderItems.push(resourceListItem);
        }
      }
      return folderItems;
    }, _getResourceMenuItems:function() {
      return[{title:HM._("Создать раздел выше"), callback:_.bind(this.addItemBefore, this)}, {title:HM._("Создать раздел ниже"), callback:_.bind(this.addItemAfter, this)}, {title:HM._("Редактировать ресурс"), callback:_.bind(this.editResItem, 
      this)}, {title:HM._("Посмотреть ресурс"), callback:_.bind(this.viewResItem, this)}, {title:HM._("Удалить"), callback:_.bind(this.deleteItem, this)}];
    }, _onContextItemClick:function(event, contextMenuItem) {
    }, _onTreeOut:function(event, ui) {
      var dragManager = this.getDragManager(), draggableNode = dragManager.getDraggableNode();
      if (draggableNode instanceof hm.core.ui.trainingModulesConstructor.ResourceItem) {
        dragManager.reset();
        dragManager.setDraggableNode(draggableNode);
      }
    }, getSubjectId:function() {
      return this.config.subjectId;
    }, getCourseId:function() {
      return this.config.courseId;
    }, getUpdateUrl:function() {
      if (this._updateUrl === undefined) {
        this._updateUrl = hm.core.Url.getInstance().url({module:"course", controller:"constructor", action:"update-structure", course_id:this.getCourseId(), subject_id:this.getSubjectId()});
      }
      return this._updateUrl;
    }, getRootContainer:function() {
      return this.getEl().find(".hm-tree-container");
    }, _nodeFactory:function(nodeData) {
      var isEditable = this.isEditable();
      var className = "hm.core.ui.trainingModulesConstructor.node.OrganizationNode";
      var config = {title:nodeData.title, childrenData:nodeData.children, tree:this, folder:nodeData.isFolder, iconClass:nodeData.iconClass, contextMenu:this._folderMenu, sql_data:nodeData.sql_data, draggable:isEditable, droppable:isEditable, editable:isEditable};
      if (!nodeData.isFolder) {
        className = "hm.core.ui.trainingModulesConstructor.node.ResourceNode";
        config.contextMenu = this._resourceMenu;
        config.editable = false;
        config.status = nodeData.res_data.status;
        config.notFound = nodeData.res_data.notFound;
      }
      var newNode = HM.create(className, config);
      if (!nodeData.isFolder && (nodeData.insertResource && nodeData.sql_res_data)) {
        newNode.insertResource = true;
        newNode.sql_res_data = nodeData.sql_res_data;
      }
      return newNode;
    }, getNewFolder:function() {
      var title = HM._("Новый раздел");
      var newNode = this.nodeFactory({title:title, isFolder:true, sql_data:{title:title}});
      newNode.setInsertAction();
      return newNode;
    }, getNewResource:function(data) {
      var title = data.title, status = data.sql_res_data ? data.sql_res_data.status : null;
      var newNode = this.nodeFactory({title:title, isFolder:false, iconClass:data.iconClass, sql_data:{title:title}, insertResource:true, res_data:{status:status}, sql_res_data:data.sql_res_data});
      newNode.setInsertAction();
      return newNode;
    }, addItemBefore:function(menuItem, targetNode) {
      targetNode.addNodeBefore(this.getNewFolder());
      this.checkTreeChanges();
    }, addItemAfter:function(menuItem, targetNode) {
      targetNode.addNodeAfter(this.getNewFolder());
      this.checkTreeChanges();
    }, addSubItem:function(menuItem, targetNode) {
      targetNode.prependNode(this.getNewFolder());
      targetNode.expand(true);
      this.checkTreeChanges();
    }, renameItem:function(menuItem, targetNode) {
      targetNode.editTitle();
    }, deleteItem:function(menuItem, targetNode) {
      targetNode.setDeleteAction();
      var children = this.getAllChildren(targetNode, false);
      for (var i = 0, ln = children.length;i < ln;i++) {
        children[i].setDeleteAction();
      }
      targetNode.remove();
      this.checkTreeChanges();
    }, createResItem:function(menuItem, targetNode) {
      var menuItemData = menuItem.getData();
      if (!menuItemData) {
        return;
      }
      targetNode.prependNode(this.getNewResource(menuItemData));
      targetNode.expand(true);
      this.checkTreeChanges();
    }, editResItem:function(menuItem, targetNode) {
      if (targetNode.editResource) {
        targetNode.editResource();
      }
    }, viewResItem:function(menuItem, targetNode) {
      if (targetNode.viewResource) {
        targetNode.viewResource();
      }
    }, checkTreeChanges:function(instant) {
      var nodes = this.getPlainTree(true), prev_ref = -1;
      for (var i = 0, ln = nodes.length;i < ln;i++) {
        var node = nodes[i], nodeLevel = node.getLevel();
        if (node.getSqlData("level") != nodeLevel) {
          node.setSqlData("level", nodeLevel);
          node.setUpdateAction();
        }
        if (node.getSqlData("prev_ref") != prev_ref) {
          node.setSqlData("prev_ref", prev_ref);
          node.setUpdateAction();
        }
        prev_ref = node.getSqlData("oid");
      }
      clearTimeout(this._saveTimer);
      if (instant) {
        this._updateTreeNodes();
      } else {
        this._saveTimer = setTimeout(_.bind(this._updateTreeNodes, this), 3500);
      }
    }, _updateTreeNodes:function() {
      this._updateRequired = true;
      if (this._isUpdating || this.getDragManager().isDragging()) {
        return;
      }
      this._isUpdating = true;
      this._updateRequired = false;
      this._updatingNodes = [];
      this._insertingNodes = [];
      var nodes = {update:[], insert:[], remove:[]};
      var treeNodes = this.getNodes();
      for (var i = 0, ln = treeNodes.length;i < ln;i++) {
        var node = treeNodes[i];
        if (node.hasInsertAction()) {
          nodes.insert.push(node.getActionData());
          this._insertingNodes.push(node);
        }
        if (node.hasUpdateAction()) {
          nodes.update.push(node.getActionData());
        }
        if (node.hasDeleteAction()) {
          nodes.remove.push(node.getActionData());
        }
        node.resetAction();
      }
      $.ajax({type:"POST", url:this.getUpdateUrl(), data:{nodes:nodes}}).done(_.bind(this._onUpdateDone, this));
    }, _onUpdateDone:function(data) {
      this._updateNewNodes(data[0]);
      this._isUpdating = false;
      if (this._updateRequired) {
        this.checkTreeChanges();
      }
    }, _updateNewNodes:function(data) {
      var nodes = this.getNodes();
      for (var i = 0, ln = nodes.length;i < ln;i++) {
        var node = nodes[i], nodeKey = node.getKey(), dataByKey = data[nodeKey];
        if (dataByKey) {
          if (node.hasUpdateAction()) {
            dataByKey.sql_data.title = node.config.sql_data.title;
          }
          node.config.sql_data = dataByKey.sql_data;
        }
      }
    }, _drop:function() {
      var _drop = arguments.callee;
      this.callParent(_drop, arguments);
      this.checkTreeChanges();
    }});
    self = hm.core.ui.trainingModulesConstructor.Tree;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.trainingModulesViewer.Bookmarks", {extend:"hm.core.ui.tree.Tree", config:{tplByClass:true, viewer:false, classNameSpace:"hm-tmw-bookmarks"}, _init:function() {
      var _init = arguments.callee;
      if (!this.config.viewer) {
        this._initContextMenu();
      }
      this.callParent(_init, arguments);
    }, _initContextMenu:function() {
      this._contextMenu = HM.create("hm.core.ui.contextmenu.ContextMenu", {items:{addItemBefore:{title:HM._("Создать папку"), callback:_.bind(this.addFolder, this)}, renameItem:{title:HM._("Переименовать"), callback:_.bind(this.renameItem, this)}, deleteItem:{title:HM._("Удалить"), callback:_.bind(this.deleteItem, this)}}, listeners:{scope:this, 
      beforeShow:this._beforeContextShow, itemClick:this._onContextItemClick}});
    }, _drop:function() {
      var _drop = arguments.callee;
      this.callParent(_drop, arguments);
      this.checkTreeChanges();
    }, getNewFolder:function() {
      var title = HM._("Новая папка");
      var newNode = this.nodeFactory({title:title, isFolder:true, data:{title:title}});
      newNode.setState(hm.core.ui.tree.node.Node.STATE_CREATED);
      return newNode;
    }, addFolder:function(menuItem, targetNode) {
      targetNode.addNodeBefore(this.getNewFolder());
      this._updateTreeNodes();
    }, renameItem:function(menuItem, targetNode) {
      targetNode.editTitle();
    }, deleteItem:function(menuItem, targetNode) {
      targetNode.setState(hm.core.ui.tree.node.Node.STATE_DELETED);
      var children = this.getAllChildren(targetNode, false);
      for (var i = 0, ln = children.length;i < ln;i++) {
        children[i].setState(hm.core.ui.tree.node.Node.STATE_DELETED);
      }
      targetNode.remove();
      this.checkTreeChanges();
    }, getUpdateUrl:function() {
      if (this._updateUrl === undefined) {
        this._updateUrl = hm.core.Url.getInstance().url({module:"course", controller:"bookmarks", action:"update"});
      }
      return this._updateUrl;
    }, _getFactoryNodeName:function(nodeData) {
      return "hm.core.ui.trainingModulesViewer.node.BookmarkNode";
    }, _getFactoryNodeConfig:function(nodeData) {
      var _getFactoryNodeConfig = arguments.callee;
      var nodeConfig = this.callParent(_getFactoryNodeConfig, arguments);
      nodeConfig.contextMenu = this._contextMenu;
      return nodeConfig;
    }, _updateTreeNodes:function() {
      var nodes = this.getNodes(), nodeClass = hm.core.ui.tree.node.Node, nodesData = {update:[], insert:[], "delete":[]};
      for (var i = 0, ln = nodes.length;i < ln;i++) {
        var node = nodes[i], itemData = node.getItemData(), prevNode = node.getPrevNode(false, false), prevNodeItemData = undefined, nodeState = node.getState();
        if (prevNode) {
          prevNodeItemData = prevNode.getItemData();
        }
        if (nodeState === nodeClass.STATE_CHANGED) {
          if (prevNodeItemData) {
            itemData.prev_id = prevNodeItemData.bookmark_id;
          } else {
            itemData.prev_id = 0;
          }
          var parent = node.getParent();
          if (parent && !parent.isRoot()) {
            var parentItemData = parent.getItemData();
            itemData.parent_id = parentItemData.bookmark_id;
          } else {
            itemData.parent_id = 0;
          }
          itemData.title = node.getTitle();
          nodesData["update"].push(itemData);
        }
        if (nodeState === nodeClass.STATE_CREATED) {
          itemData["key"] = node.getKey();
          nodesData["insert"].push(itemData);
        }
        if (nodeState === nodeClass.STATE_DELETED) {
          nodesData["delete"].push(itemData);
        }
        node.setState(nodeClass.STATE_DEFAULT);
      }
      $.ajax({type:"POST", url:this.getUpdateUrl(), data:{nodes:nodesData}}).done(_.bind(this._onUpdateDone, this));
    }, _onUpdateDone:function(data) {
      if (data && data.nodes) {
        var nodes = data.nodes, ln = nodes.length;
        for (var i = 0;i < ln;i++) {
          var nodeData = nodes[i]["data"], nodeKey = nodes[i]["key"], node = this.getNode(nodeKey);
          if (node) {
            node.setItemData(nodeData);
          }
        }
        if (ln != 0) {
          this.checkTreeChanges(true);
        }
      }
    }});
    self = hm.core.ui.trainingModulesViewer.Bookmarks;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.trainingModulesViewer.Tree", {extend:"hm.core.ui.tree.Tree", config:{editable:false}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
    }, _nodeFactory:function(nodeData) {
      var isEditable = this.isEditable();
      return HM.create("hm.core.ui.trainingModulesViewer.node.Node", {oid:nodeData.sql_data.oid, resourceId:nodeData.sql_data.vol2, title:nodeData.title, childrenData:nodeData.children, tree:this, folder:nodeData.isFolder, iconClass:nodeData.iconClass, draggable:isEditable, droppable:isEditable, editable:isEditable});
    }});
    self = hm.core.ui.trainingModulesViewer.Tree;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.trainingModulesConstructor.node.OrganizationNode", {extend:"hm.core.ui.tree.node.Node", config:{organizationId:null, sql_data:null}, _init:function() {
      var _init = arguments.callee;
      this.SQL_ACTION_INSERT = "insert";
      this.SQL_ACTION_UPDATE = "update";
      this.SQL_ACTION_DELETE = "delete";
      this.callParent(_init, arguments);
      if (!this.isFolder()) {
        this.getItemContainer().find(".hm-tree-node-icon").addClass("material-icon-small");
      }
    }, _beforeClick:function(e) {
      if (e.ctrlKey) {
        return false;
      }
      return true;
    }, setTitle:function() {
      var setTitle = arguments.callee;
      this.callParent(setTitle, arguments);
      this.config.sql_data.title = this.getTitle();
      this.setUpdateAction();
      this.getTree().checkTreeChanges();
    }, setInsertAction:function() {
      this._setSqlAction(this.SQL_ACTION_INSERT);
    }, setUpdateAction:function() {
      if (this.hasInsertAction()) {
        return;
      }
      this._setSqlAction(this.SQL_ACTION_UPDATE);
    }, setDeleteAction:function() {
      this._setSqlAction(this.SQL_ACTION_DELETE);
    }, hasInsertAction:function() {
      return this._getSqlAction() === this.SQL_ACTION_INSERT;
    }, hasUpdateAction:function() {
      return this._getSqlAction() === this.SQL_ACTION_UPDATE;
    }, hasDeleteAction:function() {
      return this._getSqlAction() === this.SQL_ACTION_DELETE;
    }, resetAction:function() {
      this._sqlAction = null;
    }, getSqlData:function(key) {
      if (_.isString(key)) {
        if (!this.config.sql_data[key]) {
          console.warn('Не найдены данные с ключом "' + key + '".');
        }
        return this.config.sql_data[key];
      }
      return this.config.sql_data;
    }, setSqlData:function(key, value) {
      this.config.sql_data[key] = value;
    }, getActionData:function() {
      var prevNode = this.getPrevNode(false, false);
      return{key:this.getKey(), prev_key:prevNode ? prevNode.getKey() : -1, sql_data:this.getSqlData()};
    }, _setSqlAction:function(action) {
      this._sqlAction = action;
    }, _getSqlAction:function() {
      return this._sqlAction;
    }});
    self = hm.core.ui.trainingModulesConstructor.node.OrganizationNode;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.trainingModulesConstructor.node.ResourceNode", {extend:"hm.core.ui.trainingModulesConstructor.node.OrganizationNode", config:{resourceId:null, tpl:"hm/core/ui/trainingModulesConstructor/node/ResourceNode", status:null, notFound:false}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._baseUrlEditRes = hm.core.Url.getInstance().url({module:"resource", controller:"index", action:"edit-content"});
      this._baseUrlViewRes = hm.core.Url.getInstance().url({module:"resource", controller:"index", action:"view"});
      var config = this.config, itemContainer = this.getItemContainer(), title = this.getTitle();
      if (config.notFound) {
        itemContainer.addClass("hm-tree-node-item-notFound");
      } else {
        if (config.status == "0") {
          itemContainer.addClass("hm-tree-node-item-unpublished");
        }
      }
    }, getActionData:function() {
      var prevNode = this.getPrevNode(false, false);
      var data = {key:this.getKey(), prev_key:prevNode ? prevNode.getKey() : -1, sql_data:this.getSqlData()};
      if (this.insertResource) {
        data.insertResource = true;
        data.sql_res_data = this.sql_res_data;
        data.sql_res_data.title = data.sql_data.title;
      }
      return data;
    }, resourceId:function(id) {
      if (id !== undefined) {
        this.config.resourceId = id;
      }
      return this.config.resourceId;
    }, viewResource:function() {
      if (this.config.sql_data && this.config.sql_data.vol2) {
        var title = this.config.title, id = this.config.sql_data.vol2, url = this._baseUrlViewRes + "/resource_id/" + id;
        var w = window.open(url, "res_" + id + "_" + title, "toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1,width=800,height=600");
        $(w).load(function() {
          w.document.title = title;
        });
        w.focus();
      }
    }, editResource:function() {
      if (this.config.sql_data && this.config.sql_data.vol2) {
        var resId = this.config.sql_data.vol2, subjectId = this.getTree().getSubjectId();
        var url = this._baseUrlEditRes + "/resource_id/" + resId;
        if (subjectId) {
          url += "/subject_id/" + subjectId;
        }
        window.open(url, "_blank");
      }
    }});
    self = hm.core.ui.trainingModulesConstructor.node.ResourceNode;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.trainingModulesViewer.node.BookmarkNode", {extend:"hm.core.ui.tree.node.Node", config:{}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
    }, _beforeClick:function(e) {
      if (e.ctrlKey) {
        return false;
      }
      return true;
    }, _onClick:function(e) {
      var _onClick = arguments.callee;
      this.callParent(_onClick, arguments);
      if (!this.isFolder() && !this.getTree().config.viewer) {
        window.location.href = this.getViewUrl();
      }
    }, activate:function() {
      var activate = arguments.callee;
      if (this.isFolder()) {
        return;
      }
      this.callParent(activate, arguments);
    }, getViewUrl:function() {
      if (!this._viewUrl) {
        var itemData = this.getItemData(), viewer = this.getTree().config.viewer;
        if (viewer) {
          this._viewUrl = hm.core.Url({module:"resource", controller:"index", action:"view", resource_id:itemData["resource_id"]});
        } else {
          this._viewUrl = hm.core.Url({module:"course", controller:"bookmarks", action:"view", bookmark_id:itemData["bookmark_id"]});
        }
      }
      return this._viewUrl;
    }, getItemId:function() {
      var itemData = this.getItemData();
      return itemData["bookmark_id"];
    }, setTitle:function() {
      var setTitle = arguments.callee;
      this.callParent(setTitle, arguments);
      this.setState(hm.core.ui.tree.node.Node.STATE_CHANGED);
      this.getTree().checkTreeChanges();
    }});
    self = hm.core.ui.trainingModulesViewer.node.BookmarkNode;
  })();
  (function() {
    var self;
    HM.define("hm.core.ui.trainingModulesViewer.node.Node", {extend:"hm.core.ui.tree.node.Node", config:{tplByClass:true, resourceId:null, oid:null}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
    }, _beforeClick:function(e) {
      if (e.ctrlKey) {
        return false;
      }
      return true;
    }, isViewed:function() {
      return!!this._viewed;
    }, setViewed:function(flag) {
      this._viewed = !!flag;
      if (!this._viewedIcon) {
        this._viewedIcon = this.getItemContainer().find(".hm-tree-node-viewed");
      }
      if (flag) {
        this._viewedIcon.css("display", "inline-block");
      } else {
        this._viewedIcon.hide();
      }
    }, activate:function(value) {
      var activate = arguments.callee;
      if (this.isFolder()) {
        return;
      }
      if (this.isActive() == value) {
        hm.core.ui.trainingModulesViewer.Viewer.viewer.hideMenu();
      }
      this.callParent(activate, arguments);
    }, getViewUrl:function() {
      if (!this._viewUrl) {
        var url = this.getTree().getViewUrl();
        this._viewUrl = url + "/item_id/" + this.getItemId();
      }
      return this._viewUrl;
    }, getViewUrl:function(itemId) {
      if (!this._viewUrl) {
        var urlParams = {module:"course", controller:"item", action:"view"};
        var viewer = hm.core.ui.trainingModulesViewer.Viewer.viewer;
        if (viewer.getSubjectId()) {
          urlParams.subject_id = viewer.getSubjectId();
        }
        if (viewer.getLessonId()) {
          urlParams.lesson_id = viewer.getLessonId();
        }
        if (viewer.getCourseId()) {
          urlParams.course_id = viewer.getCourseId();
        }
        urlParams.item_id = this.getItemId();
        this._viewUrl = hm.core.Url.getInstance().url(urlParams);
      }
      return this._viewUrl;
    }, getEditUrl:function() {
      if (this.getResourceId() == 0) {
        return "";
      }
      if (!this._editUrl) {
        this._editUrl = hm.core.Url({module:"resource", controller:"index", action:"edit-content", resource_id:this.getResourceId()});
      }
      return this._editUrl;
    }, getResourceId:function() {
      return this.config.resourceId;
    }, getItemId:function() {
      return this.config.oid;
    }});
    self = hm.core.ui.trainingModulesViewer.node.Node;
  })();
  (function() {
    var self;
    var instance = null;
    HM.define("hm.module.mainPageWidgets.MainPageWidgets", {extend:"hm.core.ui.Component", config:{maxWidgetHeight:350, minWidgetWidthPercent:30, blocks:null, saveUrl:"/interface/edit/update-my", role:"guest", roles:null, adminMode:false, allowEditByUsers:false}, statics:{get:function() {
      if (!instance) {
        HM.create("hm.module.mainPageWidgets.MainPageWidgets");
      }
      return instance;
    }}, _init:function() {
      var _init = arguments.callee;
      instance = this;
      this.callParent(_init, arguments);
      this._widgets = [];
      var $rows = this._$el.find(".hm-widgets-row"), rows = [], config = this.config, adminMode = config.adminMode, currentRole = config.role, allowEditByUsers = config.allowEditByUsers, minWidgetWidthPercent = config.minWidgetWidthPercent, maxWidgetHeight = config.maxWidgetHeight;
      for (var i = 0, ln = $rows.length;i < ln;i++) {
        rows.push(HM.create("hm.module.mainPageWidgets.Row", {el:$rows.eq(i), maxWidgetHeight:maxWidgetHeight, minWidgetWidthPercent:minWidgetWidthPercent, editor:this, listeners:{scope:this, destroy:this._onRowDestroy, widgetAdded:this._onWidgetAdded, beginSorting:this._onBeginSorting, endSorting:this._onEndSorting, successSorting:this._onSuccessSorting, isEmpty:this._onRowEmpty}}));
      }
      this._rows = rows;
      this._checkRowsHeight();
      if (!adminMode && (currentRole !== "guest" && allowEditByUsers)) {
        this._toolbar = HM.create("hm.module.mainPageWidgets.toolbar.Toolbar", {renderTo:this._$el, editor:this, listeners:{scope:this, editButtonClick:this._onEditButtonClick}});
      }
      this._roleSwitcher = HM.create("hm.module.mainPageWidgets.toolbar.RoleToolbar", {roles:config.roles, role:config.role, adminMode:adminMode, renderTo:this._$el.find(".hm-widgets-topContainer"), listeners:{scope:this, saveButtonClick:this._onSaveButtonClick}});
      if (adminMode) {
        this.setEditMode(true);
      } else {
        this.setEditMode(false);
      }
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
    }, _checkRowsHeight:function() {
      var rows = this._rows;
      for (var i = 0, ln = rows.length;i < ln;i++) {
        rows[i].checkWidgetHeight();
      }
    }, createNewEmptyRow:function(position) {
      var newRow = HM.create("hm.module.mainPageWidgets.Row", {tplByClass:true, maxWidgetHeight:this.config.maxWidgetHeight, minWidgetWidthPercent:this.config.minWidgetWidthPercent, renderTo:this._$el, editor:this, listeners:{scope:this, destroy:this._onRowDestroy, widgetAdded:this._onWidgetAdded, beginSorting:this._onBeginSorting, endSorting:this._onEndSorting, successSorting:this._onSuccessSorting, isEmpty:this._onRowEmpty}});
      var rows = this._rows;
      newRow.setEditMode(this._editMode);
      if (arguments.length && position !== -1) {
        var end = rows.splice(position);
        rows.push(newRow);
        rows.push.apply(rows, end);
        newRow.getEl().insertBefore(end[0].getEl());
      } else {
        rows.push(newRow);
      }
      return newRow;
    }, setEditMode:function(editMode) {
      var previousModeIsEditMode = this._editMode;
      this._editMode = editMode;
      var rows = this._rows, config = this.config;
      if (editMode) {
        this.checkAndFixEmptyRows();
      }
      for (var i = rows.length - 1;i >= 0;i--) {
        var row = rows[i];
        row.setEditMode(editMode);
        if (!editMode) {
          if (row.getUnAllocatedSpace() === 100) {
            row.destroy();
          }
        }
      }
      this.fireEvent("changeEditMode", editMode);
      if (!config.adminMode && (previousModeIsEditMode && config.allowEditByUsers)) {
        this.save();
      }
      if (editMode) {
        this._roleSwitcher.show();
      } else {
        this._roleSwitcher.hide();
      }
    }, getAvailableBlocks:function() {
      return this.config.blocks.all;
    }, getConfig:function() {
      var rows = this._rows, y = 0, result = [];
      for (var i = 0;i < rows.length;i++) {
        var items = rows[i].getItems();
        if (!items.length) {
          continue;
        }
        for (var x = 0;x < items.length;x++) {
          var item = items[x];
          result.push({x:x, y:y, block:item.getBlockCode(), width:item.getAllocatedSpace(), param_id:item.getBlockParamId(), style_id:item.getStyleId()});
        }
        y++;
      }
      return result;
    }, save:function() {
      var config = this.config, saveUrl = hm.core.Object.clone(config.saveUrl);
      if (config.adminMode) {
        saveUrl.role = config.role;
      }
      jQuery.ajax({url:hm.core.Url(saveUrl), method:"post", data:{widgets:JSON.stringify(this.getConfig())}}).done(function(data) {
        location.href = location.href;
      });
    }, getRole:function() {
      return this.config.role;
    }, registerWidget:function(widget) {
      this._widgets.push(widget);
    }, unRegisterWidget:function(widget) {
      var widgets = this._widgets, index = hm.core.Array.indexOf(widgets, widget);
      if (index === -1) {
        return;
      }
      widgets.splice(index, 1);
    }, getAllWidgets:function() {
      return this._widgets;
    }, checkAndFixEmptyRows:function() {
      var rows = this._rows, prev = null, next = null;
      for (var i = rows.length - 1;i >= 1;i--) {
        if (!rows[i].getAllocatedSpace() && !rows[i - 1].getAllocatedSpace()) {
          rows[i].destroy();
        }
      }
      for (var i = rows.length - 1;i >= 1;i--) {
        if (rows[i].getAllocatedSpace() && rows[i - 1].getAllocatedSpace()) {
          this.createNewEmptyRow(i);
        }
      }
      if (rows.length) {
        if (rows[rows.length - 1].getAllocatedSpace()) {
          this.createNewEmptyRow();
        }
        if (rows[0].getAllocatedSpace()) {
          this.createNewEmptyRow(0);
        }
      } else {
        this.createNewEmptyRow();
      }
      for (var i = rows.length - 1;i >= 0;i--) {
        rows[i].markAsFirstOrLast(i === rows.length - 1 || i === 0);
      }
    }, _onRowDestroy:function(e, row) {
      var rows = this._rows;
      for (var i = 0, ln = rows.length;i < ln;i++) {
        if (rows[i] === row) {
          rows.splice(i, 1);
          return;
        }
      }
    }, _onWidgetAdded:function(e, widget, row) {
      this.checkAndFixEmptyRows();
    }, _onEditButtonClick:function() {
      this.setEditMode(true);
    }, _onSaveButtonClick:function() {
      var config = this.config;
      if (config.adminMode) {
        this.save();
      } else {
        this.setEditMode(!this._editMode);
      }
    }, CLASS_SORTING:"hm-widgets_sorting", _onBeginSorting:function(e, srcRow, widget) {
      this._$el.addClass(this.CLASS_SORTING);
      var rows = this._rows, ln = rows.length, widgetWidth = widget.getAllocatedSpace(), allowDropToNextAndPrev = srcRow.getUnAllocatedSpace() + widgetWidth < 100;
      var targets = [];
      for (var i = 0;i < ln;i++) {
        var target = rows[i], targetIsEmpty = target.isEmpty();
        if (srcRow === target) {
          continue;
        }
        if (rows[i + 1] === srcRow && (targetIsEmpty && !allowDropToNextAndPrev)) {
          continue;
        }
        if (rows[i - 1] === srcRow && (targetIsEmpty && !allowDropToNextAndPrev)) {
          continue;
        }
        if (target.getUnAllocatedSpace() < widgetWidth) {
          continue;
        }
        targets.push(target);
      }
      srcRow.refreshSortableList(targets);
    }, _onEndSorting:function(e, row) {
      this._$el.removeClass(this.CLASS_SORTING);
      this.checkAndFixEmptyRows();
    }, _onSuccessSorting:function(e, row) {
      var rows = this._rows;
      for (var i = 0, ln = rows.length;i < ln;i++) {
        var checkRow = rows[i];
        checkRow.updateItemsArray();
        checkRow.checkCreateButtonVisibility();
        checkRow.checkCreateButtonPosition();
      }
    }, _onRowEmpty:function(e, row) {
      this.checkAndFixEmptyRows();
    }});
    self = hm.module.mainPageWidgets.MainPageWidgets;
  })();
  (function() {
    var self;
    HM.define("hm.module.mainPageWidgets.Row", {extend:"hm.core.ui.Component", config:{maxWidgetHeight:0, minWidgetWidthPercent:30, editor:null}, _checkWidgetListeners:function(widget) {
      var currentRow = widget.getRow();
      if (currentRow === this) {
        return;
      }
      var listeners = {destroy:this._onItemDestroy, needResize:this._onItemWantResize, needReCalcRowHeight:this._onItemSizeChanged};
      if (currentRow) {
        for (var eventName in listeners) {
          if (!listeners.hasOwnProperty(eventName)) {
            continue;
          }
          widget.un(eventName, listeners[eventName], currentRow);
        }
      }
      for (var eventName in listeners) {
        if (!listeners.hasOwnProperty(eventName)) {
          continue;
        }
        widget.on(eventName, listeners[eventName], this);
      }
      widget.setRow(this);
    }, _checkWidgetsListeners:function() {
      var items = this._items;
      for (var i = 0, ln = items.length;i < ln;i++) {
        this._checkWidgetListeners(items[i]);
      }
    }, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._items = [];
      var $widgets = this._$el.find(".hm-widgets-widget"), items = this._items, editor = this.config.editor;
      for (var i = 0, ln = $widgets.length;i < ln;i++) {
        items.push(HM.create("hm.module.mainPageWidgets.widget.Widget", {el:$widgets[i], editor:editor}));
      }
      if (this.getAllocatedSpace() > 100) {
        var itemsLength = items.length, fixWidth = Math.ceil(100 / itemsLength);
        for (var i = 0;i < itemsLength;i++) {
          items[i].setAllocatedSpace(fixWidth);
        }
      }
      this._checkWidgetsListeners();
      var me = this, $itemsContainer = this._getItemsContainer();
      this._$elItemsContainer = $itemsContainer;
      var connectWith = $itemsContainer === this._$el ? ".hm-widgets-row" : ".hm-widgets-row-content";
      $itemsContainer.sortable({placeholder:"hm-widgets-widget hm-widgets-widget-placeholder", forcePlaceholderSize:true, items:".hm-widgets-widget:not(.hm-widgets-row-createWidgetButton)", connectWith:connectWith, scroll:true, start:function(e, ui) {
        var placeHolder = ui.placeholder, item = ui.item, widget = hm.core.ui.Component.getComponent(item);
        placeHolder.innerWidth(item.width() - 1);
        placeHolder.height(80);
        item.css("opacity", 0.5);
        me.fireEvent("beginSorting", me, widget);
      }, stop:function(e, ui) {
        var item = ui.item, widget = hm.core.ui.Component.getComponent(item);
        item.css("opacity", 1);
        me.fireEvent("endSorting", me, widget);
      }, update:function(e, ui) {
        var item = ui.item, widget = hm.core.ui.Component.getComponent(item);
        me.fireEvent("successSorting", me, widget);
      }, over:function(e, ui) {
      }, out:function(e, ui) {
      }});
      this._checkReCalc = this._checkReCalc.bind(this);
      this._checkReCalcTimeout = setTimeout(this._checkReCalc, 250);
    }, _getItemsContainer:function() {
      var $content = this._$el.find(".hm-widgets-row-content");
      if ($content.length) {
        return $content;
      }
      return this._$el;
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
    }, __destruct:function() {
      var __destruct = arguments.callee;
      clearTimeout(this._checkReCalcTimeout);
      this.callParent(__destruct, arguments);
    }, _setRowsHeight:function(height) {
      this._rowHeight = height;
      var items = this._items;
      for (var i = 0, ln = items.length;i < ln;i++) {
        items[i].setHeight(height);
      }
      if (this.createButtonIsVisible()) {
        this._editButton.setHeight(height);
      }
    }, getRowHeight:function() {
      return this._rowHeight;
    }, updateItemsArray:function() {
      var items = this.config.editor.getAllWidgets(), $widgets = this._$el.find(".hm-widgets-widget:not(.hm-widgets-row-createWidgetButton)"), newItems = [];
      for (var i = 0, ln = $widgets.length;i < ln;i++) {
        for (var j = 0, ln2 = items.length;j < ln2;j++) {
          if (items[j].getEl()[0] === $widgets[i]) {
            newItems.push(items[j]);
            break;
          }
        }
      }
      this._items = newItems;
      if (this.isEmpty()) {
        this._$el.addClass(this.CLASS_EMPTY);
      } else {
        this._$el.removeClass(this.CLASS_EMPTY);
      }
      this._checkWidgetsListeners();
    }, checkWidgetHeight:function() {
      var items = this._items, maxRowHeight = 0, maxWidgetHeight = this.config.maxWidgetHeight;
      this._setRowsHeight("auto");
      for (var j = 0, wln = items.length;j < wln;j++) {
        var widget = items[j], widgetHeight = widget.getHeight();
        if (widgetHeight > maxRowHeight) {
          maxRowHeight = widgetHeight;
        }
      }
      if (this.createButtonIsVisible()) {
        var buttonHeight = this._editButton.getHeight();
        if (buttonHeight > maxRowHeight) {
          maxRowHeight = buttonHeight;
        }
      }
      if (maxWidgetHeight && maxRowHeight > maxWidgetHeight) {
        maxRowHeight = maxWidgetHeight;
      }
      if (maxRowHeight === 0) {
        maxRowHeight = 80;
      }
      this._setRowsHeight(maxRowHeight);
    }, CLASS_EMPTY:"hm-widgets-row_empty", CLASS_FIRST_OR_LAST:"hm-widgets-row_firstOrLast", isEmpty:function() {
      return!this._items.length;
    }, setEditMode:function(editMode) {
      if (this._editMode == editMode) {
        return;
      }
      this._editMode = editMode;
      var items = this._items;
      if (!this.isEmpty()) {
        this._$el.removeClass(this.CLASS_EMPTY);
      }
      if (editMode) {
        if (!this._editButton) {
          this._editButton = HM.create("hm.module.mainPageWidgets.button.CreateWidgetButton", {renderTo:this._$elItemsContainer, row:this, editor:this.config.editor});
          this._editButton.hide();
        }
        if (this.createButtonIsVisible()) {
          this._editButton.setAllocatedSpace(this.getUnAllocatedSpace());
          this._editButton.show();
        }
        this._$elItemsContainer.sortable("option", "disabled", false);
        if (this.isEmpty()) {
          this._$el.addClass(this.CLASS_EMPTY);
        }
      } else {
        if (this._editButton) {
          this._editButton.hide();
        }
        this._$elItemsContainer.sortable("option", "disabled", true);
      }
      for (var i = 0, ln = items.length;i < ln;i++) {
        items[i].setEditMode(editMode);
      }
      this.checkWidgetHeight();
    }, refreshSortableList:function(targets) {
      var $connectWith = new jQuery;
      for (var i = 0, ln = targets.length;i < ln;i++) {
        $connectWith.push(targets[i].getItemsContainer());
      }
      this._$elItemsContainer.sortable("option", "connectWith", $connectWith);
      this._$elItemsContainer.sortable("refresh");
    }, createButtonIsVisible:function() {
      return this._editMode && this.getUnAllocatedSpace() >= this.config.minWidgetWidthPercent;
    }, getUnAllocatedSpace:function() {
      return 100 - this.getAllocatedSpace();
    }, getAllocatedSpace:function() {
      var items = this._items, result = 0;
      for (var i = 0, ln = items.length;i < ln;i++) {
        result += items[i].getAllocatedSpace();
      }
      return result;
    }, getItemsContainer:function() {
      return this._$elItemsContainer;
    }, createWidget:function(widgetCode) {
      console.log(widgetCode);
      var url = hm.core.Url({module:"infoblock", controller:"index", action:"view", role:this.config.editor.getRole(), mode:"view", name:widgetCode});
      var me = this;
      jQuery.ajax({url:url}).done(function(data) {
        var $data = $(data), $container = $("<div>"), docLinks;
        docLinks = _.reduce(_.toArray(document.getElementsByTagName("link")), function(memo, link) {
          var href = link.getAttribute("href");
          if (href) {
            memo[href] = true;
          }
          return memo;
        }, {});
        var links = [], srcScripts = [], evalScripts = [], linksCount = 0;
        function onLinkLoad() {
          linksCount--;
          if (linksCount === 0) {
            for (var j = 0;j < srcScripts.length;j++) {
              jQuery.ajax({type:"GET", global:false, url:srcScripts[j].src, async:false, dataType:"script"});
            }
            for (var j = 0;j < evalScripts.length;j++) {
              var script = evalScripts[j], js = script.text || (script.textContent || (script.innerHTML || ""));
              $.globalEval(js.replace(/^\s*<!(?:\[CDATA\[|\-\-)/, "/*$0*/"));
            }
            me.checkWidgetHeight();
          }
        }
        for (var i = $data.length - 1;i >= 0;i--) {
          var node = $data[i];
          if (node.nodeName === "LINK") {
            var href = node.getAttribute("href");
            if (href && docLinks[href] !== true) {
              links.push(node);
              $(node).on("load", onLinkLoad);
            }
            $data.splice(i, 1);
          } else {
            if (node.nodeName === "SCRIPT") {
              var href = node.getAttribute("src");
              if (href) {
                srcScripts.push(node);
              } else {
                evalScripts.push(node);
              }
              $data.splice(i, 1);
            }
          }
        }
        linksCount = links.length;
        var $head = HM.$head();
        $head.append.apply($head, links);
        $head.append.apply($head, srcScripts);
        var widgetItem = HM.create("hm.module.mainPageWidgets.widget.Widget", {tplByClass:true, widgetContent:$data, code:widgetCode, editor:me.config.editor});
        me._checkWidgetListeners(widgetItem);
        widgetItem.setAllocatedSpace(me.getUnAllocatedSpace());
        widgetItem.setEditMode(me._editMode);
        me._items.push(widgetItem);
        if (!me.createButtonIsVisible()) {
          me._editButton.hide();
        }
        widgetItem.getEl().insertBefore(me._editButton.getEl());
        widgetItem.initWidgetContent();
        me.checkWidgetHeight();
        me.fireEvent("widgetAdded", widgetItem, this);
      });
    }, markAsFirstOrLast:function(value) {
      if (value) {
        this._$el.addClass(this.CLASS_FIRST_OR_LAST);
      } else {
        this._$el.removeClass(this.CLASS_FIRST_OR_LAST);
      }
    }, getItems:function() {
      return this._items;
    }, checkCreateButtonPosition:function() {
      var $elButton = this._editButton.getEl();
      if ($elButton.next(".hm-widgets-widget").length) {
        this._$elItemsContainer.append($elButton);
      }
    }, checkCreateButtonVisibility:function() {
      if (this.createButtonIsVisible()) {
        this._editButton.setAllocatedSpace(this.getUnAllocatedSpace());
        this._editButton.show();
      } else {
        this._editButton.hide();
      }
      this.checkWidgetHeight();
    }, _onItemDestroy:function(e, item) {
      var items = this._items;
      for (var i = 0, ln = items.length;i < ln;i++) {
        if (items[i] === item) {
          items.splice(i, 1);
          this.checkCreateButtonVisibility();
          if (!items.length) {
            this.fireEvent("isEmpty", this);
          }
          return;
        }
      }
    }, _onItemWantResize:function(e, item, width) {
      var minWidgetWidthPercent = this.config.minWidgetWidthPercent;
      if (width < minWidgetWidthPercent) {
        width = minWidgetWidthPercent;
      }
      var space = this.getUnAllocatedSpace() + item.getAllocatedSpace();
      console.log(space, width, item.getAllocatedSpace());
      if (space - width < 0) {
        width = space;
      }
      item.setAllocatedSpace(width);
      this.checkCreateButtonVisibility();
    }, _checkReCalc:function() {
      if (this._needReCalcHeight) {
        this.checkWidgetHeight();
      }
      this._needReCalcHeight = false;
      this._checkReCalcTimeout = setTimeout(this._checkReCalc, 250);
    }, _onItemSizeChanged:function() {
      this._needReCalcHeight = true;
    }});
    self = hm.module.mainPageWidgets.Row;
  })();
  (function() {
    var self;
    HM.define("hm.module.mainPageWidgets.toolbar.RoleToolbar", {extend:"hm.core.ui.Component", config:{tplByClass:true, roles:null, role:"admin", adminMode:false}, _init:function() {
      var _init = arguments.callee;
      var config = this.config, roles = config.roles, rolesNew = [];
      for (var role in roles) {
        if (!roles.hasOwnProperty(role)) {
          continue;
        }
        rolesNew.push({role:role, title:roles[role], selected:role === config.role});
      }
      this.roles = rolesNew;
      this.callParent(_init, arguments);
      this._$elUserSelect = this._$el.find("select");
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this.elOn("change", "select", this._onRoleChange);
      this.elOn("click", ".hm-widgets-roleToolbar-button_confirm", this._onClickSaveButton);
      this.elOn("click", ".hm-widgets-roleToolbar-button_reset", this._onClickResetButton);
    }, _onRoleChange:function() {
      location.href = hm.core.Url({module:"interface", controller:"edit", action:"index", role:this._$elUserSelect.val()});
    }, _onClickSaveButton:function(e) {
      this.fireEvent("saveButtonClick");
    }, _onClickResetButton:function() {
      elsHelpers.confirm(HM._("Уверены, что хотите сбросить настройки виджетов для текущей роли?")).done(function() {
        jQuery.ajax({url:hm.core.Url({module:"interface", controller:"edit", action:"clear-me"}), type:"post"}).done(function(data) {
          location.href = location.href;
        });
      });
    }});
    self = hm.module.mainPageWidgets.toolbar.RoleToolbar;
  })();
  (function() {
    var self;
    HM.define("hm.module.mainPageWidgets.toolbar.Toolbar", {extend:"hm.core.ui.Component", config:{tplByClass:true, editor:null}, _init:function() {
      var _init = arguments.callee;
      this._editMode = false;
      this.callParent(_init, arguments);
      this._$elEditButton = this._$el.find(".hm-widgets-toolbar-editButton");
      this._$elResetButton = this._$el.find(".hm-widgets-toolbar-resetButton");
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this.elOn("click", ".hm-widgets-toolbar-editButton", this._onClickEditButton);
      this.config.editor.on("changeEditMode", this._onChangeEditMode, this);
    }, _onClickEditButton:function(e) {
      this.fireEvent("editButtonClick");
    }, _onChangeEditMode:function(e, isEditMode) {
      this._editMode = isEditMode;
      var $el = this._$el, $editButton = this._$elEditButton;
      if (this._editMode) {
        $editButton.hide();
      } else {
        $editButton.show();
      }
    }});
    self = hm.module.mainPageWidgets.toolbar.Toolbar;
  })();
  (function() {
    var self;
    HM.define("hm.module.mainPageWidgets.widget.BaseWidget", {extend:"hm.core.ui.Component", config:{}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._$elContentContainer = this._$el.find("> .hm-widgets-widget-content");
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
    }, setAllocatedSpace:function(space) {
      this._$el.css({width:space + "%"});
    }, getHeight:function() {
      return this._$elContentContainer.height();
    }, setHeight:function(height) {
      return this._$elContentContainer.height(height);
    }, getWidth:function() {
      return this._$elContentContainer.width();
    }, setWidth:function(width) {
      return this._$elContentContainer.width(width);
    }});
    self = hm.module.mainPageWidgets.widget.BaseWidget;
  })();
  (function() {
    var self;
    HM.define("hm.module.mainPageWidgets.button.CreateWidgetButton", {extend:"hm.module.mainPageWidgets.widget.BaseWidget", config:{tplByClass:true, row:null, editor:null}, CLASS_VISIBILITY:"hm-widgets-widget-content_nowSelection", _init:function() {
      var _init = arguments.callee;
      this._initSelectData();
      this.callParent(_init, arguments);
    }, _initSelectData:function() {
      var all = this.config.editor.getAvailableBlocks(), groups = [];
      for (var i = 0, ln = all.length;i < ln;i = i + 2) {
        var widgets = [], nextAllItem = all[i + 1];
        for (var j = 0, ln2 = nextAllItem.length;j < ln2;j++) {
          widgets.push({id:nextAllItem[j].id, title:JSON.stringify(nextAllItem[j])});
        }
        groups.push({id:all[i].id, title:all[i].title, widgets:widgets});
      }
      this.groups = groups;
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this.elOn("click", ".hm-widgets-row-createWidgetButton-widgetsSelect-submit", this._onClickAddWidget);
    }, _nowIsSelectionOfWidget:function(value) {
      if (value) {
        this._$elContentContainer.addClass(this.CLASS_VISIBILITY);
      } else {
        this._$elContentContainer.removeClass(this.CLASS_VISIBILITY);
      }
    }, initSelect:function() {
      var me = this;
      this._$elUserSelect = this._$el.find(".hm-widgets-row-createWidgetButton-widgetsSelect select");
      this._$elUserSelect.selectmenu({icons:null, menuWidth:400, maxHeight:300, format:function(text) {
        text = JSON.parse(text);
        return text.description ? "<h3>" + text.title + "</h3><p>" + text.description + "</p>" : "<h3>" + text.title + "</h3>";
      }});
      this._$elUserSelect.on("selectmenuopen", function() {
        me._nowIsSelectionOfWidget(true);
      });
      this.initSelect = HM.emptyFn;
    }, show:function() {
      var show = arguments.callee;
      this.callParent(show, arguments);
      this.initSelect();
    }, _onClickAddWidget:function() {
      var widget = this._$elUserSelect.val();
      if (!widget) {
        return;
      }
      this.config.row.createWidget(widget);
      this._nowIsSelectionOfWidget(false);
    }});
    self = hm.module.mainPageWidgets.button.CreateWidgetButton;
  })();
  (function() {
    var self;
    HM.define("hm.module.mainPageWidgets.widget.Widget", {extend:"hm.module.mainPageWidgets.widget.BaseWidget", config:{widgetContent:null, editor:null, row:null, code:""}, getRow:function() {
      return this.config.row;
    }, setRow:function(row) {
      this.config.row = row;
    }, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._config = this._$el.data("config");
      if (!this._config) {
        var block = this.config.code, blockParts = block.split("_");
        this._config = {width:0, block:blockParts[0]};
        if (blockParts.length === 2) {
          this._config.attribs = {param:blockParts[1]};
        }
      }
      this._config.width -= 0;
      this._$elContent = this._$elContentContainer.find("> *");
      this._checkHeight = this._checkHeight.bind(this);
      this._checkHeightTimeout = setTimeout(this._checkHeight, 0);
      this.config.editor.registerWidget(this);
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this.elOn("click", ".hm-widgets-widget-button-delete", this._onClickDelete);
      this.elOn("mousedown", ".hm-widgets-widget-splitter", this._onSplitterMouseDown);
    }, __destruct:function() {
      var __destruct = arguments.callee;
      clearTimeout(this._checkHeightTimeout);
      this.config.editor.unRegisterWidget(this);
      this.callParent(__destruct, arguments);
    }, initWidgetContent:function() {
      var $widget = this.config.widgetContent;
      if ($widget) {
        this._$elContentContainer.append($widget);
      }
    }, _checkHeight:function() {
      var currentHeight = this._$elContent.height();
      if (this._previousHeight !== currentHeight) {
        this.fireEvent("needReCalcRowHeight");
      }
      this._previousHeight = currentHeight;
      this._checkHeightTimeout = setTimeout(this._checkHeight, 250);
    }, getAllocatedSpace:function() {
      return this._config.width;
    }, setAllocatedSpace:function(space) {
      var setAllocatedSpace = arguments.callee;
      this.callParent(setAllocatedSpace, arguments);
      this._config.width = space;
      this._$el.find(".hm-widgets-widget-resize input").val(space);
    }, getBlockCode:function() {
      return this._config.block;
    }, getStyleId:function() {
      return this._config.style_id;
    }, getBlockParamId:function() {
      var config = this._config;
      if (!config.attribs) {
        return "";
      }
      if (!config.attribs.param) {
        return "";
      }
      return config.attribs.param;
    }, setEditMode:function(editMode) {
      if (editMode == this._editMode) {
        return;
      }
      this._editMode = editMode;
      if (editMode) {
        if (!this._$elOverlay) {
          this._$elOverlay = this._renderTemplate("hm/module/mainPageWidgets/widget/Widget.overlay");
        }
        this.showSettings();
        this._$el.append(this._$elOverlay);
        this.setAllocatedSpace(this._config.width);
      } else {
        if (this._$elOverlay) {
          this._$elOverlay.detach();
        }
        this.hideSettings();
      }
    }, showSettings:function() {
      this._initSettings();
    }, hideSettings:function() {
      if (!this._settingsInited) {
        return;
      }
      this._$elSettings.detach();
    }, _initSettings:function() {
      if (this._settingsInited) {
        this._$el.append(this._$elSettings);
        return;
      }
      this._$elSettings = this._renderTemplate("hm/module/mainPageWidgets/widget/Widget.settings");
      var me = this, $select = this._$elSettings.find('select[name="style_id"]');
      this._$elColor = $select;
      $select.val(me._config.style_id);
      $select.on("change", function() {
        var oldStyleId = me._config.style_id, newStyleId = $(this).val();
        me.getEl().removeClass("hm-widgets-widget-style-" + oldStyleId);
        me._config.style_id = newStyleId;
        me.getEl().addClass("hm-widgets-widget-style-" + newStyleId);
      });
      this._settingsInited = true;
      this._$el.append(this._$elSettings);
      this._$elColor.selectmenu({icons:null, width:100, maxHeight:300});
      this._$elColor.on("selectmenuopen", function() {
        me._nowIsSelectionOfColor(true);
      });
      this._$elColor.on("selectmenuclose", function() {
        me._nowIsSelectionOfColor(false);
      });
    }, CLASS_COLOR_SELECTION:"hm-widgets-widget_colorSelection", _nowIsSelectionOfColor:function(value) {
      if (value) {
        this._$el.addClass(this.CLASS_COLOR_SELECTION);
      } else {
        this._$el.removeClass(this.CLASS_COLOR_SELECTION);
      }
    }, _onClickDelete:function() {
      var me = this;
      elsHelpers.confirm(HM._("Уверены, что хотите удалить виджет?")).done(function() {
        me.destroy();
      });
    }, _onSplitterMouseDown:function(e) {
      var startX = e.clientX, editor = this.config.editor, fullWidth = editor.getWidth(), currentWidgetWidth = this.getWidth(), $doc = HM.$document(), me = this;
      e.preventDefault();
      e.stopPropagation();
      editor.getEl().addClass("hm-widgets-resizing");
      function getCurrentAllocatedWidth(currentX) {
        return Math.round((currentWidgetWidth - startX + currentX) * 100 / fullWidth);
      }
      function onMove(e) {
        var aWidth = getCurrentAllocatedWidth(e.clientX);
        me.fireEvent("needResize", me, aWidth);
        e.preventDefault();
      }
      function onUp(e) {
        onMove(e);
        unBind();
        editor.getEl().removeClass("hm-widgets-resizing");
      }
      $doc.on("mousemove", onMove);
      $doc.on("mouseup", onUp);
      function unBind() {
        $doc.off("mousemove", onMove);
        $doc.off("mouseup", onUp);
      }
    }});
    self = hm.module.mainPageWidgets.widget.Widget;
  })();
  (function() {
    var self;
    HM.define("hm.module.base.ui.Accordion", {singleton:true, config:{}, _getEar:function() {
      var $ear = $(".accordion-expander.container-ear");
      if ($ear.length) {
        this._getEar = function() {
          return $ear;
        };
      }
      return $ear;
    }, hide:function() {
      var me = this;
      elsHelpers.store.init().then(function() {
        var state = this.get("accordion-column-state"), meStore = this;
        if (!state || state === "expanded") {
          setTimeout(function() {
            var $elEar = me._getEar();
            if ($elEar.length) {
              $elEar.trigger("click", ["immediate"]);
            } else {
              meStore.set("accordion-column-state", "collapsed");
            }
          }, 0);
        }
      });
    }, show:function() {
      var me = this;
      elsHelpers.store.init().then(function() {
        var state = this.get("accordion-column-state"), meStore = this;
        if (!state || state === "collapsed") {
          setTimeout(function() {
            var $elEar = me._getEar();
            if ($elEar.length) {
              $elEar.trigger("click", ["immediate"]);
            } else {
              meStore.set("accordion-column-state", "expanded");
            }
          }, 0);
        }
      });
    }, initFirstState:function() {
      var storeReady = false, accordionReady = false, store = null, me = this;
      function check() {
        if (!storeReady || !accordionReady) {
          return;
        }
        if (store.get("accordion-column-state") == "collapsed") {
          me._getEar().trigger("click", ["immediate"]);
        }
      }
      elsHelpers.store.init().then(function() {
        storeReady = true;
        store = this;
        check();
      });
      HM.$document().one("accordioncreate", function(event) {
        accordionReady = true;
        check();
      });
    }});
    self = hm.module.base.ui.Accordion;
  })();
  (function() {
    var self;
    HM.define("hm.module.base.ui.Document", {statics:{setAsPrintable:function(cfg) {
      var ns = HM.create("hm.core.ui.ClassNameSpace", {ns:"hm-document_printable"}), defaultCfg = {noUserBlock:true, noLogo:true, noMenu:true, noBreadCrumbs:true, noTitle:true, noFooter:true}, classes = {noUserBlock:ns("", "noUserBlock"), noLogo:ns("", "noLogo"), noMenu:ns("", "noMenu"), noBreadCrumbs:ns("", "noBreadCrumbs"), noTitle:ns("", "noTitle"), noFooter:ns("", "noFooter")}, $html = HM.$html();
      cfg = hm.core.Object.extend(defaultCfg, cfg || {});
      for (var i in classes) {
        if (!classes.hasOwnProperty(i) || !cfg[i]) {
          continue;
        }
        $html.addClass(classes[i]);
      }
      $html.addClass(ns());
    }}});
    self = hm.module.base.ui.Document;
  })();
  (function() {
    var self;
    HM.define("hm.module.score.ui.Score", {extend:"", config:{}, statics:{init:function() {
      var $doc = HM.$document(), scaleValues = {BINARY:{ON:1, NA:-1}, TERNARY:{ON:1, OFF:0, NA:-1}};
      $doc.on("click", ".form-score-ternary .els-icon", function(event) {
        var $this = $(this), $parent = $this.closest(".hm-score-ternary-icon");
        if ($parent.hasClass("hm-score-ternary-icon-readonly")) {
          return;
        }
        var $others = $this.parent().find(".els-icon.cross, .els-icon.check").not(this), $input = $this.closest(".form-score-ternary").find("input:first"), values = scaleValues.TERNARY;
        if ($this.hasClass("cross")) {
          $this.toggleClass("cross-checked");
        } else {
          if ($this.hasClass("check")) {
            $this.toggleClass("check-checked");
          }
        }
        if ($this.hasClass("cross-checked")) {
          $others.removeClass("check-checked");
          $input.val(values.OFF);
        } else {
          if ($(this).hasClass("check-checked")) {
            $others.removeClass("cross-checked");
            $input.val(values.ON);
          } else {
            $input.val(values.NA);
          }
        }
      });
      $(function() {
        $(".hm_score_numeric").bind("click keyup blur", function(event) {
          var $this = $(this), targetId = $this.data("target"), value = $this.val();
          $("#" + targetId).val(value !== "" ? value : -1);
        });
      });
      $doc.on("click", ".hm-score-binary-icon", function(e) {
        var $this = $(this);
        if ($this.hasClass("hm-score-binary-icon-readonly")) {
          return;
        }
        var $input = $this.parent().find("input:first"), BINARY = scaleValues.BINARY;
        $this.toggleClass("check-checked");
        if ($input.val() == BINARY.NA) {
          $input.val(BINARY.ON);
        } else {
          $input.val(BINARY.NA);
        }
      });
    }}});
    self = hm.module.score.ui.Score;
  })();
  (function() {
    var self;
    HM.define("hm.module.base.ui.ajax.AjaxSpinner", {extend:"hm.core.ui.Component", config:{tpl:"hm/module/base/ui/ajax/AjaxSpinner", renderTo:"body", toggleDuration:400, toggleEffect:"fade"}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._ajaxCounter = 0;
      this._visible = false;
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      var $doc = $(document);
      $doc.on("ajaxStart", this._onAjaxStart.bind(this));
      $doc.on("ajaxStop", this._onAjaxEnd.bind(this));
      this._onTogglingComplete = this._onTogglingComplete.bind(this);
    }, _show:function() {
      this._toggleRunned = true;
      this._visible = true;
      this.getEl().show({duration:this.config.toggleDuration, effect:this.config.toggleEffect, complete:this._onTogglingComplete});
    }, _hide:function() {
      this._toggleRunned = true;
      this._visible = false;
      this.getEl().hide({duration:this.config.toggleDuration, effect:this.config.toggleEffect, complete:this._onTogglingComplete});
    }, _checkState:function() {
      if (this._toggleRunned || this._disabled) {
        return;
      }
      if (this._ajaxCounter > 0 && !this._visible) {
        this._show();
      }
      if (this._ajaxCounter === 0 && this._visible) {
        this._hide();
      }
    }, disable:function() {
      this._disabled = true;
      this._visible = false;
      this.getEl().hide();
    }, _onTogglingComplete:function() {
      this._toggleRunned = false;
      this._checkState();
    }, _onAjaxStart:function() {
      this._ajaxCounter++;
      this._checkState();
    }, _onAjaxEnd:function() {
      this._ajaxCounter--;
      this._checkState();
    }});
    HM.singleton(hm.module.base.ui.ajax.AjaxSpinner);
    self = hm.module.base.ui.ajax.AjaxSpinner;
  })();
  (function() {
    var self;
    HM.define("hm.module.base.ui.like.Like", {extend:"hm.core.ui.Component", config:{elTag:"span", likeCount:0, dislikeCount:0, vote:0, itemType:0, itemId:0, showDislikeButton:false, tpl:"hm/module/base/ui/like/Like"}, _init:function() {
      var _init = arguments.callee;
      var config = this.config;
      this._likeCount = config.likeCount;
      this._dislikeCount = config.dislikeCount;
      this._vote = config.vote;
      this.callParent(_init, arguments);
      this.setVote(config.vote);
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this.elOn("click", ".hm-like-button-like", this.onClick_like, this);
      this.elOn("click", ".hm-like-button-dislike", this.onClick_dislike, this);
    }, setLikeCount:function(value) {
      this.getEl().find(".hm-like-button-like > .hm-like-button-like-counter").text(value);
      this._likeCount = value;
    }, setDislikeCount:function(value) {
      this.getEl().find(".hm-like-button-dislike > .hm-like-button-like-counter").text(value);
      this._dislikeCount = value;
    }, TYPE_LIKE:"LIKE", TYPE_DISLIKE:"DISLIKE", sendLike:function(type) {
      this._locked = true;
      var config = this.config;
      var params = {like_type:type, item_type:config.itemType, item_id:config.itemId};
      $.ajax({type:"post", url:"/like/index/like", data:params, success:this.onSendLikeSuccess.bind(this), error:this.onSendLikeFailure.bind(this)});
    }, setVote:function(vote) {
      this._vote = vote;
      var $el = this.getEl();
      $el.removeClass("hm-like-liked");
      $el.removeClass("hm-like-disliked");
      switch(vote) {
        case -1:
          $el.addClass("hm-like-disliked");
          break;
        case 1:
          $el.addClass("hm-like-liked");
          break;
      }
    }, onClick_like:function() {
      if (this._locked) {
        return;
      }
      if (this._vote == -1) {
        this.setDislikeCount(this._dislikeCount - 1);
      }
      if (this._vote == 1) {
        this.setVote(0);
        this.setLikeCount(this._likeCount - 1);
      } else {
        this.setVote(1);
        this.setLikeCount(this._likeCount + 1);
      }
      this.sendLike(this.TYPE_LIKE);
    }, onClick_dislike:function() {
      if (this._locked) {
        return;
      }
      if (this._vote == 1) {
        this.setLikeCount(this._likeCount - 1);
      }
      if (this._vote == -1) {
        this.setVote(0);
        this.setDislikeCount(this._dislikeCount - 1);
      } else {
        this.setVote(-1);
        this.setDislikeCount(this._dislikeCount + 1);
      }
      this.sendLike(this.TYPE_DISLIKE);
    }, onSendLikeSuccess:function(result) {
      result = $.parseJSON(result);
      if (result.message === "OK") {
        result = result.result;
        this.setLikeCount(result.count_like);
        this.setDislikeCount(result.count_dislike);
      }
      this._locked = false;
    }, onSendLikeFailure:function() {
      alert(result.message);
      this._locked = false;
    }});
    self = hm.module.base.ui.like.Like;
  })();
  (function() {
    var self;
    var counter = 0;
    HM.define("hm.module.course.ui.list.CourseDescriptionTabs", {extend:"hm.core.ui.Component", config:{tpl:"hm/module/course/ui/list/CourseDescriptionTabs", lessons:null, course_id:0, hideTabs:[]}, _init:function() {
      var _init = arguments.callee;
      this.tab_id = "hm-subject-list-item-description-" + ++counter;
      this._stableJqueryUi = hm.core.jQuery.uiVersionIsGreaterThan(1, 11);
      this.callParent(_init, arguments);
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
    }, _renderTo:function() {
      var _renderTo = arguments.callee;
      this.callParent(_renderTo, arguments);
      var $el = this._$el, tabsCfg = {}, onTabActivate = this._onTabActivate.bind(this);
      if (this._stableJqueryUi) {
        tabsCfg.activate = onTabActivate;
      } else {
        tabsCfg.show = onTabActivate;
      }
      $el.tabs(tabsCfg);
    }, tabDisplay:function(tabname) {
      if (this.config.hideTabs.indexOf(tabname) != -1) {
        return "none";
      }
      return "inline-block";
    }, _loadProgress:function($panel) {
      if (this._progressLoaded) {
        return;
      }
      this._progressLoaded = true;
      var url = hm.core.Url.getInstance().url({module:"course", controller:"mark", action:"get-stat", course_id:this.config.course_id, user_id:HM.getService("User").getUserId()});
      var $el = this.getEl(), me = this, $spinner = this._getSpinner();
      $panel.append($spinner);
      $.ajax({url:url, async:true}).done(function(data) {
        $spinner.remove();
        if (!data.maxValue) {
          var $emptyCont = $('<div class="hm-subject-list-item-description-panel-empty"><div></div></div>');
          $panel.html("");
          $emptyCont.find("div").text(HM._("Прогресса нет"));
          $panel.append($emptyCont);
          return;
        }
        var styles = {};
        styles.best = "width: " + data.maxValueOfStudents * 100 / data.maxValue + "%";
        styles.my = "width: " + data.value * 100 / data.maxValue + "%";
        if (data.threshold === null) {
          styles[3] = "display: none";
        } else {
          styles[3] = "width: " + data.threshold * 100 / data.maxValue + "%";
        }
        $panel.html(me._renderTemplate("hm/module/course/ui/list/CourseDescriptionTabs.progress", {styles:styles}));
      });
    }, _getSpinner:function() {
      return $('<div class="ajax-spinner-local"></div>');
    }, _loadEvents:function($panel) {
      if (this._eventsLoaded) {
        return;
      }
      this._eventsLoaded = true;
      this._$eventsSpinner = this._getSpinner();
      this._eventsStore = HM.create("hm.module.es.data.store.EventServiceCourseStore", {listeners:{scope:this, data_loaded:this._onEventsLoaded}});
      this._eventList = HM.create("hm.module.es.ui.event.list.EventList", {fullMode:true, showHeader:false, store:this._eventsStore, groupsCollapsible:false});
      $panel.append(this._eventList.getEl());
      $panel.append(this._$eventsSpinner);
      this._eventsStore.load({singleSubject:this.config.course_id});
    }, _onTabActivate:function(event, ui) {
      var $panel;
      if (this._stableJqueryUi) {
        $panel = $(ui.newPanel);
      } else {
        $panel = $(ui.panel);
      }
      if ($panel.hasClass("hm-subject-list-item-description-progress")) {
        this._loadProgress($panel);
        return;
      }
      if ($panel.hasClass("hm-subject-list-item-description-events")) {
        this._loadEvents($panel);
        return;
      }
    }, _onEventsLoaded:function() {
      this._$eventsSpinner.remove();
      delete this._$eventsSpinner;
      if (this._eventsStore.getItemsCount()) {
        return;
      }
      var $panel = this.getEl().find(".hm-subject-list-item-description-events"), $emptyCont = $('<div class="hm-subject-list-item-description-panel-empty"><div></div></div>');
      $panel.html("");
      $emptyCont.find("div").text(HM._("Обновлений нет"));
      $panel.append($emptyCont);
    }});
    self = hm.module.course.ui.list.CourseDescriptionTabs;
  })();
  (function() {
    var self;
    HM.define("hm.module.course.ui.marksheet.ScrollBar", {extend:"hm.core.ui.Component", config:{tplByClass:true, scrollSize:100, classNameSpace:"hm-marksheet-scrollbar"}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this._onMouseUp = this._onMouseUp.bind(this);
      this._onMouseMove = this._onMouseMove.bind(this);
      this._$elScroller = this._ns.find("scroller");
      this._$elScroller.css({width:this.config.scrollSize + "%"});
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this._ns.on("mousedown", "scroller", this._onMouseDown);
    }, _onMouseDown:function(e) {
      var $scroller = this._$elScroller, begin = {scroller:{left:$scroller.position().left, width:$scroller.width()}, mouse:{x:e.screenX}};
      HM.$document().on("mouseup", this._onMouseUp);
      HM.$document().on("mousemove", begin, this._onMouseMove);
      e.preventDefault();
    }, _onMouseMove:function(e) {
      var begin = e.data, left = begin.scroller.left + e.screenX - begin.mouse.x, maxLeft = this.getEl().width() - begin.scroller.width - 4;
      if (left < 1) {
        left = 1;
      }
      if (left > maxLeft) {
        left = maxLeft;
      }
      this._$elScroller.css({left:left + "px"});
      this.fireEvent("scroll", left / maxLeft);
      try {
        window.getSelection().removeAllRanges();
      } catch (e) {
        document.selection.empty();
      }
    }, _onMouseUp:function(e) {
      HM.$document().off("mouseup", this._onMouseUp);
      HM.$document().off("mousemove", this._onMouseMove);
    }});
    self = hm.module.course.ui.marksheet.ScrollBar;
  })();
  (function() {
    var self;
    HM.define("hm.module.quest.ui.samplingOfQuestionsEditor.ClusterEditor", {extend:"hm.core.ui.Component", config:{tplByClass:true, formElement:null, title:HM._("Блок"), id:0, questions:null, categories:null, formNamePrefix:"", classNameSpace:"hm-quest-samplingOfQuestionsEditor-cluster"}, _init:function() {
      var _init = arguments.callee;
      this.getFormNamePrefix = this.getFormNamePrefix.bind(this);
      this._errors = [];
      this.callParent(_init, arguments);
      this._initQuestions();
      var ns = this._ns, config = this.config;
      this._$elCount = ns.find("count");
      this._$elQuestionsCount = ns.find("info-count");
      this._$elQuestionsCountDescription = ns.find("info-count-description");
      this.CLASS_COUNT_ERROR = ns.getClass("count", "error");
      this.CLASS_COUNT_MAXIMUM = ns.getClass("count", "maximum");
      this.CLASS_INFO_COUNT_ERROR = ns.getClass("info-count", "error");
      if (config.questions) {
        this.setRandomQuestionsCount(config.questions.length);
      }
    }, _initQuestions:function() {
      var ns = this._ns, $questions = ns.find("question"), questions = {}, i, ln;
      for (i = 0, ln = $questions.length;i < ln;i++) {
        var $question = $questions.eq(i), id = $question.data("id");
        $question.on("change", this._onQuestionChange.bind(this));
        questions[id] = $question;
      }
      this._$elQuestions = $questions;
      this._questions = questions;
      var questionConfigs = this.config.questions, categoryInfo = {};
      for (i = 0, ln = questionConfigs.length;i < ln;i++) {
        var questionConfig = questionConfigs[i], questionId = questionConfig.id, questionCategoryId = questionConfig.category_id;
        categoryInfo[questionId] = questionCategoryId;
      }
      this._categoryInfo = categoryInfo;
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this._$elCount.on("change", this._onChangeRandomQuestionsCount.bind(this));
    }, getQuestionCategoryId:function(questionId) {
      return this._categoryInfo[questionId];
    }, getFormNamePrefix:function() {
      return this.config.formNamePrefix + "[clusters][" + this.config.id + "]";
    }, getQuestionClass:function() {
      console.log(arguments, this);
    }, setValue:function(cluster) {
      this._$elQuestions.removeAttr("checked");
      if (cluster.questions) {
        var questions = cluster.questions, checkBoxes = this._questions;
        for (var id in questions) {
          if (!questions.hasOwnProperty(id)) {
            continue;
          }
          if (!checkBoxes.hasOwnProperty(id)) {
            continue;
          }
          checkBoxes[id].attr("checked", "checked");
        }
      }
      this.setRandomQuestionsCount(cluster.count);
    }, getValue:function() {
      var questions = {}, checked = this.getCheckedQuestions();
      for (var i = 0, ln = checked.length;i < ln;i++) {
        questions[checked[i]] = 1;
      }
      return{count:this.getRandomQuestionsCount(), questions:questions};
    }, getQuestionsCount:function() {
      return this.config.questions.length;
    }, getRandomQuestionsCount:function() {
      return this._$elCount.val() - 0;
    }, setRandomQuestionsCount:function(value) {
      var $elCount = this._$elCount, CLASS_COUNT_MAXIMUM = this.CLASS_COUNT_MAXIMUM, questionsCount = this.getQuestionsCount();
      if (questionsCount < value) {
        value = questionsCount;
      }
      if (questionsCount == value) {
        $elCount.addClass(CLASS_COUNT_MAXIMUM);
      } else {
        $elCount.removeClass(CLASS_COUNT_MAXIMUM);
      }
      $elCount.val(value);
      this.updateState();
    }, getCheckedQuestions:function() {
      var result = [], checkBoxes = this._questions;
      for (var id in checkBoxes) {
        if (!checkBoxes.hasOwnProperty(id)) {
          continue;
        }
        if (checkBoxes[id].attr("checked")) {
          result.push(id);
        }
      }
      return result;
    }, getCheckedQuestionsCount:function() {
      return this.getCheckedQuestions().length;
    }, getUnCheckedQuestions:function() {
      var result = [], checkBoxes = this._questions;
      for (var id in checkBoxes) {
        if (!checkBoxes.hasOwnProperty(id)) {
          continue;
        }
        if (!checkBoxes[id].attr("checked")) {
          result.push(id);
        }
      }
      return result;
    }, updateState:function() {
      var config = this.config, categories = config.categories, categoriesCount = categories.length, formElement = config.formElement, categoryValues = formElement.getCategoryValues(), categoryLimitEnabled = formElement.getCategoryLimit(), checkedQuestions = this.getCheckedQuestions(), checkedQuestionsCount = checkedQuestions.length, unCheckedQuestions = this.getUnCheckedQuestions(), unCheckedQuestionsCount = unCheckedQuestions.length, questionsCount = this.getQuestionsCount(), questionsRandomCount = 
      this.getRandomQuestionsCount(), checkedCategories = {}, unCheckedCategories = {}, i, ln, categoryId, errors = [];
      this._$elQuestionsCount.text(checkedQuestionsCount + questionsRandomCount);
      this._$elQuestionsCountDescription.text("(" + checkedQuestionsCount + "/" + questionsRandomCount + ")");
      if (categoryLimitEnabled) {
        for (i = 0;i < categoriesCount;i++) {
          categoryId = categories[i].id;
          checkedCategories[categoryId] = 0;
          unCheckedCategories[categoryId] = 0;
        }
        for (i = 0;i < checkedQuestionsCount;i++) {
          var checkedQuestionId = checkedQuestions[i], checkedQuestionCategoryId = this.getQuestionCategoryId(checkedQuestionId);
          checkedCategories[checkedQuestionCategoryId]++;
        }
        for (i = 0;i < unCheckedQuestionsCount;i++) {
          var unCheckedQuestionId = unCheckedQuestions[i], unCheckedQuestionCategoryId = this.getQuestionCategoryId(unCheckedQuestionId);
          unCheckedCategories[unCheckedQuestionCategoryId]++;
        }
        var availableRandomQuestions = questionsRandomCount;
        for (i = 0;i < categoriesCount;i++) {
          var category = categories[i];
          categoryId = category.id;
          var checkedCount = checkedCategories[categoryId], unCheckedCount = unCheckedCategories[categoryId], limit = categoryValues[categoryId];
          if (limit < checkedCount) {
            errors.push(HM._('Количество выбранных вопросов категории "' + category.title + '" больше установленного лимита'));
          }
          if (limit > checkedCount) {
            var needRandomQuestions = limit - checkedCount;
            if (needRandomQuestions > availableRandomQuestions || unCheckedCount < needRandomQuestions) {
              errors.push(HM._('Невозможно подобрать нужное количество вопросов категории "' + category.title + '"'));
            } else {
              availableRandomQuestions -= needRandomQuestions;
            }
          }
        }
        if (availableRandomQuestions > 0) {
          errors.push(HM._("Суммарное количество выбранных вопросов превышает лимит, установленный для категорий"));
        }
      }
      var CLASS_INFO_COUNT_ERROR = this.CLASS_INFO_COUNT_ERROR, CLASS_COUNT_ERROR = this.CLASS_COUNT_ERROR, $elQuestionsCount = this._$elQuestionsCount, $elCount = this._$elCount;
      if (checkedQuestionsCount + questionsRandomCount > questionsCount) {
        $elQuestionsCount.addClass(CLASS_INFO_COUNT_ERROR);
        errors.push(HM._("Несоответствие количества вопросов в блоке к количеству требуемых вопросов в тесте"));
      } else {
        $elQuestionsCount.removeClass(CLASS_INFO_COUNT_ERROR);
      }
      if (errors.length) {
        $elCount.addClass(CLASS_COUNT_ERROR);
      } else {
        $elCount.removeClass(CLASS_COUNT_ERROR);
      }
      $elCount.attr("title", errors.join("\n"));
      this._errors = errors;
      this.fireEvent("stateUpdated");
    }, isValid:function() {
      return!this._errors.length;
    }, _onChangeRandomQuestionsCount:function() {
      this.setRandomQuestionsCount(this._$elCount.val() - 0);
    }, _onQuestionChange:function() {
      this.updateState();
    }});
    self = hm.module.quest.ui.samplingOfQuestionsEditor.ClusterEditor;
  })();
  (function() {
    var self;
    HM.define("hm.module.quest.ui.samplingOfQuestionsEditor.Editor", {extend:"hm.core.ui.Component", config:{tplByClass:true, categories:null, clustersList:null, name:"data", classNameSpace:"hm-quest-samplingOfQuestionsEditor", callBackUrl:{url:"/", title:HM._("Назад")}, value:null}, _init:function() {
      var _init = arguments.callee;
      this.getFormNamePrefix = this.getFormNamePrefix.bind(this);
      this.callParent(_init, arguments);
      var ns = this._ns;
      this._$elCategories = ns.find("categories");
      this._$elContent = ns.find("content");
      this._$elCategoryLimitSwitcher = ns.find("categoryLimitSwitcher");
      this._$elTable = ns.find("clusters");
      this._$elTotalCount = ns.find("total-count");
      this._$elFooter = ns.find("footer");
      this._$elSubmit = this._$elFooter.find("button");
      this.CLASS_TOTAL_COUNT_ERROR = ns.getClass("total-count", "error");
      this.CLASS_SAVING = ns.getClass("", "saving");
      this.CLASS_INVALID = ns.getClass("", "invalid");
      var config = this.config;
      this._initCategories(config.categories);
      this._initClusters(config.clustersList);
      if (config.value) {
        this.setValue(config.value);
      }
    }, _initCategories:function(categories) {
      var formName = this.getFormNamePrefix(), $categories = this._$elCategories, result = {}, $inputs = new jQuery;
      for (var i = 0, ln = categories.length;i < ln;i++) {
        var id = categories[i].id, name = formName + "[category][" + categories[i].id + "]", $categoryInput = this._$elContent, $category = $categories.find('[name="' + name + '"]');
        $category.on("change", this._onCategoryChange.bind(this, id));
        $inputs.push($category[0]);
        result[id] = $category;
      }
      this._categoryInputs = result;
      this._$elCategoryInputs = $inputs;
      this.setCategoryLimit(false);
    }, _initClusters:function(clustersList) {
      var list = {}, $table = this._$elTable, $footer = this._$elFooter, categories = this.config.categories, formNamePrefix = this.getFormNamePrefix();
      for (var i = 0, ln = clustersList.length;i < ln;i++) {
        var cluster = clustersList[i];
        var clusterCmp = HM.create("hm.module.quest.ui.samplingOfQuestionsEditor.ClusterEditor", {formElement:this, title:cluster.title, id:cluster.id, questions:cluster.questions, categories:categories, formNamePrefix:formNamePrefix, listeners:{scope:this, stateUpdated:this._onClusterStateUpdated}});
        clusterCmp.getEl().insertBefore($footer);
        list[cluster.id] = clusterCmp;
      }
      this._clusters = list;
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      var ns = this._ns;
      ns.on("click", "save", this._onClickSave);
      ns.on("click", "back", this._onClickBack);
      this._$elCategoryLimitSwitcher.on("change", this._onSwitcherChanged.bind(this));
    }, _checkState:function() {
      var clusters = this._clusters;
      for (var id in clusters) {
        if (!clusters.hasOwnProperty(id)) {
          continue;
        }
        clusters[id].updateState();
      }
      this._changed = true;
    }, getScrollBarWidth:function() {
      return hm.core.DOM.getScrollBarWidth() + 1;
    }, getFormNamePrefix:function() {
      return this.config.name;
    }, setCategoryLimit:function(value, silent) {
      var $inputs = this._$elCategoryInputs, $switcher = this._$elCategoryLimitSwitcher;
      if (value) {
        $switcher.attr("checked", "checked");
        $inputs.removeAttr("disabled");
      } else {
        $switcher.removeAttr("checked");
        $inputs.attr("disabled", "disabled");
      }
      if (!silent) {
        this._checkState();
      }
    }, getCategoryLimit:function() {
      return!!this._$elCategoryLimitSwitcher.attr("checked");
    }, setValue:function(value) {
      var id;
      this.setCategoryLimit(value.categoryLimitEnabled, true);
      if (value.category) {
        var categoryValues = value.category, categoryInputs = this._categoryInputs;
        for (id in categoryValues) {
          if (!categoryValues.hasOwnProperty(id)) {
            continue;
          }
          if (!categoryInputs.hasOwnProperty(id)) {
            continue;
          }
          categoryInputs[id].val(categoryValues[id]);
        }
      }
      if (value.clusters) {
        var clusterValues = value.clusters, clusters = this._clusters;
        for (id in clusterValues) {
          if (!clusterValues.hasOwnProperty(id)) {
            continue;
          }
          if (!clusters.hasOwnProperty(id)) {
            continue;
          }
          clusters[id].setValue(clusterValues[id]);
        }
      }
      this._checkState();
      this._changed = false;
    }, getValue:function() {
      var clusters = this._clusters, clusterValues = {}, id;
      for (id in clusters) {
        if (!clusters.hasOwnProperty(id)) {
          continue;
        }
        clusterValues[id] = clusters[id].getValue();
      }
      return{clusters:clusterValues, category:this.getCategoryValues(), categoryLimitEnabled:this.getCategoryLimit()};
    }, getCategoryValues:function() {
      var categoryInputs = this._categoryInputs, categoryValues = {};
      for (var id in categoryInputs) {
        if (!categoryInputs.hasOwnProperty(id)) {
          continue;
        }
        categoryValues[id] = categoryInputs[id].val();
      }
      return categoryValues;
    }, _onCategoryChange:function(id, e) {
      console.log(e, id);
      this._checkState();
    }, _onSwitcherChanged:function() {
      this.setCategoryLimit(this.getCategoryLimit());
    }, _onClusterStateUpdated:function() {
      var clusters = this._clusters, total = 0, valid = true;
      for (var id in clusters) {
        if (!clusters.hasOwnProperty(id)) {
          continue;
        }
        var cluster = clusters[id];
        total += cluster.getRandomQuestionsCount();
        total += cluster.getCheckedQuestionsCount();
        valid = valid && cluster.isValid();
      }
      var $elTotalCount = this._$elTotalCount, CLASS_TOTAL_COUNT_ERROR = this.CLASS_TOTAL_COUNT_ERROR, $elSubmit = this._$elSubmit, $el = this._$el, CLASS_INVALID = this.CLASS_INVALID;
      $elTotalCount.text(total);
      if (valid) {
        $elTotalCount.removeClass(CLASS_TOTAL_COUNT_ERROR);
        $el.removeClass(CLASS_INVALID);
      } else {
        $elTotalCount.addClass(CLASS_TOTAL_COUNT_ERROR);
        $el.addClass(CLASS_INVALID);
      }
      this._changed = true;
    }, _onClickSave:function(e) {
      e.preventDefault();
      var $el = this._$el, CLASS_SAVING = this.CLASS_SAVING, ErrorBox = hm.core.ui.errorbox.ErrorBox;
      $el.addClass(CLASS_SAVING);
      ErrorBox.clear();
      this._changed = false;
      jQuery.ajax({type:"post", data:{data:JSON.stringify(this.getValue())}, url:location.href}).done(function() {
        ErrorBox.showMessage({type:ErrorBox.TYPE_SUCCESS, message:HM._("Выборка вопросов успешно сохранена")});
      }).fail(function() {
        ErrorBox.showMessage({type:ErrorBox.TYPE_ERROR, message:HM._("Произошла ошибка при сохранении выборки вопросов")});
      }).always(function() {
        $el.removeClass(CLASS_SAVING);
      });
    }, _onClickBack:function(e) {
      e.preventDefault();
      var callBackUrl = this.config.callBackUrl.url;
      function go() {
        location.href = callBackUrl;
      }
      if (!this._changed) {
        go();
      } else {
        elsHelpers.confirm(HM._("Уверены, что хотите прервать настройку выборки вопросов? Все изменения будут потеряны.")).done(go);
      }
    }});
    self = hm.module.quest.ui.samplingOfQuestionsEditor.Editor;
  })();
  (function() {
    var self;
    HM.define("hm.module.user.ui.role.switcher.RoleSwitcher", {extend:"hm.core.ui.Component", config:{elTag:"span", tplByClass:true, userRoles:[], inheritUsers:[], enduserSwitch:true, classNameSpace:"hm-user-roleSwitcher"}, _init:function() {
      var _init = arguments.callee;
      this.callParent(_init, arguments);
      this.CLASS_DISABLED = this._ns.getClass(false, "disabled");
      var roles = this.config.userRoles || [], rolesWithoutEmployee = [], roleEndUser = null;

      if(roles.length==2 && roles[1].name=='supervisor')//basic_
      {
          this.config.userRoles[1].alias = HM._('Кабинет руководителя');
      }

      for (var i in roles) {
        if (!roles.hasOwnProperty(i)) {
          continue;
        }
        if (!this.isEndUser(roles[i].basic_name)) {
          rolesWithoutEmployee.push(roles[i]);
        } else {
          if (this.config.enduserSwitch) {
            roleEndUser = roles[i];
          }
        }
      }
      if (roleEndUser) {
        this.ENDUSER_NAME = roleEndUser.basic_name;
        roleEndUser.alias = this._renderTemplate({tpl:this.getTemplateNameByClass("item/EndUserItem"), returnString:true});
        rolesWithoutEmployee.push(roleEndUser);
      }
      this._collection = HM.create("hm.core.Collection", {data:rolesWithoutEmployee});
      var $el = this._$el, ns = this._ns;
      this._$elLeftPart = ns.find("left");
      this._$elCenterPart = ns.find("center");
      if (this.config.enduserSwitch && this._collection.length() <= 2) {
        ns.find("trigger").remove();
      }
      var currentRole = this._collection.find("current", true);
      if (currentRole) {
        this.setValue(currentRole.get("basic_name"));
      }
    }, _initEvents:function() {
      var ns = this._ns;
      if (this.config.enduserSwitch && this._collection.length() > 2) {
        ns.on("click", "left", this._onClickButton);
      } else {
        ns.on("click", "left", this._onClickTrigger);
      }
      ns.on("click", "right", this._onClickTrigger);
      ns.on("click", "center", this._onClickTrigger);
      HM.$document().on("click", this._onClick_document.bind(this));
    }, isEndUser:function(basic_name) {
      var inheritUsers = this.config.inheritUsers[basic_name];
      if (!inheritUsers) {
        return false;
      }
      for (var i = 0;i < inheritUsers.length;i++) {
        if (inheritUsers[i] === "enduser") {
          return true;
        }
      }
      return false;
    }, disable:function() {
      if (this.disabled) {
        return;
      }
      this._$el.addClass(this.CLASS_DISABLED);

      var roles = this.config.userRoles || [], rolesWithoutEmployee = [], roleEndUser = null;
      this._$elCenterPart.text((roles.length==2 && roles[1].name=='supervisor') ? HM._("Кабинет руководителя"):HM._("Режим управления"));

      this.disabled = true;
    }, enable:function() {
      if (!this.disabled) {
        return;
      }
      this._$el.removeClass(this.CLASS_DISABLED);
      this.disabled = false;
    }, showMenu:function() {
      if (this.disabled) {
        return;
      }
      var position = this._$elCenterPart.offset(), $menuEl = this._menu.getEl(), menuNs = HM.create("hm.core.ui.ClassNameSpace", {ns:this.config.classNameSpace, scope:this, $el:$menuEl});
      $menuEl.css({left:position.left, top:position.top + this._$el.height()});
      var $endUserItem = menuNs.find("menu-item-enduser");
      if (this.value == this.ENDUSER_NAME) {
        $endUserItem.hide();
      } else {
        $endUserItem.show();
      }
      hm.core.PopupManager.show($menuEl[0], this._onHideMenu, this, true);
      this._menuShowed = true;
    }, hideMenu:function() {
      var $menuEl = this._menu.getEl();
      hm.core.PopupManager.hide($menuEl[0]);
    }, setLocation:function(roleName) {
      window.location.href = "/switch/role/" + roleName;
    }, setValue:function(basic_name, redirect) {
      this.value = basic_name;
      if (basic_name === this.ENDUSER_NAME) {
        this.disable();
      } else {
        var currentRole = this._collection.find("basic_name", basic_name);
        this._$elCenterPart.text(currentRole.get("alias"));
        this.enable();
      }
      if (redirect) {
        this.setLocation(basic_name);
      }
    }, _onClickButton:function() {
      if (this.disabled) {
        this.enable();
      } else {
        this.disable();
        if (this.value !== this.ENDUSER_NAME) {
          this.setLocation(this.ENDUSER_NAME);
        }
      }
    }, _onClick_document:function(e) {
      if (e.target === this._$elLeftPart[0]) {
        return;
      }
      this.setValue(this.value);
    }, _onGetListCls:function(model) {
      var role = model.get("basic_name"), ns = this._ns;
      if (role === this.ENDUSER_NAME) {
        return ns.getClass("menu-item", "enduser");
      } else {
        return ns.getClass("menu-item", role);
      }
    }, _onClickTrigger:function(e) {
      if (this.config.enduserSwitch && this._collection.length() === 2) {
        if (this.isEndUser(this.value)) {
          this.setValue(this._collection.models[0].get("basic_name"), true);
        } else {
          this.setValue(this.ENDUSER_NAME, true);
        }
        return;
      }
      if (this.disabled) {
        this._onClickButton();
      }
      if (!this._menu) {
        this._menu = HM.create("hm.core.ui.List", {className:this._ns.getClass("menu"), collection:this._collection, displayField:"alias", valueField:"basic_name", listeners:{select:this._onSelect, scope:this}, getCls:this._onGetListCls.bind(this)});
      }
      if (!this._menuShowed) {
        this.showMenu();
      } else {
        this.hideMenu();
      }
      e.stopPropagation();
    }, _onHideMenu:function() {
      this._menuShowed = false;
      if (this.value === this.ENDUSER_NAME) {
        this.disable();
      }
    }, _onSelect:function(e, list, model) {
      var name = model.get("basic_name"), needChangeRole = this.value !== name;
      this.setValue(name);
      this.hideMenu();
      if (needChangeRole) {
        this.setLocation(name);
      }
    }});
    self = hm.module.user.ui.role.switcher.RoleSwitcher;
  })();
  (function() {
    var self;
    HM.define("hm.module.blog.service.BlogService", {extend:"hm.core.BaseService", viewBlog:function(blog_id, subject_id) {
      location.href = this.getViewBlogUrl(blog_id, subject_id);
    }, getViewBlogUrl:function(blog_id, subject_id) {
      return hm.core.Url.getInstance().url({module:"blog", controller:"index", action:"view", subject_id:subject_id ? subject_id : 0, blog_id:blog_id});
    }, getBlogListUrl:function(subject_id, subject) {
      if (arguments.length === 0) {
        return hm.core.Url.getInstance().url({module:"blog", controller:"index", action:"index"});
      }
      return hm.core.Url.getInstance().url({module:"blog", controller:"index", action:"index", subject_id:subject_id, subject:subject || "subject"});
    }});
    self = hm.module.blog.service.BlogService;
  })();
  (function() {
    var self;
    HM.define("hm.module.course.service.CourseService", {extend:"hm.core.BaseService", getListOfGraduatedCoursesUrl:function() {
      return hm.core.Url.getInstance().url({module:"subject", controller:"list", action:"list", "list-switcher":"past"});
    }, showGraduatedCourses:function() {
      location.href = this.getListOfGraduatedCoursesUrl();
    }});
    self = hm.module.course.service.CourseService;
  })();
  (function() {
    var self;
    HM.define("hm.module.course.service.lesson.LessonService", {extend:"hm.core.BaseService", viewLesson:function(lesson_id, subject_id) {
      location.href = this.getLessonUrl(lesson_id, subject_id);
    }, getLessonUrl:function(lesson_id, subject_id) {
      return hm.core.Url.getInstance().url({module:"lesson", controller:"execute", action:"index", subject_id:subject_id, lesson_id:lesson_id});
    }, getLessonListUrl:function(subject_id) {
      return hm.core.Url.getInstance().url({module:"lesson", controller:"list", action:"index", subject_id:subject_id});
    }, getMyLessonsListUrl:function(subject_id) {
      return hm.core.Url.getInstance().url({module:"lesson", controller:"list", action:"my", subject_id:subject_id});
    }, getInterviewUrl:function(lesson_id, subject_id, user_id, addUser) {
      var urlParts = {module:"interview", controller:"index", action:"index", lesson_id:lesson_id, subject_id:subject_id};
      if(addUser) {
          urlParts.user_id = user_id;
      }
      return hm.core.Url.getInstance().url(urlParts);
    }});
    self = hm.module.course.service.lesson.LessonService;
  })();
  (function() {
    var self;
    HM.define("hm.module.course.service.material.MaterialService", {extend:"hm.core.BaseService", getListUrl:function(subject_id) {
      return hm.core.Url.getInstance().url({module:"subject", controller:"materials", action:"index", subject_id:subject_id});
    }});
    self = hm.module.course.service.material.MaterialService;
  })();
  (function() {
    var self;
    HM.define("hm.module.forum.service.ForumService", {extend:"hm.core.BaseService", viewForum:function(section_id, forum_id) {
      location.href = this.getViewForumUrl(section_id, forum_id);
    }, viewInternalForumUrl:function(subject_id, section_id) {
      location.href = this.getViewInternalForumUrl(subject_id, section_id);
    }, getViewForumUrl:function(section_id, forum_id) {
      var url = hm.core.Url.getInstance().url({module:"forum"});
      url += "/" + forum_id + "/" + section_id;
      return url;
    }, getViewInternalForumUrl:function(subject_id, section_id) {
      var url = hm.core.Url.getInstance().url({module:"forum"});
      url += "/subject/subject/" + subject_id + "/" + section_id;
      return url;
    }});
    self = hm.module.forum.service.ForumService;
  })();
  (function() {
    var self;
    HM.define("hm.module.message.service.MessageService", {extend:"hm.core.BaseService", viewMessage:function(message_id) {
      HM.create("hm.ui.message.ViewMessageDialog", {message_id:message_id});
    }, viewMessageList:function() {
      location.href = this.getMessageListUrl();
    }, getMessageListUrl:function() {
      return hm.core.Url.getInstance().url({module:"message", controller:"view", action:"index"});
    }, getViewMessageUrl:function(message_id) {
      return hm.core.Url.getInstance().url({module:"message", controller:"view", action:"one", message_id:message_id});
    }});
    self = hm.module.message.service.MessageService;
  })();
  (function() {
    var self;
    HM.define("hm.module.user.service.UserService", {extend:"hm.core.BaseService", __construct:function() {
      var __construct = arguments.callee;
      this.callParent(__construct, arguments);
      this._data = $("html").data("user") || {};
    }, getUserId:function() {
      if (this._data.id) {
        return this._data.id - 0;
      }
      return false;
    }, getFirstName:function() {
      return this._data.firstName;
    }, getLastName:function() {
      return this._data.lastName;
    }, isGuest:function() {
      return this.getUserId() === false;
    }, isBaseUser:function() {
      return this._data.permission === 1;
    }, getUserUrl:function(userId) {
      return hm.core.Url.getInstance().url({module:"user", controller:"list", action:"view", user_id:userId});
    }});
    self = hm.module.user.service.UserService;
  })();
  (function() {
    var self;
    HM.define("hm.module.wiki.service.WikiService", {extend:"hm.core.BaseService", viewPage:function(page_id, subject_id, subject) {
      location.href = this.getPageUrl(page_id, subject_id, subject);
    }, getPageUrl:function(page_id, subject_id, subject) {
      var urlData = {module:"wiki", controller:"index", action:"view", id:page_id};
      if (subject_id) {
        urlData["subject_id"] = subject_id;
        urlData["subject"] = subject || "subject";
      }
      return hm.core.Url.getInstance().url(urlData);
    }});
    self = hm.module.wiki.service.WikiService;
  })();
  (function() {
    var self;
    HM.define("hm.module.develop.ui.panel.DevPanel", {extend:"hm.core.ui.Component", requires:["hm.core.Cookie"], config:{tpl:"hm/module/develop/ui/panel/DevPanel"}, COOKIE_DEBUG_NAME:"hm-dev-debug-enabled", DEBUG_ENABLED:"1", DEBUG_DISABLED:"0", _init:function() {
      var _init = arguments.callee;
      this.debugEnabled = hm.core.Cookie.get(this.COOKIE_DEBUG_NAME) === this.DEBUG_ENABLED;
      this.callParent(_init, arguments);
      this._$elDebugSwitcher = this.getEl().find(".hm-dev-button-debug-switcher");
    }, _initEvents:function() {
      var _initEvents = arguments.callee;
      this.callParent(_initEvents, arguments);
      this._$elDebugSwitcher.on("click", this._onDebugSwitcherClick.bind(this));
    }, disableDebug:function() {
      this.debugEnabled = false;
      hm.core.Cookie.set(this.COOKIE_DEBUG_NAME, this.DEBUG_DISABLED, {path:"/"});
      this._$elDebugSwitcher.removeClass("hm-dev-button-debug-switcher-enabled");
      location.reload();
    }, enableDebug:function() {
      this.debugEnabled = true;
      hm.core.Cookie.set(this.COOKIE_DEBUG_NAME, this.DEBUG_ENABLED, {path:"/"});
      this._$elDebugSwitcher.addClass("hm-dev-button-debug-switcher-enabled");
      location.reload();
    }, show:function() {
      HM.$body().append(this.getEl());
    }, _onDebugSwitcherClick:function() {
      if (this.debugEnabled) {
        this.disableDebug();
      } else {
        this.enableDebug();
      }
    }});
    HM.singleton(hm.module.develop.ui.panel.DevPanel);
    self = hm.module.develop.ui.panel.DevPanel;
  })();
  (function() {
    var self;
    HM.define("hm.module.message.ui.ViewMessageDialog", {extend:"hm.core.ui.window.Window", config:{title:HM._("Просмотр сообщения"), message_id:0}, _init:function() {
      var _init = arguments.callee;
      this.contentUrl = HM.getService("Message").getViewMessageUrl(this.message_id);
      this.callParent(_init, arguments);
    }});
    self = hm.module.message.ui.ViewMessageDialog;
  })();
})(window);

