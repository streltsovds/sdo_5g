<?php
class Supervisor_DeputyController extends HM_Controller_Action
{
    protected $_currentUser = null;
    protected $_defaultService = null;
    protected $_defaultUserId = 0;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->_defaultService = $this->getService('Deputy');
        $this->_currentUser = $this->getService('User')->getCurrentUser();
        $this->_defaultUserId = $this->_currentUser->MID;


    }


    /**
     * Выводим список заместителей (для возможной отмены)
     */
    public function indexAction()
    {
        $select = $this->_defaultService->getSelect();
        $select->from(
            array('a' => 'deputy_assign'),
            array(
                'assignId' => 'a.assign_id',
                'user_name' => new Zend_Db_Expr("RTRIM(LTRIM(CONCAT(p.LastName, CONCAT(' ', CONCAT(p.FirstName, CONCAT(' ', p.Patronymic))))))"),
                'begin_date' => 'a.begin_date',
                'end_date' => 'a.end_date',
            )
        )->joinInner(
            array('p' => 'People'),
            "a.deputy_user_id = p.MID",
            array()
        )->where(
            "(a.not_active IS NULL OR a.not_active = 0)"
        )->where(
            "a.user_id = ?", $this->_currentUser->MID
        );

        $grid = $this->getGrid($select,
            array(
                'assignId' => array('hidden' => true),
                'user_name' => array('title' => _('ФИО заместителя')),
                'begin_date' => array('title' => _('Дата с'),'format' => array('date', array('date_format' => HM_Locale_Format::getDateFormat()))),
                'end_date' => array('title' => _('Дата по'), 'format' => array('date', array('date_format' => HM_Locale_Format::getDateFormat()))),
            ),
            array(
                'assignId'
            )
        );

        $grid->addAction(
            array(
                'module' => 'supervisor',
                'controller' => 'deputy',
                'action' => 'close',
            ),
            array('assignId'),
            _('Отменить назначение')
        );

        $this->view->gridAjaxRequest = $this->isGridAjaxRequest();
        $this->view->assignUrl = $this->view->url(array('module' => 'supervisor', 'controller' => 'deputy', 'action' => 'assign-deputy'));
        $this->view->grid = $grid;

    }

    /**
     * Пользователь назначает себе заместителя
     */
    public function assignDeputyAction()
    {

        $this->view->setHeader('Назначение заместителя');

        $returnUrl = $this->view->url(array(
            'module' => 'supervisor',
            'controller' => 'deputy',
            'action' => 'index'
        ));

        $form = new HM_Form_AssignDeputy();
        $form->getElement('cancelUrl')->setValue($returnUrl);


        if ($this->_request->isPost() && $form->isValid($this->_request->getPost())) {

            $data = $form->getValues();
            $data['user_id'] = $this->_defaultUserId;

            if (is_array($data['deputy_user_id']) ) $data['deputy_user_id'] = $data['deputy_user_id'][0];


            $this->getService('Deputy')->insert($data);

            $this->_flashMessenger->addMessage(_('Заместитель успешно назначен'));
            $this->_redirector->gotoSimple('card', 'edit', 'user', array('user_id' => $this->_defaultUserId));
        }


        $this->view->form = $form;
    }

    /**
     * Пользователь отменяет своего заместителя
     * @throws Exception
     */
    public function closeAction()
    {
        $assignId = $this->_getParam('assignId', 0);
        $deputyUserId = $this->_request->getParam('MID');

        $date = new DateTime();
        $date->sub( new DateInterval('P1D'));

        if ($assignId) {
            // В том случае, если явно указан ID отменяемой записи
            $this->getService('Deputy')->update(array(
                'assign_id' => $assignId,
                'not_active' => 1,
                'end_date' => $date->format('Ymd 00:00:00')
            ));

            $this->_flashMessenger->addMessage(_('Заместитель успешно отменен'));
            $this->_redirector->gotoSimple('index', 'deputy', 'supervisor');
        } else {
            // В том случае, если указан ID заместителя, которого нужно отменить
            $this->getService('Deputy')->updateWhere(
                array(
                    'end_date' => $date->format('Ymd 00:00:00'),
                    'not_active' => 1
                ),
                $this->quoteInto(
                    array("user_id = ?", " AND deputy_user_id = ?"),
                    array($this->_defaultUserId, $deputyUserId)
                )
            );

            $this->_flashMessenger->addMessage(_('Заместитель успешно отменен'));
            $this->_redirector->gotoSimple('index', 'index', 'default');
        }
    }



    // Получить список возможных заместителей
    public function getDeputsAction()
    {

        $this->_helper->getHelper('layout')->disableLayout();
        Zend_Controller_Front::getInstance()->unregisterPlugin('HM_Controller_Plugin_Unmanaged');
        $this->getHelper('viewRenderer')->setNoRender();
        $this->getResponse()->setHeader('Content-Type', 'application/json; charset=UTF-8');

        $userId = $this->_defaultUserId;
        $tag = $this->_request->getParam('tag');
        $tag = '%' . $tag . '%';

//        $select = $this->getService('User')->getSelect()->from(
//            array('p' => 'People'),
//            array()
//        )->joinInner(
//            array('so' => 'structure_of_organ'),
//            "p.MID = so.mid",
//            array()
//        )->join(
//            array('so1' => 'structure_of_organ'),
//            "so.owner_soid = so1.soid",
//            array()
//        )->joinInner(
//            array('so2' => 'structure_of_organ'),
//            "so1.lft < so2.lft AND so1.rgt > so2.rgt AND so.soid != so2.soid",
//            array()
//        )->joinInner(
//            array('p2' => 'People'),
//            "so2.mid = p2.MID",
//            array(
//                'key' => new Zend_Db_Expr("LTRIM(RTRIM(CONCAT(p2.LastName, CONCAT(' ', CONCAT(p2.FirstName, CONCAT(' ', p2.Patronymic))))))"),
//                'value' => 'MID'
//            )
//        )->where(
//            "p.MID = ?", $userId
//        )->order("key");

        // По-новому - даем возможность выбирать всех пользователей без учета оргструктуры
        $select = $this->getService('User')->getSelect()->from(
            array('p2' => 'People'),
            array(
                'fio' => new Zend_Db_Expr("LTRIM(RTRIM(CONCAT(p2.LastName, CONCAT(' ', CONCAT(p2.FirstName, CONCAT(' ', p2.Patronymic))))))"),
                'user_id' => 'MID'
            )
        )->joinInner(
            array('so' => 'structure_of_organ'),
            "p2.MID = so.mid",
            array()
        )->where(
            "p2.MID != ?", $userId
        )->order("fio");


        $select->where(
            "(p2.FirstName LIKE ? ",
            $tag
        )->orWhere(
            "p2.LastName LIKE ?",
            $tag
        )->orWhere(
            "p2.Patronymic LIKE ?)",
            $tag
        );

        $rows = $select->query()->fetchAll();
        foreach($rows as $row) {
            $o = new stdClass();
            $o->key = $row['fio'];
            $o->value = $row['user_id'];
            $res[] = $o;
        }

        echo HM_Json::encodeErrorSkip($res);

    }




}