<?php

class Course_IndexController extends HM_Controller_Action_Course
{
    public function init()
    {
        $this->setEmpty();
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function indexAction()
    {
        if($this->_course) {
            switch ($this->_course->format) {
                case HM_Course_CourseModel::FORMAT_TINCAN:
                    $this->_forward('view-tincan', 'index', 'course', ['course_id' => $this->_courseId]);
                    break;
                default:
                    $this->_forward('view-scorm', 'index', 'course', ['course_id' => $this->_courseId]);
                    break;
            }
        } else {
            $this->_helper->getHelper('layout')->setLayout('naked');
            throw new HM_Exception('Course not found');
        }
    }

    public function viewScormAction()
    {
        /** @var HM_Course_Item_ItemService $courseItemService */
        $courseItemService = $this->getService('CourseItem');

        $userId = $this->getService('User')->getCurrentUserId();
        $courseId = $this->_courseId;
        $course = $this->_course;

        $this->view->current = $this->getService('CourseItemCurrent')->getCurrent($userId, 0, $courseId);
        if ($this->view->current) {
            $this->view->itemCurrent = $courseItemService->getOne(
                $courseItemService->find($this->view->current)
            );
        }

        /** @var HM_View_Helper_HM $HM */
        $HM = $this->view->HM();

        $treeData = $courseItemService->getHmTreeData($courseId);

        /** @var HM_User_UserService $userService */
        $userService = $this->getService('User');
        $hmViewerClassName = 'hm.core.ui.trainingModulesViewer.Viewer';

        $hmViewerConfig = array(
            'renderTo' => '#hm-training-modules-viewer',
            'courseId' => $courseId,
            'lessonId' => (int) $this->_getParam('lesson_id', 0),
            'itemId' => $this->_getParam('item_id', null),
            'treeData' => $treeData,
            'openInWindow' => (int) $course->new_window ? true : false,
            'extraNavigation' => (int) $course->extra_navigation ? true : false,
        );

        $HM->create($hmViewerClassName, $hmViewerConfig);
        $this->view->courseContent = true;
        $this->view->hmScript = 'HM.create(' . json_encode($hmViewerClassName) . ', ' . json_encode($hmViewerConfig) . ');';
        // @todo Найти способ установить свой лейаут scorm.tpl
        $this->_helper->layout()->disableLayout();
    }

    public function viewTincanAction()
    {
        $currentUser = $this->getService('User')->getCurrentUser();
        $config = Zend_Registry::get('config');
        $auth = urlencode('Basic ' . base64_encode("{$config->lrs->login}:{$config->lrs->password}"));
        $actor = HM_Json::encodeErrorSkip([
            'objectType' => 'Agent',
            'name' => "{$currentUser->Patronymic} {$currentUser->FirstName} {$currentUser->LastName}",
            'mbox' => $currentUser->EMail,
        ]);

        $params = [
            'endpoint' => $config->lrs->endpoint,
            'auth' => $auth,
            'actor' => $actor,
            'activity_id' => $this->_course->activity_id,
            //'registration' => (Uuid::uuid4())->toString(),
        ];

        $url = "/COURSES/course{$this->_courseId}/{$this->_course->entry_point}";

        $this->view->courseUrl = "$url?".urldecode(http_build_query($params));
        $this->_helper->layout()->disableLayout();
    }

    public function getTreeChildAction()
    {
        /** @var HM_Course_Item_ItemService $courseItemService */
        $courseItemService = $this->getService('CourseItem');

        $branch = $this->_getParam('key', 0);
        $courseId = $this->_getParam('course_id' , 0);
        
        if (!$courseId) {
            $item = $courseItemService->getOne($courseItemService->find($branch));
            if ($item) {
                $courseId = $item->cid;
            }
        }

        if(0 == $branch || 0 == $courseId) {
            exit;
        }

        $courseItemService->addOpenedBranch($courseId, $branch);
        $branch = $courseItemService->getBranchContent($courseId, $branch);
        $str = HM_Json::encodeErrorSkip($branch);

        echo $str;
        exit;
    }

    public function deletetreechildAction()
    {

        $branch = $this->_getParam('key', 0);
        $courseId = $this->_getParam('course_id' , 0);
        //pr($this->_getAllParams());
        if(0 == $branch || 0 == $courseId){
            exit;
        }

        $this->getService('CourseItem')->deleteOpenedBranch($courseId, $branch);

        exit;
    }

}
