<?php
class HM_Tc_Subject_SubjectModel extends HM_Subject_SubjectModel
{
    // Тип обучения
    const TYPE_FULLTIME = 0; //Очное
    const TYPE_DISTANCE = 1; // Дистанционное

    //Для очных занятий: Обязательное/Дополнительное/Корпоративное
    const FULLTIME_CATEGORY_NECESSARY = 1;
    const FULLTIME_CATEGORY_ADDITION  = 2;
    const FULLTIME_CATEGORY_CORPORATE = 3; // специфика ГПН

    //тип обучения (то что было в тц - внешнее, то, что в сц - внутреннее)

    const TYPE_EDUCATION_INNER   = 1;
    const TYPE_EDUCATION_OUTER   = 0;
    const TYPE_EDUCATION_REMOTE   = 2;


    const FULLTIME_PRIMARY_BOTH      = 1;
    const FULLTIME_PRIMARY_PRIMARY   = 2;
    const FULLTIME_PRIMARY_SECONDARY = 3;

    const FULLTIME_CRITERION_TYPE_CRITERION = 1;
    const FULLTIME_CRITERION_TYPE_CRITERION_TEST = 2;

    const FULLTIME_STATUS_NOT_PUBLISHED = 0;
    const FULLTIME_STATUS_PUBLISHED     = 1;

    protected $_primaryName = 'subid';



    public function isExpired()
    {
        if ($this->end)
            return parent::isExpired(); // TODO: Change the autogenerated stub
        else
            return false;
    }

/*
 *  не нужен отдельный DefaultUri для внешних курсов
    public function getDefaultUri()
    {
        if (!empty($this->default_uri) && Zend_Registry::get('serviceContainer')->getService('Acl')->inheritsRole(Zend_Registry::get('serviceContainer')->getService('User')->getCurrentUserRole(), HM_Role_Abstract_RoleModel::ROLE_ENDUSER)) {
                // dirty hack
            $uri = str_replace(array(
                    'lesson/list/index',
            ), array(
                    'lesson/list/my',
            ), $this->default_uri);

            return $uri;

        } else {
            $view = Zend_Registry::get('view');
            return $view->url(array(
                        'module'     => 'subject',
                        'controller' => 'fulltime',
                        'action'     => 'view',
                        'baseUrl'    => 'tc',
                        'subject_id' => $this->subid));
        }
    }
*/

    public function getTcProvider()
    {
        $service  = Zend_Registry::get('serviceContainer')->getService('TcProvider');
        $provider = $service->getOne($service->find($this->provider_id));
        return $provider  ? $provider -> name : _('Нет');
    }

    static public function getVariant($variantId, $method)
    {
        $method = 'get' . $method . 'Variants';
        $variants = self::$method();
        if (isset($variants[$variantId])) {
            return $variants[$variantId];
        }
        return false;
    }

    static public function getVariants($method)
    {
        $method = 'get' . $method . 'Variants';
        return self::$method();
    }

    static public function getFulltimeCategoriesVariants()
    {
        return array(
            self::FULLTIME_CATEGORY_NECESSARY => _('Обязательное'),
            self::FULLTIME_CATEGORY_ADDITION  => _('Дополнительное'),
            //self::FULLTIME_CATEGORY_CORPORATE => _('Корпоративное'),
        );
    }

    static public function getFulltimeCategoriesSimpleVariants()
    {
        return array(
            self::FULLTIME_CATEGORY_NECESSARY => _('Обязательное'),
            self::FULLTIME_CATEGORY_ADDITION  => _('Дополнительное'),
            //self::FULLTIME_CATEGORY_CORPORATE => _('Корпоративное'),
        );
    }

    public function getFulltimeCategory()
    {
        return $this->getVariant($this->category, 'FulltimeCategories');
    }

    static public function getFulltimeTypesVariants()
    {
        return array(
            self::FULLTIME_PRIMARY_BOTH      => _('Не установлен'),
            self::FULLTIME_PRIMARY_PRIMARY   => _('Первичное'),
            self::FULLTIME_PRIMARY_SECONDARY => _('Вторичное'),
        );
    }

    static public function getFulltimeFormatesVariants()
    {
        return array(
            1 => _('Семинар'),
            2 => _('Тренинг'),
            3 => _('Лекция'),
            4 => _('Выставка'),
            5 => _('Консультация'),
            6 => _('Круглый стол'),
            7 => _('Стратегическая сессия'),
        );
    }

    static public function getFulltimeStatesVariants()
    {
        return array(
            self::FULLTIME_STATUS_NOT_PUBLISHED => _('Не утвержден'),
            self::FULLTIME_STATUS_PUBLISHED => _('Утвержден'),
        );
    }

    static public function getFulltimeStatesSimpleVariants()
    {
        return array(
            self::FULLTIME_STATUS_NOT_PUBLISHED => _('Нет'),
            self::FULLTIME_STATUS_PUBLISHED => _('Да'),
        );
    }

    static public function getFulltimeCheckFormesVariants()
    {
        return array(
            1 => _('Тестирование'),
            2 => _('Опрос'),
        );
    }

    public function getCriterionName()
    {
        if (($this->criterion_type == self::FULLTIME_CRITERION_TYPE_CRITERION) && $this->criterion) {
            return $this->criterion->current()->name;
        }
        if (($this->criterion_type == self::FULLTIME_CRITERION_TYPE_CRITERION_TEST) && $this->criterionTest) {
            return $this->criterionTest->current()->name;
        }

        return '';
    }

    public function getPrice()
    {
        return number_format($this->price, 0, '.', ' ');
    }

    static public function getFulltimeEducationTypesVariants()
    {
        return array(
            self::TYPE_EDUCATION_INNER   => _('Курс учебного центра'),
            self::TYPE_EDUCATION_OUTER => _('Курс провайдера'),
            self::TYPE_EDUCATION_REMOTE => _('Курс дистационный'),
        );
    }
}
